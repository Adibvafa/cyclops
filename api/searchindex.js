Search.setIndex({"docnames": ["api", "contributing", "index", "intro", "reference/api/_autosummary/cyclops.data.features.medical_image", "reference/api/_autosummary/cyclops.data.features.medical_image.MedicalImage", "reference/api/_autosummary/cyclops.data.slicer", "reference/api/_autosummary/cyclops.data.slicer.SliceSpec", "reference/api/_autosummary/cyclops.data.slicer.compound_filter", "reference/api/_autosummary/cyclops.data.slicer.filter_datetime", "reference/api/_autosummary/cyclops.data.slicer.filter_non_null", "reference/api/_autosummary/cyclops.data.slicer.filter_range", "reference/api/_autosummary/cyclops.data.slicer.filter_string_contains", "reference/api/_autosummary/cyclops.data.slicer.filter_value", "reference/api/_autosummary/cyclops.data.slicer.is_datetime", "reference/api/_autosummary/cyclops.data.slicer.overall", "reference/api/_autosummary/cyclops.evaluate.evaluator", "reference/api/_autosummary/cyclops.evaluate.evaluator.evaluate", "reference/api/_autosummary/cyclops.evaluate.fairness.config", "reference/api/_autosummary/cyclops.evaluate.fairness.config.FairnessConfig", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.evaluate_fairness", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.Accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.BinaryAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MulticlassAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MultilabelAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.AUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.BinaryAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MulticlassAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MultilabelAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.F1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.FbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.factory", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.create_metric", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.auroc", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.binary_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.stat_scores", "reference/api/_autosummary/cyclops.evaluate.metrics.metric", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.Metric", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.MetricCollection", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.OperatorMetric", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Precision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Recall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.BinaryROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MulticlassROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MultilabelROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.ROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.BinarySensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.Sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.BinarySpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MulticlassSpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MultilabelSpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.Specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.BinaryStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MulticlassStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MultilabelStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.StatScores", "reference/api/_autosummary/cyclops.monitor.clinical_applicator", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.ClinicalShiftApplicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.binary_noise_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_association_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_swap_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.gaussian_noise_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.knockout_shift", "reference/api/_autosummary/cyclops.query.base", "reference/api/_autosummary/cyclops.query.base.DatasetQuerier", "reference/api/_autosummary/cyclops.query.eicu", "reference/api/_autosummary/cyclops.query.eicu.EICUQuerier", "reference/api/_autosummary/cyclops.query.gemini", "reference/api/_autosummary/cyclops.query.gemini.GEMINIQuerier", "reference/api/_autosummary/cyclops.query.interface", "reference/api/_autosummary/cyclops.query.interface.QueryInterface", "reference/api/_autosummary/cyclops.query.interface.QueryInterfaceProcessed", "reference/api/_autosummary/cyclops.query.mimiciii", "reference/api/_autosummary/cyclops.query.mimiciii.MIMICIIIQuerier", "reference/api/_autosummary/cyclops.query.mimiciv", "reference/api/_autosummary/cyclops.query.mimiciv.MIMICIVQuerier", "reference/api/_autosummary/cyclops.query.omop", "reference/api/_autosummary/cyclops.query.omop.OMOPQuerier", "reference/api/_autosummary/cyclops.query.ops", "reference/api/_autosummary/cyclops.query.ops.AddColumn", "reference/api/_autosummary/cyclops.query.ops.AddDeltaColumn", "reference/api/_autosummary/cyclops.query.ops.AddDeltaConstant", "reference/api/_autosummary/cyclops.query.ops.AddNumeric", "reference/api/_autosummary/cyclops.query.ops.And", "reference/api/_autosummary/cyclops.query.ops.Apply", "reference/api/_autosummary/cyclops.query.ops.Cast", "reference/api/_autosummary/cyclops.query.ops.ConditionAfterDate", "reference/api/_autosummary/cyclops.query.ops.ConditionBeforeDate", "reference/api/_autosummary/cyclops.query.ops.ConditionEndsWith", "reference/api/_autosummary/cyclops.query.ops.ConditionEquals", "reference/api/_autosummary/cyclops.query.ops.ConditionGreaterThan", "reference/api/_autosummary/cyclops.query.ops.ConditionIn", "reference/api/_autosummary/cyclops.query.ops.ConditionInMonths", "reference/api/_autosummary/cyclops.query.ops.ConditionInYears", "reference/api/_autosummary/cyclops.query.ops.ConditionLessThan", "reference/api/_autosummary/cyclops.query.ops.ConditionLike", "reference/api/_autosummary/cyclops.query.ops.ConditionRegexMatch", "reference/api/_autosummary/cyclops.query.ops.ConditionStartsWith", "reference/api/_autosummary/cyclops.query.ops.ConditionSubstring", "reference/api/_autosummary/cyclops.query.ops.Distinct", "reference/api/_autosummary/cyclops.query.ops.Drop", "reference/api/_autosummary/cyclops.query.ops.DropNulls", "reference/api/_autosummary/cyclops.query.ops.ExtractTimestampComponent", "reference/api/_autosummary/cyclops.query.ops.FillNull", "reference/api/_autosummary/cyclops.query.ops.GroupByAggregate", "reference/api/_autosummary/cyclops.query.ops.Join", "reference/api/_autosummary/cyclops.query.ops.JoinArgs", "reference/api/_autosummary/cyclops.query.ops.Keep", "reference/api/_autosummary/cyclops.query.ops.Limit", "reference/api/_autosummary/cyclops.query.ops.Literal", "reference/api/_autosummary/cyclops.query.ops.Or", "reference/api/_autosummary/cyclops.query.ops.OrderBy", "reference/api/_autosummary/cyclops.query.ops.QueryOp", "reference/api/_autosummary/cyclops.query.ops.RandomizeOrder", "reference/api/_autosummary/cyclops.query.ops.Rename", "reference/api/_autosummary/cyclops.query.ops.Reorder", "reference/api/_autosummary/cyclops.query.ops.ReorderAfter", "reference/api/_autosummary/cyclops.query.ops.Sequential", "reference/api/_autosummary/cyclops.query.ops.Substring", "reference/api/_autosummary/cyclops.query.ops.Trim", "reference/api/_autosummary/cyclops.query.ops.Union", "reference/api/_autosummary/cyclops.report.report", "reference/api/_autosummary/cyclops.report.report.ModelCardReport", "reference/api/_autosummary/cyclops.tasks.cxr_classification", "reference/api/_autosummary/cyclops.tasks.cxr_classification.CXRClassificationTask", "reference/api/_autosummary/cyclops.tasks.mortality_prediction", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.MortalityPredictionTask", "reference/api/cyclops.data", "reference/api/cyclops.evaluate", "reference/api/cyclops.monitor", "reference/api/cyclops.query", "reference/api/cyclops.report", "reference/api/cyclops.tasks", "tutorials", "tutorials/eicu/query_api", "tutorials/gemini/query_api", "tutorials/kaggle/heart_failure_prediction", "tutorials/mimiciii/query_api", "tutorials/mimiciv/query_api", "tutorials/nihcxr/cxr_classification", "tutorials/nihcxr/monitor_api", "tutorials/omop/query_api", "tutorials/synthea/los_prediction", "tutorials_monitor", "tutorials_query", "tutorials_use_cases"], "filenames": ["api.rst", "contributing.rst", "index.rst", "intro.rst", "reference/api/_autosummary/cyclops.data.features.medical_image.rst", "reference/api/_autosummary/cyclops.data.features.medical_image.MedicalImage.rst", "reference/api/_autosummary/cyclops.data.slicer.rst", "reference/api/_autosummary/cyclops.data.slicer.SliceSpec.rst", "reference/api/_autosummary/cyclops.data.slicer.compound_filter.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_datetime.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_non_null.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_range.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_string_contains.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_value.rst", "reference/api/_autosummary/cyclops.data.slicer.is_datetime.rst", "reference/api/_autosummary/cyclops.data.slicer.overall.rst", "reference/api/_autosummary/cyclops.evaluate.evaluator.rst", "reference/api/_autosummary/cyclops.evaluate.evaluator.evaluate.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.config.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.config.FairnessConfig.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.evaluate_fairness.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.Accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.BinaryAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.AUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.BinaryAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MulticlassAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MultilabelAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.F1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.FbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.create_metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.auroc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.binary_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.stat_scores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.Metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.MetricCollection.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.OperatorMetric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.BinaryROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MulticlassROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MultilabelROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.ROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.BinarySensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.Sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.BinarySpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MulticlassSpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MultilabelSpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.Specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.BinaryStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.StatScores.rst", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.rst", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.binary_noise_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_association_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_swap_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.gaussian_noise_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.knockout_shift.rst", "reference/api/_autosummary/cyclops.query.base.rst", "reference/api/_autosummary/cyclops.query.base.DatasetQuerier.rst", "reference/api/_autosummary/cyclops.query.eicu.rst", "reference/api/_autosummary/cyclops.query.eicu.EICUQuerier.rst", "reference/api/_autosummary/cyclops.query.gemini.rst", "reference/api/_autosummary/cyclops.query.gemini.GEMINIQuerier.rst", "reference/api/_autosummary/cyclops.query.interface.rst", "reference/api/_autosummary/cyclops.query.interface.QueryInterface.rst", "reference/api/_autosummary/cyclops.query.interface.QueryInterfaceProcessed.rst", "reference/api/_autosummary/cyclops.query.mimiciii.rst", "reference/api/_autosummary/cyclops.query.mimiciii.MIMICIIIQuerier.rst", "reference/api/_autosummary/cyclops.query.mimiciv.rst", "reference/api/_autosummary/cyclops.query.mimiciv.MIMICIVQuerier.rst", "reference/api/_autosummary/cyclops.query.omop.rst", "reference/api/_autosummary/cyclops.query.omop.OMOPQuerier.rst", "reference/api/_autosummary/cyclops.query.ops.rst", "reference/api/_autosummary/cyclops.query.ops.AddColumn.rst", "reference/api/_autosummary/cyclops.query.ops.AddDeltaColumn.rst", "reference/api/_autosummary/cyclops.query.ops.AddDeltaConstant.rst", "reference/api/_autosummary/cyclops.query.ops.AddNumeric.rst", "reference/api/_autosummary/cyclops.query.ops.And.rst", "reference/api/_autosummary/cyclops.query.ops.Apply.rst", "reference/api/_autosummary/cyclops.query.ops.Cast.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionAfterDate.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionBeforeDate.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionEndsWith.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionEquals.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionGreaterThan.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionIn.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionInMonths.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionInYears.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionLessThan.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionLike.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionRegexMatch.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionStartsWith.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionSubstring.rst", "reference/api/_autosummary/cyclops.query.ops.Distinct.rst", "reference/api/_autosummary/cyclops.query.ops.Drop.rst", "reference/api/_autosummary/cyclops.query.ops.DropNulls.rst", "reference/api/_autosummary/cyclops.query.ops.ExtractTimestampComponent.rst", "reference/api/_autosummary/cyclops.query.ops.FillNull.rst", "reference/api/_autosummary/cyclops.query.ops.GroupByAggregate.rst", "reference/api/_autosummary/cyclops.query.ops.Join.rst", "reference/api/_autosummary/cyclops.query.ops.JoinArgs.rst", "reference/api/_autosummary/cyclops.query.ops.Keep.rst", "reference/api/_autosummary/cyclops.query.ops.Limit.rst", "reference/api/_autosummary/cyclops.query.ops.Literal.rst", "reference/api/_autosummary/cyclops.query.ops.Or.rst", "reference/api/_autosummary/cyclops.query.ops.OrderBy.rst", "reference/api/_autosummary/cyclops.query.ops.QueryOp.rst", "reference/api/_autosummary/cyclops.query.ops.RandomizeOrder.rst", "reference/api/_autosummary/cyclops.query.ops.Rename.rst", "reference/api/_autosummary/cyclops.query.ops.Reorder.rst", "reference/api/_autosummary/cyclops.query.ops.ReorderAfter.rst", "reference/api/_autosummary/cyclops.query.ops.Sequential.rst", "reference/api/_autosummary/cyclops.query.ops.Substring.rst", "reference/api/_autosummary/cyclops.query.ops.Trim.rst", "reference/api/_autosummary/cyclops.query.ops.Union.rst", "reference/api/_autosummary/cyclops.report.report.rst", "reference/api/_autosummary/cyclops.report.report.ModelCardReport.rst", "reference/api/_autosummary/cyclops.tasks.cxr_classification.rst", "reference/api/_autosummary/cyclops.tasks.cxr_classification.CXRClassificationTask.rst", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.rst", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.MortalityPredictionTask.rst", "reference/api/cyclops.data.rst", "reference/api/cyclops.evaluate.rst", "reference/api/cyclops.monitor.rst", "reference/api/cyclops.query.rst", "reference/api/cyclops.report.rst", "reference/api/cyclops.tasks.rst", "tutorials.rst", "tutorials/eicu/query_api.ipynb", "tutorials/gemini/query_api.ipynb", "tutorials/kaggle/heart_failure_prediction.ipynb", "tutorials/mimiciii/query_api.ipynb", "tutorials/mimiciv/query_api.ipynb", "tutorials/nihcxr/cxr_classification.ipynb", "tutorials/nihcxr/monitor_api.ipynb", "tutorials/omop/query_api.ipynb", "tutorials/synthea/los_prediction.ipynb", "tutorials_monitor.rst", "tutorials_query.rst", "tutorials_use_cases.rst"], "titles": ["API Reference", "Contributing to cyclops", "Welcome to cyclops\u2019s documentation!", "\ud83d\udc23 Getting Started", "cyclops.data.features.medical_image", "cyclops.data.features.medical_image.MedicalImage", "cyclops.data.slicer", "cyclops.data.slicer.SliceSpec", "cyclops.data.slicer.compound_filter", "cyclops.data.slicer.filter_datetime", "cyclops.data.slicer.filter_non_null", "cyclops.data.slicer.filter_range", "cyclops.data.slicer.filter_string_contains", "cyclops.data.slicer.filter_value", "cyclops.data.slicer.is_datetime", "cyclops.data.slicer.overall", "cyclops.evaluate.evaluator", "cyclops.evaluate.evaluator.evaluate", "cyclops.evaluate.fairness.config", "cyclops.evaluate.fairness.config.FairnessConfig", "cyclops.evaluate.fairness.evaluator", "cyclops.evaluate.fairness.evaluator.evaluate_fairness", "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values", "cyclops.evaluate.metrics.accuracy", "cyclops.evaluate.metrics.accuracy.Accuracy", "cyclops.evaluate.metrics.accuracy.BinaryAccuracy", "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy", "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy", "cyclops.evaluate.metrics.auroc", "cyclops.evaluate.metrics.auroc.AUROC", "cyclops.evaluate.metrics.auroc.BinaryAUROC", "cyclops.evaluate.metrics.auroc.MulticlassAUROC", "cyclops.evaluate.metrics.auroc.MultilabelAUROC", "cyclops.evaluate.metrics.f_beta", "cyclops.evaluate.metrics.f_beta.BinaryF1Score", "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore", "cyclops.evaluate.metrics.f_beta.F1Score", "cyclops.evaluate.metrics.f_beta.FbetaScore", "cyclops.evaluate.metrics.f_beta.MulticlassF1Score", "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore", "cyclops.evaluate.metrics.f_beta.MultilabelF1Score", "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore", "cyclops.evaluate.metrics.factory", "cyclops.evaluate.metrics.factory.create_metric", "cyclops.evaluate.metrics.functional.accuracy", "cyclops.evaluate.metrics.functional.auroc", "cyclops.evaluate.metrics.functional.f_beta", "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score", "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.f1_score", "cyclops.evaluate.metrics.functional.f_beta.fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score", "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score", "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score", "cyclops.evaluate.metrics.functional.precision_recall", "cyclops.evaluate.metrics.functional.precision_recall.binary_precision", "cyclops.evaluate.metrics.functional.precision_recall.binary_recall", "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision", "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall", "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision", "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall", "cyclops.evaluate.metrics.functional.precision_recall.precision", "cyclops.evaluate.metrics.functional.precision_recall.recall", "cyclops.evaluate.metrics.functional.precision_recall_curve", "cyclops.evaluate.metrics.functional.roc", "cyclops.evaluate.metrics.functional.roc.binary_roc_curve", "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve", "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve", "cyclops.evaluate.metrics.functional.roc.roc_curve", "cyclops.evaluate.metrics.functional.sensitivity", "cyclops.evaluate.metrics.functional.specificity", "cyclops.evaluate.metrics.functional.stat_scores", "cyclops.evaluate.metrics.metric", "cyclops.evaluate.metrics.metric.Metric", "cyclops.evaluate.metrics.metric.MetricCollection", "cyclops.evaluate.metrics.metric.OperatorMetric", "cyclops.evaluate.metrics.precision_recall", "cyclops.evaluate.metrics.precision_recall.BinaryPrecision", "cyclops.evaluate.metrics.precision_recall.BinaryRecall", "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision", "cyclops.evaluate.metrics.precision_recall.MulticlassRecall", "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision", "cyclops.evaluate.metrics.precision_recall.MultilabelRecall", "cyclops.evaluate.metrics.precision_recall.Precision", "cyclops.evaluate.metrics.precision_recall.Recall", "cyclops.evaluate.metrics.precision_recall_curve", "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve", "cyclops.evaluate.metrics.roc", "cyclops.evaluate.metrics.roc.BinaryROCCurve", "cyclops.evaluate.metrics.roc.MulticlassROCCurve", "cyclops.evaluate.metrics.roc.MultilabelROCCurve", "cyclops.evaluate.metrics.roc.ROCCurve", "cyclops.evaluate.metrics.sensitivity", "cyclops.evaluate.metrics.sensitivity.BinarySensitivity", "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity", "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity", "cyclops.evaluate.metrics.sensitivity.Sensitivity", "cyclops.evaluate.metrics.specificity", "cyclops.evaluate.metrics.specificity.BinarySpecificity", "cyclops.evaluate.metrics.specificity.MulticlassSpecificity", "cyclops.evaluate.metrics.specificity.MultilabelSpecificity", "cyclops.evaluate.metrics.specificity.Specificity", "cyclops.evaluate.metrics.stat_scores", "cyclops.evaluate.metrics.stat_scores.BinaryStatScores", "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores", "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores", "cyclops.evaluate.metrics.stat_scores.StatScores", "cyclops.monitor.clinical_applicator", "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator", "cyclops.monitor.synthetic_applicator", "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator", "cyclops.monitor.synthetic_applicator.binary_noise_shift", "cyclops.monitor.synthetic_applicator.feature_association_shift", "cyclops.monitor.synthetic_applicator.feature_swap_shift", "cyclops.monitor.synthetic_applicator.gaussian_noise_shift", "cyclops.monitor.synthetic_applicator.knockout_shift", "cyclops.query.base", "cyclops.query.base.DatasetQuerier", "cyclops.query.eicu", "cyclops.query.eicu.EICUQuerier", "cyclops.query.gemini", "cyclops.query.gemini.GEMINIQuerier", "cyclops.query.interface", "cyclops.query.interface.QueryInterface", "cyclops.query.interface.QueryInterfaceProcessed", "cyclops.query.mimiciii", "cyclops.query.mimiciii.MIMICIIIQuerier", "cyclops.query.mimiciv", "cyclops.query.mimiciv.MIMICIVQuerier", "cyclops.query.omop", "cyclops.query.omop.OMOPQuerier", "cyclops.query.ops", "cyclops.query.ops.AddColumn", "cyclops.query.ops.AddDeltaColumn", "cyclops.query.ops.AddDeltaConstant", "cyclops.query.ops.AddNumeric", "cyclops.query.ops.And", "cyclops.query.ops.Apply", "cyclops.query.ops.Cast", "cyclops.query.ops.ConditionAfterDate", "cyclops.query.ops.ConditionBeforeDate", "cyclops.query.ops.ConditionEndsWith", "cyclops.query.ops.ConditionEquals", "cyclops.query.ops.ConditionGreaterThan", "cyclops.query.ops.ConditionIn", "cyclops.query.ops.ConditionInMonths", "cyclops.query.ops.ConditionInYears", "cyclops.query.ops.ConditionLessThan", "cyclops.query.ops.ConditionLike", "cyclops.query.ops.ConditionRegexMatch", "cyclops.query.ops.ConditionStartsWith", "cyclops.query.ops.ConditionSubstring", "cyclops.query.ops.Distinct", "cyclops.query.ops.Drop", "cyclops.query.ops.DropNulls", "cyclops.query.ops.ExtractTimestampComponent", "cyclops.query.ops.FillNull", "cyclops.query.ops.GroupByAggregate", "cyclops.query.ops.Join", "cyclops.query.ops.JoinArgs", "cyclops.query.ops.Keep", "cyclops.query.ops.Limit", "cyclops.query.ops.Literal", "cyclops.query.ops.Or", "cyclops.query.ops.OrderBy", "cyclops.query.ops.QueryOp", "cyclops.query.ops.RandomizeOrder", "cyclops.query.ops.Rename", "cyclops.query.ops.Reorder", "cyclops.query.ops.ReorderAfter", "cyclops.query.ops.Sequential", "cyclops.query.ops.Substring", "cyclops.query.ops.Trim", "cyclops.query.ops.Union", "cyclops.report.report", "cyclops.report.report.ModelCardReport", "cyclops.tasks.cxr_classification", "cyclops.tasks.cxr_classification.CXRClassificationTask", "cyclops.tasks.mortality_prediction", "cyclops.tasks.mortality_prediction.MortalityPredictionTask", "cyclops.data", "cyclops.evaluate", "cyclops.monitor", "cyclops.query", "cyclops.report", "cyclops.tasks", "Tutorials", "eICU-CRD query API tutorial", "GEMINI query API tutorial", "Heart Failure Prediction", "MIMIC-III query API tutorial", "MIMIC-IV query API tutorial", "Chest X-Ray Disease Classification", "NIHCXR Clinical Drift Experiments Tutorial", "OMOP query API tutorial", "Prolonged Length of Stay Prediction", "monitor API", "query API", "Example use cases"], "terms": {"cyclop": [0, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201], "queri": [0, 2, 3, 190, 202], "interfac": [0, 121, 123, 125, 130, 132, 134, 179], "queryinterfac": [0, 121, 123, 125, 128, 130, 132, 134], "clear_data": [0, 127, 128], "data": [0, 2, 3, 24, 26, 27, 49, 50, 52, 54, 69, 72, 89, 95, 112, 114, 115, 116, 117, 118, 119, 125, 127, 128, 130, 132, 170, 179, 181, 183, 190, 195, 196, 197, 198, 200], "run": [0, 1, 3, 121, 127, 128, 190, 191, 192, 193, 194, 198, 199, 201], "save": [0, 127, 128, 179, 183, 193, 199], "queryinterfaceprocess": [0, 121, 123, 125, 130, 132, 134], "op": [0, 121, 123, 125, 127, 128, 130, 132, 134, 190, 191, 192, 194, 198, 199, 201], "addcolumn": [0, 199], "__call__": [0, 5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "adddeltacolumn": [0, 195], "adddeltaconst": 0, "addnumer": 0, "And": [0, 195], "appli": [0, 1, 8, 25, 29, 59, 62, 63, 66, 67, 68, 75, 76, 93, 104, 109, 110, 112, 121, 123, 125, 128, 130, 132, 134, 136, 137, 138, 139, 176, 181, 183, 193, 199], "cast": [0, 5, 121, 123, 125, 130, 132, 134, 193, 195, 199], "conditionafterd": [0, 192, 195, 198], "conditionbefored": [0, 192], "conditionendswith": 0, "conditionequ": [0, 191, 192, 194, 195, 199], "conditiongreaterthan": [0, 199], "conditionin": [0, 140, 167, 199], "conditioninmonth": 0, "conditioninyear": [0, 195], "conditionlessthan": [0, 194, 199], "conditionlik": [0, 140, 167, 195], "conditionregexmatch": [0, 190, 201], "conditionstartswith": 0, "conditionsubstr": [0, 191, 192, 194, 195, 198], "distinct": [0, 192], "drop": [0, 174, 190, 193, 202], "dropnul": 0, "extracttimestampcompon": [0, 199], "fillnul": 0, "groupbyaggreg": [0, 192, 199], "join": [0, 125, 127, 128, 130, 132, 134, 163, 191, 192, 193, 194, 195, 196, 198, 199], "joinarg": [0, 125, 127, 128, 130, 132, 134, 191, 192, 194, 195, 198], "keep": [0, 7, 17, 21, 127, 128, 162, 163, 190, 199, 201], "limit": [0, 21, 127, 128, 170, 190, 193, 194, 195, 196, 198, 199, 201], "liter": [0, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 69, 78, 79, 80, 81, 82, 83, 84, 85, 90, 95, 97, 98, 99, 100, 103, 104, 105, 110, 127, 128, 179], "Or": 0, "orderbi": [0, 192], "queryop": [0, 127, 128, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177], "randomizeord": 0, "renam": [0, 193, 196, 199], "reorder": [0, 173], "reorderaft": 0, "sequenti": [0, 121, 123, 125, 127, 128, 130, 132, 134, 191, 192, 194, 195, 198, 199], "__add__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 174], "__init__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 121, 123, 125, 130, 132, 134, 174, 181, 183], "append": [0, 174, 196, 199], "extend": [0, 174, 199], "insert": [0, 174], "pop": [0, 75, 174, 193, 199], "substr": [0, 12, 155, 190, 201], "trim": 0, "union": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 121, 123, 125, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 179, 181, 183], "base": [0, 3, 5, 7, 17, 19, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 190, 193, 201, 202], "datasetqueri": [0, 123, 125, 130, 132, 134, 199], "db": [0, 121, 192, 195], "get_interfac": [0, 121, 123, 125, 130, 132, 134, 192, 198], "get_tabl": [0, 121, 123, 125, 130, 132, 134], "list_column": [0, 121, 123, 125, 130, 132, 134], "list_custom_t": [0, 121, 123, 125, 130, 132, 134, 194], "list_schema": [0, 121, 123, 125, 130, 132, 134, 195, 198], "list_tabl": [0, 121, 123, 125, 130, 132, 134, 191, 192, 198], "dataset": [0, 3, 6, 7, 16, 17, 19, 21, 26, 38, 39, 51, 52, 58, 61, 68, 69, 80, 81, 83, 88, 89, 90, 94, 95, 98, 99, 103, 104, 112, 114, 121, 123, 125, 130, 132, 134, 179, 181, 183, 184, 190, 200, 201, 202], "mimiciii": [0, 194, 198], "mimiciiiqueri": [0, 190, 198, 201], "chartev": [0, 130, 132, 194, 195], "diagnos": [0, 125, 130, 132, 190, 201], "labev": [0, 130, 132, 194], "mimiciv": [0, 195], "mimicivqueri": [0, 190, 201], "care_unit": [0, 125, 132], "patient": [0, 125, 132, 190, 193, 196, 197, 199, 201, 202], "eicu": [0, 3, 190, 201], "eicuqueri": [0, 190, 201], "omop": [0, 190, 201], "omopqueri": [0, 190, 201], "map_concept_ids_to_nam": [0, 134, 198], "measur": [0, 134, 190, 201], "observ": [0, 62, 134, 193, 196, 198, 199, 202], "person": [0, 134, 198], "visit_detail": [0, 134, 198], "visit_occurr": [0, 134, 198], "gemini": [0, 121, 123, 130, 132, 134, 190, 201], "geminiqueri": [0, 190, 201], "imag": [0, 4, 5, 17, 21, 118, 125, 179, 181, 184, 190, 192, 196], "ip_admin": [0, 125], "room_transf": [0, 125, 192], "slicer": [0, 193, 196, 197, 199], "compound_filt": 0, "filter_datetim": 0, "filter_non_nul": 0, "filter_rang": 0, "filter_string_contain": 0, "filter_valu": [0, 196], "is_datetim": 0, "overal": [0, 21, 179, 193, 196, 199], "slicespec": [0, 17, 112, 181, 193, 196, 197, 199], "spec_list": [0, 7, 193, 196, 197, 199], "valid": [0, 7, 9, 17, 179, 181, 183, 193], "column_nam": [0, 7, 9, 10, 11, 12, 13, 196], "_registri": [0, 7], "add_slice_spec": [0, 7], "get_slic": [0, 7], "slice": [0, 3, 7, 8, 17, 21, 174, 179, 181, 183, 193, 196, 199], "featur": [0, 7, 9, 10, 11, 12, 13, 15, 17, 112, 116, 117, 179, 181, 183, 190, 196, 197, 202], "medical_imag": 0, "medicalimag": 0, "cast_storag": [0, 5], "decode_exampl": [0, 5], "embed_storag": [0, 5], "encode_exampl": [0, 5], "flatten": [0, 5, 193, 199], "task": [0, 2, 3, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 53, 54, 58, 60, 61, 62, 63, 66, 67, 68, 69, 78, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 110, 190, 196, 202], "cxr_classif": 0, "cxrclassificationtask": 0, "add_model": [0, 181, 183], "data_typ": [0, 181, 183], "evalu": [0, 2, 3, 179, 181, 183, 190, 196, 201, 202], "get_model": [0, 181, 183], "list_model": [0, 181, 183, 193, 199], "models_count": [0, 181, 183], "predict": [0, 3, 17, 19, 21, 24, 26, 27, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 67, 80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 181, 182, 183, 190], "task_typ": [0, 181, 183, 193, 196, 199], "mortality_predict": [0, 193, 199], "mortalitypredictiontask": [0, 193, 199], "list_models_param": [0, 183, 193, 199], "load_model": [0, 183], "save_model": [0, 183], "train": [0, 3, 17, 179, 181, 183, 190, 196, 200, 202], "metric": [0, 17, 19, 21, 179, 181, 183, 190, 193, 199, 202], "__mul__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "add_stat": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "clone": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "comput": [0, 17, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 127, 128, 181, 183, 190, 202], "reset_st": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "update_st": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "metriccollect": [0, 17, 21, 181, 183, 193, 199], "add_metr": [0, 75], "clear": [0, 75, 127, 128], "get": [0, 2, 75, 121, 123, 125, 127, 128, 130, 132, 134, 156, 175, 181, 183, 190, 193, 199, 201, 202], "item": [0, 75, 193, 196, 197, 199], "kei": [0, 7, 17, 21, 75, 161, 171, 174, 179, 193, 196, 197, 199], "popitem": [0, 75], "setdefault": [0, 75], "updat": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 128, 191, 193, 194, 195, 196, 197, 198, 199], "valu": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 139, 146, 147, 148, 151, 158, 160, 161, 162, 163, 166, 179, 190, 196, 197, 199, 202], "operatormetr": 0, "factori": [0, 7, 127, 128, 196], "create_metr": [0, 193, 196, 199], "accuraci": [0, 193, 199], "binaryaccuraci": [0, 193, 199], "multiclassaccuraci": 0, "multilabelaccuraci": 0, "auroc": [0, 190, 193, 199, 202], "binaryauroc": [0, 29, 193, 199], "multiclassauroc": [0, 29], "multilabelauroc": [0, 29, 196], "precision_recal": 0, "binaryprecis": [0, 193, 199], "binaryrecal": [0, 97, 193, 199], "multiclassprecis": 0, "multiclassrecal": [0, 98], "multilabelprecis": 0, "multilabelrecal": [0, 99], "precis": [0, 24, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 64, 66, 77, 78, 80, 82, 85, 86, 87, 88, 89, 90, 92, 100, 105, 193, 199], "recal": [0, 24, 38, 51, 55, 57, 59, 61, 64, 66, 77, 79, 81, 83, 86, 87, 88, 89, 90, 92, 97, 98, 99, 105, 193, 199], "precision_recall_curv": [0, 193, 199], "binaryprecisionrecallcurv": [0, 30, 92, 193, 199], "multiclassprecisionrecallcurv": [0, 31, 93], "multilabelprecisionrecallcurv": [0, 32, 94], "precisionrecallcurv": 0, "roc": [0, 28, 29, 30, 31, 32, 45, 193, 199], "binaryroccurv": [0, 193, 199], "multiclassroccurv": 0, "multilabelroccurv": 0, "roccurv": 0, "sensit": [0, 179, 190, 193, 196, 199, 200], "binarysensit": 0, "multiclasssensit": 0, "multilabelsensit": 0, "specif": [0, 7, 17, 115, 118, 181, 183, 193, 196, 199], "binaryspecif": 0, "multiclassspecif": 0, "multilabelspecif": 0, "f_beta": 0, "binaryf1scor": [0, 193, 199], "binaryfbetascor": [0, 34], "f1score": 0, "fbetascor": [0, 36], "multiclassf1scor": 0, "multiclassfbetascor": [0, 38], "multilabelf1scor": 0, "multilabelfbetascor": [0, 40], "stat_scor": 0, "binarystatscor": [0, 25, 35, 78, 79, 102], "multiclassstatscor": [0, 26, 39, 80, 81, 103], "multilabelstatscor": [0, 27, 41, 82, 83, 104], "statscor": 0, "function": [0, 3, 5, 6, 7, 8, 16, 17, 20, 21, 25, 35, 41, 42, 76, 93, 102, 104, 107, 109, 110, 113, 121, 123, 125, 128, 130, 132, 134, 136, 137, 138, 139, 141, 161, 169, 176, 179, 191, 192, 193, 194, 195, 196, 198, 199, 201], "binary_precis": 0, "binary_recal": 0, "multiclass_precis": 0, "multiclass_recal": 0, "multilabel_precis": 0, "multilabel_recal": 0, "binary_roc_curv": 0, "multiclass_roc_curv": 0, "multilabel_roc_curv": 0, "roc_curv": [0, 193, 199], "binary_f1_scor": 0, "binary_fbeta_scor": 0, "f1_score": [0, 193, 199], "fbeta_scor": 0, "multiclass_f1_scor": 0, "multiclass_fbeta_scor": 0, "multilabel_f1_scor": 0, "multilabel_fbeta_scor": 0, "fair": [0, 17, 179, 181, 183, 193, 196, 199], "evaluate_fair": [0, 196], "warn_too_many_unique_valu": 0, "config": [0, 183, 191, 194, 195, 198], "fairnessconfig": [0, 17, 181, 183, 193, 199], "monitor": [0, 2, 3, 190, 193, 196, 197, 199], "clinical_appl": 0, "clinicalshiftappl": [0, 197], "ag": [0, 112, 190, 197, 202], "apply_shift": [0, 112, 114, 197], "custom": [0, 112, 121, 123, 125, 128, 130, 132, 134, 179, 194, 196, 197], "hospital_typ": [0, 112], "month": [0, 7, 9, 112, 149, 159, 193, 196, 199], "sex": [0, 112, 190, 197, 199, 202], "time": [0, 7, 75, 112, 159, 179, 190, 200, 202], "synthetic_appl": 0, "binary_noise_shift": 0, "feature_association_shift": 0, "feature_swap_shift": 0, "gaussian_noise_shift": 0, "knockout_shift": 0, "syntheticshiftappl": [0, 113], "report": [0, 2, 3, 110, 125, 190, 196, 201, 202], "modelcardreport": [0, 193, 196, 199], "export": [0, 179, 193, 196, 199], "from_json_fil": [0, 179], "log_cit": [0, 179, 196], "log_dataset": [0, 179, 193], "log_descriptor": [0, 179, 193, 196, 199], "log_fairness_assess": [0, 179, 193, 196, 199], "log_from_dict": [0, 179, 193, 196, 199], "log_imag": [0, 179], "log_licens": [0, 179, 193, 199], "log_model_paramet": [0, 179, 193, 199], "log_own": [0, 179, 193, 196, 199], "log_performance_metr": [0, 179, 193, 199], "log_plotly_figur": [0, 179, 193, 196, 199], "log_quantitative_analysi": [0, 179, 193, 196, 199], "log_refer": [0, 179, 193, 199], "log_regul": [0, 179], "log_risk": [0, 179, 193, 196, 199], "log_use_cas": [0, 179, 193, 196, 199], "log_us": [0, 179, 193, 196, 199], "log_vers": [0, 179, 193, 199], "thank": 1, "your": [1, 193], "interest": [1, 193, 199], "To": [1, 3, 5, 193, 199], "submit": 1, "pr": 1, "pleas": [1, 193, 196, 197, 199], "fill": [1, 160], "out": [1, 179, 193, 199], "templat": [1, 179], "along": [1, 112, 193, 196, 199], "If": [1, 5, 7, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 168, 176, 179, 181, 183, 193, 199], "fix": 1, "an": [1, 3, 5, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 51, 60, 61, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 125, 127, 128, 130, 132, 134, 137, 140, 162, 167, 171, 179, 193, 196, 199], "issu": [1, 21], "don": 1, "t": [1, 5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 179], "forget": 1, "link": [1, 179, 193, 196, 199], "onc": [1, 75, 193, 196, 199], "python": [1, 3, 199, 201], "virtual": [1, 3], "environ": [1, 3, 193, 199], "i": [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 127, 128, 132, 134, 136, 137, 138, 139, 141, 155, 158, 162, 163, 170, 179, 181, 183, 191, 193, 194, 195, 196, 198, 199, 201, 202], "setup": [1, 191, 192, 194, 195, 198, 199], "you": [1, 3, 5, 75, 193, 196, 199, 200, 201], "can": [1, 3, 5, 7, 21, 25, 38, 51, 69, 75, 84, 85, 95, 100, 110, 121, 123, 125, 128, 130, 132, 134, 141, 155, 179, 183, 193, 196, 199, 200], "us": [1, 2, 5, 7, 8, 17, 21, 24, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 63, 66, 67, 68, 69, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 102, 105, 107, 110, 112, 114, 121, 123, 125, 127, 128, 130, 132, 134, 137, 140, 156, 161, 162, 163, 167, 170, 177, 179, 181, 183, 190, 191, 193, 194, 196, 198, 199, 200, 201], "all": [1, 8, 9, 10, 11, 12, 13, 15, 63, 73, 75, 108, 109, 110, 155, 168, 171, 177, 183, 190, 192, 193, 197, 199, 201], "file": [1, 5, 127, 128, 179, 193, 196, 199], "For": [1, 21, 76, 134, 179, 193, 199], "style": [1, 162], "we": [1, 3, 179, 193, 196, 198, 199], "recommend": [1, 76], "googl": 1, "guid": 1, "black": 1, "format": [1, 5, 7, 89, 127, 128, 143, 144, 162, 163, 179, 193, 198, 199], "docstr": 1, "numpi": [1, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 181, 193, 196, 197, 199], "also": [1, 3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 141, 193, 199, 202], "flake8": 1, "pylint": [1, 141], "further": [1, 128], "static": 1, "analysi": [1, 179, 193, 196, 199], "The": [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 61, 63, 66, 68, 69, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 127, 128, 132, 137, 141, 164, 179, 181, 183, 187, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202], "show": [1, 191, 193, 194, 195, 196, 198, 199], "error": [1, 190, 202], "which": [1, 9, 10, 11, 12, 13, 21, 90, 121, 127, 128, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 179, 193, 196, 198, 199, 202], "need": [1, 17, 21, 175, 193, 199], "befor": [1, 17, 21, 22, 144, 162, 163, 183, 193, 199], "last": 1, "least": 1, "type": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 190, 195, 202], "hint": 1, "our": [1, 193, 199], "check": [1, 14, 89, 127, 128, 171], "mypi": 1, "current": [1, 142, 179, 193, 196, 199], "ar": [1, 5, 7, 11, 12, 17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 100, 103, 104, 105, 108, 109, 110, 112, 116, 121, 127, 128, 132, 141, 162, 179, 193, 196, 199], "strict": 1, "enforc": 1, "more": [1, 7, 16, 17, 181, 183, 193, 202], "api": [1, 2, 3, 121, 122, 123, 124, 125, 129, 130, 131, 132, 133, 134, 190, 193, 202], "becom": [1, 127, 128, 170], "stabl": [1, 193, 196, 197, 199], "start": [2, 17, 154, 175, 193, 199], "instal": [2, 193], "pip": [2, 193], "develop": [2, 193, 196, 199], "poetri": 2, "conda": 2, "contribut": 2, "notebook": [2, 191, 193, 194, 195, 196, 198, 199], "citat": [2, 179, 193, 196, 199], "pre": [2, 193, 199], "commit": 2, "hook": 2, "code": [2, 191, 193, 194, 195, 198, 199], "guidelin": [2, 3], "tutori": [2, 193, 196, 199, 200, 201, 202], "exampl": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 190, 193, 196, 199, 200, 201], "case": [2, 3, 75, 115, 179, 190, 193, 199, 200], "refer": [2, 3, 179, 193, 196, 199], "toolkit": 3, "facilit": 3, "research": 3, "deploy": 3, "ml": [3, 193, 199], "model": [3, 16, 17, 21, 179, 181, 183, 190, 198, 200, 202], "healthcar": 3, "It": [3, 38, 51, 75, 84, 85, 100, 105, 141, 200, 201], "provid": [3, 7, 9, 12, 17, 21, 69, 110, 121, 123, 125, 127, 128, 130, 132, 134, 141, 155, 160, 161, 168, 179, 187, 193, 198, 199], "few": 3, "high": [3, 193, 199], "level": [3, 21, 193, 199], "name": [3, 7, 8, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 121, 123, 125, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 167, 171, 172, 173, 175, 179, 181, 183, 193, 196, 197, 198, 199], "ehr": [3, 121, 187, 198, 201], "databas": [3, 121, 123, 125, 126, 127, 128, 130, 132, 134, 187, 191, 192, 193, 194, 195, 198, 199, 201], "mimic": [3, 129, 130, 131, 132, 190, 198, 201], "iv": [3, 131, 190, 201], "creat": [3, 6, 7, 21, 42, 43, 75, 84, 85, 100, 115, 118, 119, 121, 127, 128, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 176, 179, 181, 183, 190, 196, 201, 202], "infer": [3, 17, 132], "popular": [3, 193], "effici": 3, "load": [3, 17, 179, 183, 190, 198, 199, 200, 202], "differ": [3, 24, 29, 36, 37, 46, 55, 62, 63, 64, 69, 70, 72, 84, 85, 90, 95, 100, 105, 155, 162, 163, 190, 193, 196, 199, 200], "modal": 3, "common": [3, 193, 198], "implement": [3, 169, 202], "scikit": [3, 193], "learn": [3, 193, 196], "pytorch": 3, "canon": 3, "mortal": [3, 182, 183, 190, 201], "chest": [3, 180, 181, 190], "x": [3, 114, 115, 116, 117, 118, 119, 141, 180, 181, 183, 190, 193, 197, 199], "rai": [3, 180, 181, 190], "classif": [3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 78, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 180, 181, 183, 190, 193, 199], "clinic": [3, 111, 112, 190, 200], "detect": [3, 196, 200], "shift": [3, 111, 112, 114, 116, 117, 190, 200], "relev": [3, 179, 193, 199, 200], "card": [3, 179, 190, 193, 199, 202], "librari": [3, 190, 200, 202], "end": [3, 145, 174, 190, 193, 196, 199, 201], "iii": [3, 129, 130, 190, 198, 201], "crd": [3, 122, 190, 201], "python3": [3, 193, 196, 197, 199], "m": [3, 193, 194, 196, 197, 199], "pycyclop": [3, 193, 196, 197, 199], "packag": [3, 184, 185, 186, 188, 193, 196, 197, 199], "support": [3, 7, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 72, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 107, 108, 109, 122, 129, 131, 142, 200], "process": [3, 112, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 193, 196, 199], "transform": [3, 17, 66, 67, 68, 93, 181, 183, 193, 196, 197, 199], "downstream": [3, 121, 123, 125, 130, 132, 134, 193, 199], "addit": [3, 75, 125, 127, 128, 130, 132, 134, 179, 181, 183, 193, 199], "from": [3, 5, 7, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 119, 121, 123, 125, 127, 128, 130, 132, 134, 159, 162, 163, 171, 176, 179, 181, 183, 190, 191, 193, 194, 196, 197, 198, 199, 201], "other": [3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 136, 173, 174, 193], "thei": [3, 69], "extra": [3, 179], "multipl": [3, 8, 17, 21, 75, 125, 140, 141, 161, 167, 179], "could": [3, 193, 199], "combin": [3, 8, 136, 140, 167, 193, 196], "both": [3, 162], "set": [3, 7, 17, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 128, 132, 179, 190, 193, 196, 199, 201], "up": [3, 193, 196, 199], "henc": [3, 128], "make": [3, 155, 193, 199], "sure": [3, 193], "sourc": [3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 190, 200], "env": 3, "info": [3, 125, 191, 192, 193, 194, 195, 198, 199], "path": [3, 5, 112, 127, 128, 179, 183, 193, 196, 199], "bin": [3, 21], "activ": [3, 199], "build": [3, 112, 121, 201], "built": 3, "sphinx": 3, "local": 3, "cd": 3, "doc": 3, "html": [3, 179, 193, 196, 197, 199], "sphinxopt": 3, "d": [3, 75, 112, 196], "nbsphinx_allow_error": 3, "true": [3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 26, 27, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 121, 123, 125, 130, 132, 134, 136, 137, 152, 155, 168, 171, 177, 179, 181, 183, 191, 192, 193, 196, 197, 198, 199], "welcom": 3, "see": [3, 7, 179, 193, 196, 197, 199], "jupyt": [3, 193, 196, 197, 199], "insid": 3, "ipython": 3, "kernel": 3, "after": [3, 17, 121, 127, 128, 132, 141, 143, 173, 174, 190, 193, 199, 201], "ipykernel": 3, "user": [3, 179, 191, 192, 193, 194, 195, 198, 199], "name_of_kernel": 3, "now": 3, "navig": 3, "": [3, 7, 10, 14, 17, 21, 75, 134, 141, 160, 163, 179, 181, 183, 191, 192, 193, 194, 195, 196, 197, 198, 199], "tab": [3, 193], "cite": 3, "when": [3, 5, 17, 21, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 75, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105, 121, 155, 162, 163, 170, 181, 183, 193, 199], "project": 3, "paper": 3, "articl": 3, "krishnan2022": 3, "12": [3, 7, 191, 193, 195, 196, 197, 199], "02": [3, 69, 197], "22283021": 3, "author": [3, 193, 196], "krishnan": 3, "amrit": 3, "subasri": 3, "vallijah": 3, "mckeen": 3, "kaden": 3, "kore": 3, "ali": 3, "ogidi": 3, "franklin": 3, "alinoori": 3, "mahshid": 3, "lalani": 3, "nadim": 3, "dhalla": 3, "azra": 3, "verma": 3, "amol": 3, "razak": 3, "fahad": 3, "pandya": 3, "deval": 3, "dolatabadi": 3, "elham": 3, "titl": [3, 190, 193, 196, 199, 201], "cyclic": 3, "toward": 3, "operation": 3, "health": [3, 193, 199], "eloc": 3, "id": [3, 5, 112, 134, 193, 196, 199], "2022": [3, 7, 196, 198], "year": [3, 7, 9, 132, 149, 150, 159, 190, 193, 196, 198, 199, 201], "doi": 3, "10": [3, 165, 190, 193, 196, 197, 199, 201], "1101": 3, "publish": [3, 193], "cold": 3, "spring": 3, "harbor": 3, "laboratori": [3, 199], "press": 3, "url": [3, 196], "http": [3, 179, 193, 196, 197, 199], "www": [3, 193], "medrxiv": 3, "org": [3, 179, 193, 196, 199], "content": [3, 179], "earli": 3, "08": [3, 195], "journal": 3, "medic": [4, 5, 184, 190, 196, 198, 199, 201, 202], "class": [4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 193, 195, 196, 199], "decod": [5, 196], "none": [5, 7, 9, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 168, 175, 176, 179, 181, 183, 193, 196, 197, 199], "reader": 5, "itkread": 5, "suffix": 5, "jpg": 5, "read": [5, 17], "paramet": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 191, 193, 194, 195, 196, 198, 199], "bool": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 75, 76, 108, 109, 110, 112, 116, 117, 121, 123, 125, 130, 132, 134, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 167, 168, 171, 177, 179, 181, 183, 196], "option": [5, 7, 9, 10, 11, 12, 13, 17, 21, 24, 27, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 69, 75, 80, 81, 82, 83, 84, 85, 90, 95, 98, 99, 100, 103, 104, 105, 108, 112, 114, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 162, 163, 177, 179, 181, 183], "default": [5, 7, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 154, 179, 181, 183, 193, 199], "whether": [5, 7, 21, 75, 108, 109, 110, 112, 121, 123, 125, 130, 132, 134, 155, 168, 171, 177, 179, 199, 202], "fals": [5, 7, 9, 10, 11, 12, 13, 14, 19, 21, 29, 30, 40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105, 107, 108, 109, 110, 117, 118, 136, 137, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 167, 168, 177, 181, 183, 192, 193, 196, 199], "return": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 190, 191, 192, 194, 196, 198, 199, 201], "dictionari": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 75, 127, 128, 161, 179, 181, 183, 193, 199], "image_path": 5, "byte": 5, "image_byt": 5, "str": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 171, 172, 173, 174, 175, 176, 179, 181, 183, 193, 195, 199], "imageread": 5, "monai": [5, 196, 197], "method": [5, 7, 19, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 193, 194, 196, 199], "attribut": [5, 7, 19, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 128, 163, 181, 183, 193, 199], "call": [5, 169, 179], "self": [5, 121], "storag": 5, "arrow": 5, "arrai": [5, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 63, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 119, 181, 196], "convert": [5, 25, 35, 41, 48, 61, 69, 95, 102, 104, 107, 142, 162, 163, 193, 199], "pyarrow": 5, "rtype": 5, "structarrai": 5, "pa": 5, "string": [5, 7, 9, 12, 17, 21, 75, 145, 154, 161, 162, 163, 166, 175, 176, 179, 190, 196, 201], "must": [5, 9, 17, 21, 142, 148, 149, 150, 155, 161, 179], "contain": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 27, 103, 104, 127, 128, 179, 190, 193, 196, 199, 201, 202], "binari": [5, 24, 25, 29, 30, 34, 35, 36, 37, 47, 48, 49, 50, 56, 57, 60, 61, 62, 63, 66, 69, 72, 78, 79, 84, 85, 87, 90, 92, 95, 97, 100, 102, 104, 105, 107, 110, 115, 183, 193, 196, 199, 202], "struct": 5, "order": [5, 17, 107, 108, 109, 127, 128, 168, 170, 172, 173], "doesn": 5, "matter": 5, "list": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 121, 123, 125, 130, 132, 134, 136, 137, 138, 139, 141, 142, 148, 149, 150, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 172, 173, 174, 176, 179, 181, 183, 191, 192, 193, 194, 195, 198, 199], "arg": [5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 169, 170, 174], "stringarrai": 5, "listarrai": 5, "token_per_repo_id": 5, "serial": 5, "version": [5, 179, 193, 196, 199], "dict": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 75, 121, 123, 125, 127, 128, 130, 132, 134, 161, 171, 179, 181, 183], "access": 5, "privat": [5, 127, 128], "repositori": [5, 193], "hub": 5, "pass": [5, 17, 43, 75, 112, 127, 128, 179, 183, 191, 193, 194, 195, 198, 199], "repo_id": 5, "token": [5, 193], "deseri": 5, "np": [5, 11, 14, 21, 181, 183, 193, 196, 197, 199], "ndarrai": [5, 14, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 181, 183], "metadata": [5, 193, 196, 198, 199], "emb": 5, "encod": 5, "input": [5, 24, 46, 55, 60, 61, 64, 69, 70, 72, 87, 89, 95, 115, 118, 141, 181, 183], "state": [5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "itself": 5, "otherwis": [5, 14, 24, 27, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110, 136, 137, 138, 139, 176], "tupl": [5, 7, 66, 67, 68, 69, 75, 87, 88, 89, 92, 93, 94, 112, 162, 163, 181, 183], "classlabel": [5, 193, 199], "translat": 5, "translationvariablelanguag": 5, "sequenc": [5, 17, 75, 161, 174, 181, 183, 196], "array2d": 5, "array3d": 5, "array4d": 5, "array5d": 5, "audio": 5, "subset": [6, 190, 201], "hug": [6, 181, 183, 190, 202], "face": [6, 181, 183, 190, 202], "object": [7, 19, 21, 112, 114, 121, 123, 125, 126, 127, 128, 130, 132, 134, 137, 138, 141, 143, 144, 161, 163, 169, 174, 179, 181, 183, 193, 199, 201], "ani": [7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 121, 123, 125, 127, 128, 130, 132, 134, 137, 145, 146, 147, 148, 151, 154, 155, 160, 166, 179, 181, 183, 193, 196, 199], "A": [7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 25, 75, 76, 104, 109, 121, 123, 125, 126, 128, 130, 132, 134, 138, 143, 144, 162, 163, 179, 193, 196, 199], "each": [7, 8, 17, 21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 69, 75, 76, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110, 134, 141, 168, 190, 191, 193, 194, 195, 198, 199, 201], "map": [7, 8, 22, 43, 75, 121, 123, 125, 130, 132, 134, 171, 181, 183, 193, 196, 197, 199], "column": [7, 8, 9, 10, 11, 12, 13, 17, 21, 112, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 168, 171, 172, 173, 175, 176, 181, 183, 193, 196, 197, 199], "one": [7, 16, 17, 21, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 69, 76, 80, 81, 82, 83, 84, 85, 95, 98, 99, 100, 105, 155, 181, 183, 190, 201], "follow": [7, 17, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105, 173, 179, 193, 196, 198, 199], "exact": [7, 13], "select": [7, 112, 116, 121, 123, 125, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 193, 195, 196, 199], "thi": [7, 17, 21, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105, 121, 128, 139, 155, 161, 162, 179, 183, 191, 193, 194, 195, 196, 198, 199, 202], "singl": [7, 75, 141, 179, 183, 193, 199], "row": [7, 127, 128, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 165, 168, 170, 190, 192, 193, 194, 195, 196, 198, 201], "where": [7, 8, 9, 10, 11, 12, 13, 60, 61, 63, 75, 127, 128, 175, 179, 183, 193, 199, 202], "e": [7, 9, 10, 17, 21, 75, 116, 117, 118, 121, 159, 162, 163, 166, 179, 193, 199], "g": [7, 9, 17, 21, 116, 117, 118, 159, 162, 163, 166, 179, 193, 199], "2021": [7, 190, 193, 198, 201], "01": [7, 29, 31, 32, 143, 144, 192, 193, 194, 195, 196, 197, 198, 199], "00": [7, 193, 196, 197, 199], "min_valu": [7, 11, 193, 196, 197, 199], "minimum": [7, 11], "specifi": [7, 17, 75, 112, 121, 123, 125, 130, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 162, 164, 173, 176, 179, 181, 183, 193, 196, 199], "min_inclus": [7, 11, 193, 199], "indic": [7, 21, 27, 60, 61, 115, 118, 193, 199], "includ": [7, 11, 21, 72, 112, 114, 147, 151, 193, 196, 199, 200], "rang": [7, 11, 29, 30, 66, 67, 68, 93, 193, 196, 199], "work": [7, 27, 103, 104, 136, 179, 193, 196, 199], "numer": [7, 11, 139, 193, 199], "datetim": [7, 9, 11, 14, 121, 123, 125, 130, 132, 134, 138, 143, 144, 179, 193, 196, 199], "inf": [7, 11, 193, 196, 199], "max_valu": [7, 11, 193, 196, 197, 199], "boolean": [7, 8, 9, 10, 11, 12, 13, 15, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "greater": [7, 22, 147, 151, 199], "than": [7, 11, 22, 48, 52, 54, 136, 137, 147, 151, 181, 183, 190, 193, 199, 201, 202], "equal": [7, 11, 21, 146, 147, 151], "maximum": [7, 11, 22, 29, 30], "max_inclus": [7, 11, 193, 199], "less": [7, 11, 48, 52, 54, 151, 190, 199, 201], "match": [7, 9, 12, 13, 17, 153, 198], "between": [7, 21, 38, 51, 69, 95, 190, 201], "1": [7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 117, 118, 119, 138, 139, 141, 143, 144, 146, 147, 148, 149, 151, 160, 166, 179, 190, 193, 196, 199, 200, 201, 202], "dai": [7, 9, 138, 199, 202], "31": [7, 190, 193, 197, 199, 201], "hour": [7, 9], "0": [7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 131, 160, 175, 179, 191, 192, 193, 194, 195, 196, 197, 198, 199], "23": [7, 193, 197, 199], "negat": [7, 9, 10, 11, 12, 13, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 196], "flag": [7, 162, 163], "doe": [7, 9, 11, 12, 13, 17, 21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 179], "keep_nul": [7, 9, 11, 12, 13], "null": [7, 9, 10, 11, 12, 13, 158, 160, 199], "conjunct": [7, 196], "its": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 60, 61, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 193, 196, 199], "own": [7, 193, 199], "callabl": [7, 8, 17, 21, 76, 121, 123, 125, 128, 130, 132, 134, 141, 179], "import": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 179, 190, 200, 201, 202], "slice_spec": [7, 17, 181, 183, 193, 196, 199], "feature_1": 7, "feature_2": 7, "feature_3": 7, "value_1": 7, "value_2": 7, "2020": [7, 9, 143, 144, 150, 190, 196, 201], "5": [7, 24, 25, 27, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 115, 118, 119, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201], "60": [7, 196], "6": [7, 24, 26, 35, 36, 38, 39, 49, 56, 59, 62, 63, 78, 79, 80, 81, 83, 84, 85, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 104, 107, 108, 110, 190, 193, 196, 197, 198, 199, 201], "7": [7, 29, 30, 31, 36, 39, 40, 69, 80, 81, 82, 84, 85, 87, 88, 89, 93, 98, 100, 105, 108, 109, 110, 190, 192, 193, 196, 198, 199, 201, 202], "8": [7, 24, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 40, 41, 47, 49, 50, 53, 54, 56, 59, 60, 62, 66, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 105, 107, 109, 110, 190, 193, 196, 198, 199, 201], "2000": 7, "2010": [7, 190, 201], "slice_nam": [7, 179, 193, 196, 199], "slice_func": 7, "print": [7, 191, 192, 193, 194, 195, 196, 198, 199], "do": [7, 17], "someth": 7, "here": [7, 193, 199], "filter": [7, 9, 10, 11, 12, 13, 17, 21, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 167, 190, 193, 196, 197, 199, 201], "add": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 136, 137, 138, 139, 166, 174, 179, 181, 183, 193, 196, 199], "detail": [7, 127, 128, 193, 196, 199], "registri": [7, 193, 199], "gener": [7, 69, 95, 112, 179, 190, 196, 198, 200, 202], "slice_funct": 8, "result": [8, 17, 38, 51, 127, 128, 174, 181, 183, 191, 193, 194, 195, 196, 197, 198, 199], "bitwis": 8, "AND": 8, "signatur": 8, "should": [8, 21, 69, 76, 95, 117, 127, 128, 179, 181, 183, 193, 196, 199], "kwarg": [8, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 121, 123, 125, 130, 132, 134, 169, 170, 181, 183], "given": [9, 11, 12, 13, 14, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 75, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110, 132, 160, 174, 179, 181, 183], "int": [9, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 116, 117, 118, 119, 127, 128, 139, 142, 149, 150, 162, 163, 165, 174, 175, 179, 181, 183, 193, 199], "compon": [9, 159], "have": [9, 12, 13, 17, 114, 121, 123, 125, 130, 132, 134, 148, 155, 162, 163, 190, 193, 201, 202], "nan": [9, 10, 190, 202], "nat": 9, "rais": [9, 11, 12, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 179, 181, 183], "typeerror": [9, 11, 12, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 179], "float": [11, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 115, 116, 117, 118, 119, 139, 142, 179], "valueerror": [11, 17, 21, 48, 50, 52, 54, 58, 59, 60, 61, 62, 63, 69, 179, 181, 183], "either": [11, 30, 31, 32, 75, 87, 88, 89, 92, 93, 94, 110, 179, 193, 199], "ha": [13, 75, 175, 179, 193, 196, 199], "find": [13, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 196], "perform": [13, 26, 27, 31, 32, 121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 179, 190, 198, 200, 202], "datetime64": 14, "target_column": [17, 19, 21, 193, 196, 199], "feature_column": [17, 196], "prediction_column_prefix": [17, 181, 183, 193, 196, 199], "remove_column": [17, 19, 21, 181, 183, 196], "split": [17, 112, 179, 181, 183, 193, 196, 199], "batch_siz": [17, 19, 21, 112, 181, 183, 193, 196, 199], "1000": [17, 19, 21, 112, 183, 193], "fairness_config": [17, 181, 183, 193, 199], "override_fairness_metr": [17, 181, 183, 193, 199], "load_dataset_kwarg": 17, "datasetdict": [17, 181, 183], "load_dataset": 17, "argument": [17, 21, 43, 75, 125, 127, 128, 130, 132, 134, 137, 145, 146, 147, 148, 151, 154, 155, 163, 181, 183, 193, 199], "target": [17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 116, 117, 181, 183, 190, 193, 199, 200, 202], "prefix": [17, 75], "ad": [17, 114, 136, 137, 138, 139, 174, 179, 181, 183, 193, 199], "model_nam": [17, 181, 183, 193, 197, 199], "remov": [17, 21, 75, 119, 158, 181, 183, 193, 196, 199], "mai": [17, 21, 190, 193, 196, 199, 201], "expens": [17, 21, 162], "memori": [17, 21], "wrappedmodel": [17, 181, 183], "entir": [17, 193, 199], "being": [17, 128, 136, 137, 138, 139, 143, 144, 146, 149, 150], "note": [17, 121, 127, 128, 132, 179, 191, 193, 196, 198, 199], "chosen": 17, "avail": [17, 179, 193, 199, 202], "first": [17, 21, 25, 76, 104, 177, 191, 193, 194, 195, 198, 199], "test": [17, 179, 181, 183, 190, 193, 199, 200, 201, 202], "eval": [17, 196], "val": 17, "dev": 17, "batch": [17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 181, 183, 190, 196, 201], "size": [17, 21, 112, 181, 183, 193, 196, 199], "neg": [17, 35, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 63, 72, 81, 83, 85, 98, 99, 100, 105, 107, 108, 109, 136, 137, 199], "integ": [17, 21, 166, 179], "configur": [17, 18, 19, 121, 123, 125, 130, 132, 134, 181, 183, 193, 199], "overridden": [17, 181, 183], "prediction_column": [17, 19, 21, 196], "keyword": [17, 21, 43, 75, 145, 146, 147, 148, 151, 154, 155, 177, 183, 190, 201], "onli": [17, 21, 24, 27, 29, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 62, 63, 75, 80, 81, 82, 84, 85, 98, 100, 103, 104, 105, 108, 109, 110, 155, 162, 163, 164, 190, 201], "found": [17, 75, 179, 193, 196, 197, 199], "group": [19, 21, 22, 75, 161, 179, 193, 196, 199], "group_valu": [19, 21], "group_bin": [19, 21, 193, 196, 199], "group_base_valu": [19, 21, 193, 196, 199], "threshold": [19, 21, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 102, 104, 105, 107, 109, 110, 179, 190, 193, 199, 202], "compute_optimal_threshold": [19, 21], "metric_nam": [19, 21, 43, 179, 193, 196, 199], "metric_kwarg": [19, 21], "take": [21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 112, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 190, 193, 201], "allow": [21, 22, 121, 123, 125, 130, 132, 134, 193, 199, 200, 201], "intersect": 21, "treat": 21, "multilabel": [21, 24, 27, 29, 32, 36, 37, 40, 41, 49, 50, 53, 54, 60, 61, 62, 63, 68, 69, 72, 82, 83, 84, 85, 89, 90, 94, 95, 99, 100, 104, 105, 109, 110, 190, 202], "same": [21, 75, 116, 161, 162, 163], "uniqu": [21, 22, 29, 30, 31, 32, 66, 67, 68, 69, 87, 88, 89, 92, 93, 94, 95, 196, 202], "number": [21, 22, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 103, 104, 105, 108, 110, 112, 116, 117, 127, 128, 165, 173, 179, 181, 183, 190, 195, 199, 200, 201], "continu": [21, 193, 196, 199], "veri": 21, "slow": [21, 170], "larg": [21, 170], "denomin": 21, "pariti": [21, 190, 202], "across": [21, 116, 200], "linspac": 21, "monoton": [21, 69, 95], "control": [21, 115], "usag": [21, 193, 199], "rel": 21, "small": 21, "32": [21, 193, 196, 199], "avoid": 21, "optim": [21, 193], "oper": [21, 65, 76, 121, 123, 125, 127, 128, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "necessari": 21, "nest": 21, "second": [21, 76], "third": 21, "omit": 21, "requir": [21, 24, 29, 36, 37, 49, 50, 69, 84, 85, 90, 95, 100, 105, 110, 179, 181, 183, 193, 199], "huggingfac": [21, 112, 181, 183], "runtimeerror": 21, "empti": [21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "encount": [21, 125, 132, 190, 198, 199, 201], "unique_valu": 22, "max_unique_valu": 22, "50": [22, 193, 196, 197, 199], "warn": [22, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 102, 103, 104, 105], "score": [24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 70, 72, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110], "multiclass": [24, 26, 29, 31, 36, 37, 38, 39, 49, 50, 51, 52, 58, 59, 62, 63, 67, 69, 72, 80, 81, 84, 85, 88, 90, 93, 95, 98, 100, 103, 105, 108, 110], "One": [24, 29, 31, 32, 35, 48, 59, 62, 63, 69, 95, 196, 199], "pos_label": [24, 25, 30, 34, 35, 36, 37, 47, 48, 49, 50, 56, 57, 62, 63, 66, 69, 78, 79, 84, 85, 87, 90, 92, 95, 97, 100, 102, 105, 107, 110], "label": [24, 25, 27, 29, 32, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 92, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 116, 117, 119, 136, 137, 138, 139, 159, 161, 166, 176, 181, 183, 190, 193, 194, 195, 196, 202], "consid": [24, 26, 27, 36, 37, 49, 50, 62, 63, 84, 85, 90, 95, 100, 103, 104, 105, 134], "posit": [24, 25, 29, 30, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 92, 95, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 196], "num_class": [24, 26, 29, 31, 36, 37, 38, 39, 49, 50, 51, 52, 58, 59, 61, 62, 63, 67, 69, 80, 81, 84, 85, 88, 90, 93, 95, 98, 100, 103, 105, 108, 110, 193, 199], "decid": [24, 36, 37, 40, 41, 49, 50, 53, 54, 56, 57, 60, 61, 78, 79, 82, 83, 84, 85, 97, 99, 100, 105], "top_k": [24, 26, 27, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110], "probabl": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 80, 81, 82, 84, 85, 93, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 183, 193, 199], "logit": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 72, 80, 81, 82, 84, 85, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110], "top": [24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110], "k": [24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 75, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110, 197], "num_label": [24, 27, 29, 32, 36, 37, 40, 41, 49, 50, 53, 54, 60, 61, 62, 63, 68, 69, 82, 83, 84, 85, 89, 90, 94, 95, 99, 100, 104, 105, 109, 110, 196], "averag": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 193], "micro": [24, 26, 27, 29, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "macro": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "weight": [24, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 196, 197, 199], "calcul": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "global": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "unweight": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "mean": [24, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 193, 196, 197, 199], "imbal": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 119], "account": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 193, 196], "instanc": [24, 26, 27, 31, 32, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 193, 199], "alter": [24, 26, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105], "zero_divis": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 102, 103, 104, 105], "zero": [24, 25, 26, 27, 34, 36, 37, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "divis": [24, 25, 26, 27, 34, 36, 37, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "act": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "pred": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 193, 196, 199], "75": [24, 25, 29, 30, 66, 67, 68, 90, 92, 95, 103, 104, 105, 193, 197], "05": [24, 26, 27, 29, 31, 32, 36, 38, 39, 40, 49, 53, 62, 67, 68, 69, 80, 81, 84, 85, 88, 90, 93, 94, 95, 98, 100, 103, 104, 105, 108, 110, 192, 197, 199], "95": [24, 26, 27, 36, 38, 49, 62, 69, 88, 90, 93, 94, 95], "p": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 196], "zip": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "2": [24, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 131, 139, 141, 148, 149, 175, 179, 190, 192, 193, 196, 199, 200, 201], "3": [24, 26, 27, 29, 31, 34, 35, 36, 37, 38, 39, 40, 47, 49, 50, 51, 52, 53, 56, 58, 59, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 190, 192, 193, 196, 198, 199, 200, 201], "66666667": [24, 26, 36, 38, 49, 51, 61, 63, 81, 85, 87, 88, 90, 93, 94, 95, 98, 100, 104], "initi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 121, 123, 125, 127, 128, 130, 132, 134, 174, 193, 199], "two": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 162, 163, 174, 177], "scalar": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "togeth": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 190, 201], "multipli": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "variabl": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 202], "attributeerror": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "alreadi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 193, 199], "exist": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 136, 137, 138, 139, 171, 176, 179, 181, 183, 193, 196, 199], "copi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 193, 196, 199], "abstract": [24, 29, 36, 37, 73, 74, 84, 85, 90, 95, 100, 105, 110, 169], "final": [24, 29, 36, 37, 74, 84, 85, 90, 95, 100, 105, 110, 174, 196, 199], "reset": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "_update_count": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "_comput": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "sigmoid": [25, 35, 41, 66, 68, 69, 102, 104, 107, 109, 110], "them": [25, 104, 127, 128, 193, 196, 199, 200], "875": [25, 199], "problem": [26, 88, 108, 109, 110, 202], "highest": [26, 27, 62, 63, 103, 104], "determin": [26, 27, 29, 30, 31, 32, 66, 67, 68, 87, 88, 89, 90, 92, 93, 94], "dtype": [26, 27, 31, 32, 38, 39, 40, 41, 66, 67, 68, 69, 80, 81, 82, 83, 87, 88, 89, 92, 93, 94, 98, 99, 103, 104, 115, 116, 117, 118, 119, 193, 196, 198], "float64": [26, 27, 31, 32, 38, 39, 40, 41, 66, 67, 68, 69, 80, 81, 82, 83, 87, 88, 89, 92, 93, 94, 98, 99, 103, 104, 115, 116, 117, 118, 119, 196], "binar": [27, 29, 30, 31, 32, 34, 47, 67, 68, 93, 94, 109, 110], "output": [27, 69, 179, 193, 199], "classifi": [27, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 102, 193, 199], "correct": [27, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102, 103, 104], "per": [27, 75, 190, 196, 199, 201], "area": [28, 29, 30, 31, 32, 45], "under": [28, 29, 30, 31, 32, 45, 193, 199], "curv": [28, 29, 30, 31, 32, 45, 64, 65, 66, 67, 68, 69, 86, 87, 88, 89, 90, 92, 93, 94, 95, 193, 199], "max_fpr": [29, 30], "rate": [29, 30, 66, 67, 68, 69, 190, 198, 199, 202], "partial": [29, 30, 196, 197], "auc": 29, "automat": [29, 30, 31, 32, 66, 67, 68, 87, 88, 89, 90, 92, 93, 94, 121, 127, 128], "applic": [29, 111, 112, 114], "4": [29, 30, 34, 35, 36, 37, 40, 47, 50, 59, 63, 69, 82, 83, 84, 85, 87, 88, 90, 92, 93, 94, 95, 99, 100, 105, 107, 108, 109, 110, 190, 192, 193, 196, 198, 199, 200, 201], "35": [29, 30, 69, 87, 92, 95, 103, 104, 105, 193, 196, 197, 199], "9": [29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 49, 50, 53, 54, 56, 60, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 190, 193, 196, 197, 198, 199, 201], "6111111111111112": [29, 30], "89": [29, 31, 32, 69, 197], "06": [29, 31, 69], "94": [29, 31, 197], "22222222": [29, 31], "625": [29, 32, 35, 103], "aucroc": 30, "confus": [30, 31, 32, 87, 88, 89, 92, 93, 94], "matrix": [30, 31, 32, 87, 88, 89, 92, 93, 94, 115, 116, 117, 118, 119], "f": [33, 35, 37, 38, 39, 41, 46, 48, 50, 51, 52, 54, 75, 191, 192, 193, 194, 195, 196, 197, 198, 199], "beta": [33, 35, 37, 39, 41, 46, 48, 50, 52, 54], "f1": [34, 36, 38, 40, 46, 47, 49, 51, 53], "form": [34, 47, 193, 199], "6666666666666666": [34, 36, 47, 56, 78, 84], "harmon": [35, 37, 39, 41, 48, 50, 52, 54], "8333333333333334": [35, 37, 50, 59, 62], "85714286": [36, 38], "9090909090909091": 37, "83333333": [37, 41, 50, 54], "55555556": [37, 50, 103], "90909091": [37, 39, 41], "85": [39, 80, 81, 84, 85, 98, 100, 193, 197, 199], "total": [40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 108, 190, 199, 201], "count": [40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 161, 192, 193, 196, 199], "predicit": 41, "constructor": 43, "arraylik": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 93, 102], "ground": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102], "truth": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102], "npt": [48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63], "7142857142857143": 48, "estim": [49, 50, 66, 67, 68, 69, 93, 102, 183], "shape": [49, 50, 51, 52, 53, 54, 60, 61, 108, 109, 196, 197], "expect": [60, 61, 193, 199], "like": [60, 61, 75, 134, 152, 193], "n": [60, 61, 193, 196], "l": [60, 61], "sampl": [60, 61, 63, 119], "presenc": [60, 61, 196], "absenc": [60, 61], "rest": 61, "ratio": [62, 63, 105, 199], "correctli": 62, "precision_scor": 62, "tp": [63, 107, 108, 109], "fn": [63, 107, 108, 109], "intuit": 63, "abil": [63, 193, 199], "recall_scor": 63, "3333333333333333": 63, "receiv": [65, 132], "characterist": 65, "decis": [66, 67, 68, 69, 93, 179, 193, 199], "fpr": [66, 67, 68, 69, 193, 196, 199], "tpr": [66, 67, 68, 69], "25": [66, 67, 68, 88, 90, 92, 93, 95, 105, 116, 117, 193, 197, 199], "softmax": [67, 69, 93], "1d": [67, 68, 69, 95], "33333333": [67, 85, 88, 90, 93, 94, 95, 100], "non": 69, "evenli": [69, 95], "space": [69, 95], "increas": [69, 95], "assertionerror": [69, 179], "03": [69, 192], "stat": [72, 106, 107, 108, 109, 110], "abc": 74, "other_metr": 75, "postfix": 75, "userdict": 75, "collect": [75, 193, 196, 199], "want": 75, "behav": 75, "themselv": 75, "intern": 75, "similar": [75, 128], "reduc": 75, "els": [75, 193, 196, 197, 199], "keep_bas": 75, "iter": 75, "underli": 75, "moduledict": 75, "hashabl": 75, "v": [75, 196], "correspond": [75, 134, 158, 183], "keyerror": [75, 179], "some": [75, 136, 137, 138, 139, 143, 144, 145, 146, 147, 151, 154, 157, 158, 168, 171, 176, 193, 199], "pair": [75, 161], "present": 75, "lack": 75, "In": [75, 193, 199], "metric_a": 76, "metric_b": 76, "metric1": 76, "metric2": 76, "unari": 76, "appropri": [84, 85, 100, 193, 199], "375": [88, 90], "suniqu": 90, "45": [90, 105, 193, 195, 197, 199], "42857143": 90, "15": [103, 104, 105, 192, 193, 196, 197, 198, 199], "57142857": 103, "sum": [105, 108, 109, 110, 196, 199], "_abstractscor": [107, 108, 109], "fp": [107, 108, 109], "tn": [107, 108, 109], "classwis": [108, 110], "over": [108, 109, 110, 161, 190, 202], "labelwis": [109, 110], "prior": [110, 193, 196, 199], "modul": [111, 132, 178, 179, 193, 199], "shift_typ": [112, 114], "shift_id": [112, 197], "induc": [112, 114], "synthet": [112, 114, 190, 199, 200, 202], "categor": [112, 193, 199], "origin": 112, "util": [112, 121, 123, 125, 127, 128, 130, 132, 134, 191, 192, 193, 194, 195, 196, 197, 198, 199], "load_nih": 112, "mnt": [112, 196, 197], "nihcxr": [112, 190, 196, 200], "hospital_type_1": 112, "hospital_type_2": 112, "hospital_type_3": 112, "hospital_type_4": 112, "hospital_type_5": 112, "ds_sourc": [112, 197], "ds_target": [112, 197], "num_proc": [112, 197], "hospit": [112, 132, 190, 193, 199, 201, 202], "drift_detect": 114, "experiment": 114, "sklearn": [114, 193, 199], "load_diabet": 114, "y": [114, 116, 117, 119, 141, 183, 193, 196, 199], "return_x_i": 114, "x_tr": 114, "x_te": 114, "y_tr": 114, "y_te": 114, "train_test_split": [114, 193, 199], "test_siz": 114, "random_st": [114, 193, 199], "42": [114, 191, 193, 194, 199], "gn_shift": 114, "x_shift": 114, "x_train": [114, 183], "noise_amt": [114, 118], "delta": [114, 115, 118, 119, 138], "ko_shift": 114, "cp_shift": 114, "mfa_shift": 114, "bn_shift": 114, "tolerance_shift": 114, "ds_shift": 114, "nois": [114, 115, 118, 193, 196, 199], "prob": 115, "covari": [115, 116, 117, 118, 119], "proport": 115, "fraction": [115, 118, 119, 199], "affect": [115, 118, 179, 193, 199], "n_shuffl": [116, 117], "keep_rows_const": 116, "repermute_each_column": 116, "multiwai": 116, "associ": [116, 193, 196, 199], "swap": [116, 117], "individu": [116, 193, 199], "within": [116, 132], "cl": [116, 117], "etc": [116, 117, 193, 196, 199], "floatnumpi": 116, "shuffl": [116, 117, 193], "permut": 116, "placehold": 116, "shift_class": [117, 119], "rank": 117, "changepoint": 117, "axi": [117, 196, 197, 199], "x_ref": 117, "y_ref": 117, "normal": [118, 193], "clip": 118, "gaussian": 118, "standard": [118, 121, 123, 125, 130, 132, 134, 193, 199], "deviat": 118, "divid": 118, "255": [118, 196, 197], "placehol": 119, "querier": [120, 123, 125, 130, 132, 134, 191, 192, 194, 195, 198, 199], "config_overrid": [121, 123, 125, 130, 132, 134], "orm": [121, 127, 128, 191, 192, 194, 195, 198, 199, 201], "intend": [121, 193, 196, 199], "subclass": [121, 179], "tabl": [121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 190, 191, 194, 198, 201], "schema": [121, 123, 125, 130, 132, 134, 195, 198], "schema_nam": [121, 123, 125, 130, 132, 134, 198], "table_nam": [121, 123, 125, 130, 132, 134], "instanti": [121, 190, 193, 199, 201], "overrid": [121, 123, 125, 130, 132, 134], "process_fn": [121, 123, 125, 128, 130, 132, 134], "tabletyp": [121, 123, 125, 127, 128, 130, 132, 134], "wrap": [121, 123, 125, 126, 127, 128, 130, 132, 134], "panda": [121, 123, 125, 127, 128, 130, 132, 134, 193, 198, 199], "datafram": [121, 123, 125, 127, 128, 130, 132, 134, 183, 190, 193, 199, 201], "cast_timestamp_col": [121, 123, 125, 130, 132, 134], "possibli": [121, 123, 125, 130, 132, 134], "recogn": [121, 123, 125, 130, 132, 134], "timestamp": [121, 123, 125, 130, 132, 134, 142, 143, 144, 149, 150, 159, 179, 190, 196, 200], "sqlalchemi": [121, 123, 125, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 201], "sql": [121, 123, 125, 127, 128, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 190, 201], "subqueri": [121, 123, 125, 130, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177], "care": [125, 132], "unit": [125, 132, 198], "fetch": [125, 127, 128], "transfer": 125, "qo": [125, 130, 132, 134, 191, 192, 194, 195, 198, 199], "construct": [125, 130, 132, 134, 137, 138], "diagnosi": [125, 130, 132, 191, 192], "room": 125, "_data": [127, 128], "_run_arg": [127, 128], "dataclass": [127, 128], "anoth": [127, 128, 162, 171, 174], "dask": [127, 128, 190, 201], "execut": [127, 128, 174, 191, 192, 194, 195, 198, 199], "track": [127, 128], "chain": [127, 128, 174], "done": [127, 128, 193, 199], "thu": [127, 128], "properti": [127, 128, 181, 183], "backend": [127, 128, 195], "index_col": [127, 128, 195], "n_partit": [127, 128, 195], "No": [127, 128, 196, 198], "framework": [127, 128], "index": [127, 128, 174, 175, 193, 196, 199], "defin": [127, 128, 179, 193, 196, 199], "partit": [127, 128, 190, 201], "server": [127, 128], "document": [127, 128, 193, 196, 199], "file_format": [127, 128, 193], "parquet": [127, 128], "csv": [127, 128, 193, 198, 199], "upstream": [127, 128], "_queri": 128, "post": 128, "howev": 128, "prevent": [128, 161], "declar": 128, "icu": 132, "chart": [132, 190, 201], "event": [132, 190, 201], "lab": [132, 190, 192, 196, 201], "approxim": 132, "anchor_year": 132, "anchor_year_group": 132, "suppli": [132, 198], "dod": 132, "adjust": [132, 196], "src_tabl": 134, "src_col": 134, "dst_col": 134, "concept": [134, 198], "somecol_concept_id": 134, "somecol_concept_nam": 134, "accord": [134, 191, 194, 195, 198], "assign": 134, "add_to": [136, 137, 138, 139], "col": [136, 141, 142, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 166, 168, 172, 173, 175, 176], "new_col_label": [136, 137, 138, 139, 175, 176, 199], "subtract": [136, 137], "rather": [136, 137], "new": [136, 137, 138, 139, 141, 160, 161, 166, 172, 175, 176, 179, 193, 199], "col1": [136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 164, 166, 168, 171, 172, 173, 174, 175, 176], "col2": [136, 137, 138, 139, 141, 142, 157, 158, 160, 162, 164, 168, 172, 173, 174, 176], "col3": [136, 137, 162, 173], "col1_plus_col2": [136, 137], "col1_plus_col3": 136, "col2_plus_col3": 136, "pai": 136, "attent": 136, "wherea": 136, "dbtabl": [136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177], "delta_kwarg": 137, "interv": 137, "timedelta": 138, "col1_plus_1": [138, 139], "col2_plus_1": 139, "cond_op": [140, 167], "condit": [140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 167, 193, 198], "lab_nam": [140, 152, 161, 167], "hba1c": [140, 152, 167], "john": [140, 167], "jane": [140, 167], "return_cond": [140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 167], "instead": [140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 167, 179], "func": [141, 196, 197], "new_col": 141, "assum": [141, 191, 194, 195, 198], "lambda": [141, 193, 196, 197, 199], "col1_new": [141, 160, 171], "col2_new": [141, 160], "noqa": [141, 193, 196, 199], "e501": [141, 193, 199], "disabl": 141, "line": [141, 193, 196, 199], "too": 141, "long": [141, 179, 190, 201], "type_": 142, "convers": 142, "date": [142, 143, 144, 179, 193, 196, 199], "timestamp_col": [143, 144, 149, 150, 159], "not_": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "binarize_col": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], "yyyi": [143, 144, 179], "mm": [143, 144, 179], "dd": [143, 144, 179], "col1_bool": [143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155], "cond_kwarg": [145, 146, 147, 148, 151, 154, 155], "2019": [150, 198], "pattern": 152, "lab_name_bool": 152, "regex": 153, "regular": 153, "express": [153, 193, 196, 199], "any_": 155, "just": 155, "b": 155, "person_id": [156, 161, 198], "visit_id": 156, "extract_str": 159, "extract": [159, 175, 191, 192, 193, 194, 195, 198, 199], "inform": [159, 179, 193], "fill_valu": 160, "new_col_nam": [160, 175], "groupby_col": 161, "aggfunc": [161, 199], "aggsep": 161, "aggreg": [161, 190, 201], "string_aggfunc": 161, "separ": 161, "string_agg": 161, "visit_count": 161, "lab_name_agg": 161, "join_tabl": [162, 163, 191, 192, 194, 195, 198], "on_to_typ": [162, 163], "cond": [162, 163], "table_col": [162, 163], "join_table_col": [162, 163], "isout": [162, 163, 198, 199], "repres": [162, 179, 196], "suggest": 162, "oppos": 162, "binaryexpress": [162, 163], "sai": [162, 163], "left": [162, 163, 179, 199], "outer": [162, 163], "table2": [162, 177], "table1": [162, 177], "neither": 162, "nor": 162, "cartesian": 162, "product": [162, 198], "OR": 167, "ascend": [168, 192], "sort": [168, 190, 193, 199, 201], "descend": 168, "random": [170, 193, 196, 199], "so": 170, "certain": [170, 193, 199], "cannot": 170, "seen": 170, "analyz": 170, "quit": 170, "rename_map": 171, "check_exist": 171, "complet": 172, "come": 173, "ordereddict": 174, "op_": 174, "start_index": 175, "stop_index": 175, "stop": [175, 199], "col1_substr": 175, "whitespac": 176, "col1_trim": 176, "col2_trim": 176, "union_t": 177, "union_al": 177, "output_dir": [179, 193, 196, 199], "serv": 179, "popul": [179, 190, 193, 199, 202], "modelcard": 179, "directori": [179, 193, 199], "output_filenam": 179, "template_path": 179, "interact": [179, 199], "save_json": 179, "jinja2": 179, "json": [179, 193, 199], "classmethod": 179, "cyclops_report": [179, 193, 199], "section_nam": [179, 193, 196, 199], "model_detail": [179, 193, 199], "section": [179, 193, 196, 199], "bibtex": 179, "entri": 179, "plain": 179, "text": [179, 195, 196], "descript": [179, 193, 196, 199], "license_id": [179, 193], "sensitive_featur": [179, 193], "sensitive_feature_justif": [179, 193], "log": [179, 190, 193, 199, 202], "about": [179, 193, 196, 199], "resourc": [179, 193, 199], "context": 179, "homepag": 179, "spdx": [179, 193], "identifi": [179, 190, 196, 198, 202], "licens": [179, 193, 196, 199], "apach": [179, 193, 199], "unknown": 179, "unlicens": 179, "proprietari": 179, "justif": [179, 193], "field": [179, 190, 193, 199, 202], "descriptor": 179, "pydant": 179, "basemodel": 179, "As": 179, "conflict": 179, "model_card": [179, 193, 196, 199], "cylop": 179, "tradeoff": [179, 196], "trade": 179, "off": 179, "interpret": 179, "consider": [179, 193, 196, 199], "affected_group": [179, 193, 196, 199], "benefit": [179, 193, 196, 199], "harm": [179, 193, 196, 199], "mitigation_strategi": [179, 193, 196, 199], "assess": 179, "mitig": [179, 193, 196, 199], "strategi": [179, 193, 196, 199], "relat": 179, "img_path": 179, "caption": [179, 193, 196, 199], "full": 179, "whole": [179, 193, 199], "blank": 179, "param": [179, 193, 199], "contact": [179, 193, 196, 199], "role": 179, "owner": [179, 193, 196, 199], "quantit": [179, 193, 196, 199], "slash": 179, "fig": [179, 193, 196, 199], "plotli": [179, 193, 196, 199], "figur": [179, 193, 196, 199], "plot": [179, 193, 196, 199], "analysis_typ": 179, "metric_slic": [179, 193, 196, 199], "decision_threshold": 179, "pass_fail_threshold": [179, 193, 196, 199], "pass_fail_threshold_fn": [179, 193, 196, 199], "explain": [179, 193, 196, 199], "fail": 179, "regul": 179, "regulatori": [179, 193, 199], "compli": 179, "risk": [179, 193, 196, 199, 202], "kind": [179, 193, 196, 199], "primari": [179, 193, 196, 199], "scope": [179, 193, 199], "usecas": 179, "version_str": [179, 193, 199], "semant": 179, "v1": [179, 194, 198], "dt_date": 179, "dt_datetim": 179, "unix": 179, "hh": 179, "ss": 179, "ffffff": 179, "z": 179, "summar": 179, "chang": [179, 193, 196, 199], "made": [179, 193, 199], "task_featur": [181, 183, 193, 199], "task_target": [181, 183, 193, 199], "atelectasi": [181, 196], "consolid": [181, 196], "infiltr": [181, 196], "pneumothorax": [181, 196], "edema": [181, 196], "emphysema": [181, 196], "fibrosi": [181, 196], "effus": [181, 196], "pneumonia": [181, 196], "pleural_thicken": [181, 196], "cardiomegali": [181, 196], "nodul": [181, 196], "mass": [181, 196, 199], "hernia": [181, 196], "lung": 181, "lesion": 181, "fractur": 181, "opac": 181, "enlarg": 181, "cardiomediastinum": 181, "basetask": [181, 183], "multi": [181, 196], "ptmodel": [181, 183], "skmodel": [181, 183], "splits_map": [181, 183], "64": [181, 199], "compos": [181, 193, 196, 197, 199], "unnecessari": [181, 183], "pathologi": [181, 190, 193, 202], "represent": [181, 193, 199], "tabular": [183, 190], "fit": [183, 193, 199], "columntransform": [183, 193, 199], "slicingconfig": 183, "default_max_batch_s": 183, "filepath": 183, "pretrain": [183, 196], "proba": [183, 193, 199], "pd": [183, 198], "notfittederror": 183, "destin": 183, "parent": [183, 193, 196, 199], "dirctori": 183, "best_model_param": [183, 193, 199], "y_train": 183, "seri": 183, "nonei": 183, "male": [190, 196, 197, 201], "outcom": [190, 201, 202], "femal": [190, 193, 196, 197, 199, 201], "gastroenter": [190, 201], "icd": [190, 201], "potassium": [190, 201], "aado2": [190, 201], "carevu": [190, 201], "valuenum": [190, 201], "20": [190, 192, 193, 196, 197, 199, 201], "admiss": [190, 194, 201], "later": [190, 201], "approx": [190, 201], "schizophrenia": [190, 201], "2015": [190, 198, 201], "advanc": [190, 201], "chronic": [190, 201], "routin": [190, 201], "vital": [190, 192, 199, 201], "sign": [190, 193, 199, 201], "hemoglobin": [190, 201], "2009": [190, 201], "radiologi": [190, 201], "lymphadenopathi": [190, 201], "infecti": [190, 201], "occur": [190, 201], "lazi": [190, 201], "subject_id": [190, 194, 201], "raw": [190, 201], "discharg": [190, 201], "2014": [190, 198, 201], "100": [190, 193, 194, 195, 196, 197, 198, 199, 201], "diagnosisstr": [190, 201], "teach": [190, 201], "glucos": [190, 201], "search": [190, 193, 199, 201], "visit": [190, 201], "sepsi": [190, 201], "1a": [190, 201], "most": [190, 193, 201], "recent": [190, 193, 196, 199, 201], "patient_id_hash": [190, 201], "discharge_date_tim": [190, 201], "record": [190, 201], "1b": [190, 201], "abov": [190, 201], "who": [190, 201], "were": [190, 201], "april": [190, 201], "march": [190, 201], "2016": [190, 198, 201], "1c": [190, 201], "2a": [190, 201], "how": [190, 191, 193, 194, 195, 198, 199, 201], "mani": [190, 201], "sodium": [190, 201], "place": [190, 193, 201], "apr": [190, 201], "smh": [190, 201], "drift": [190, 200], "experi": [190, 200], "dimension": [190, 200], "reduct": [190, 200], "techniqu": [190, 200], "roll": [190, 200], "window": [190, 200], "biweekli": [190, 200], "kaggl": [190, 193], "heart": [190, 198], "failur": 190, "constant": [190, 202], "distribut": [190, 196, 202], "preprocessor": [190, 202], "creation": [190, 202], "synthea": [190, 198, 199], "prolong": 190, "length": [190, 196], "stai": 190, "inspect": [190, 193, 202], "preprocess": [190, 193, 202], "nan_threshold": [190, 193, 202], "gender": [190, 191, 193, 194, 195, 196, 197, 202], "nih": [190, 196, 197], "diseas": [190, 193, 202], "balanc": [190, 193, 202], "w": [190, 202], "quick": [191, 194, 195, 198], "instruct": [191, 194, 195, 198, 199], "host": [191, 192, 194, 195, 198, 199], "postgr": [191, 194, 195, 198, 199], "usernam": [191, 192, 193, 194, 195, 198], "password": [191, 192, 194, 195, 198, 199], "accordingli": [191, 194, 195, 198], "dbm": [191, 194, 195, 198, 199], "postgresql": [191, 194, 195, 198, 199, 201], "port": [191, 194, 195, 198, 199], "5432": [191, 194, 195, 198, 199], "localhost": [191, 194, 195, 198, 199], "pwd": [191, 194, 195, 198, 199], "2023": [191, 192, 193, 194, 195, 198, 199], "09": [191, 192, 193, 194, 195, 196, 198, 199], "07": [191, 193, 194, 195, 197, 198, 199], "18": [191, 193, 194, 195, 197, 198, 199], "11": [191, 193, 195, 196, 199, 202], "564": 191, "readi": [191, 192, 194, 195, 198, 199], "39": [191, 192, 193, 194, 195, 196, 197, 198, 199], "eicu_crd": 191, "admissiondrug": 191, "admissiondx": 191, "allergi": [191, 198], "apacheapsvar": 191, "apachepatientresult": 191, "apachepredvar": 191, "careplancareprovid": 191, "careplaneol": 191, "careplangener": 191, "careplango": 191, "careplaninfectiousdiseas": 191, "customlab": 191, "infusiondrug": 191, "intakeoutput": 191, "microlab": 191, "nurseassess": 191, "nursecar": 191, "nursechart": 191, "pasthistori": 191, "physicalexam": 191, "respiratorycar": 191, "respiratorychart": 191, "treatment": 191, "vitalaperiod": 191, "vitalperiod": 191, "information_schema": [191, 192, 195, 198], "sql_packag": [191, 198], "sql_featur": [191, 192, 198], "sql_implementation_info": [191, 192, 198], "sql_part": [191, 192, 198], "sql_languag": [191, 198], "sql_size": [191, 192, 198], "sql_sizing_profil": [191, 198], "hospitaldischargeyear": 191, "len": [191, 192, 193, 194, 195, 196, 198, 199], "298": 191, "successfulli": [191, 192, 194, 195, 198, 199], "300": 191, "profil": [191, 192, 193, 194, 195, 198, 199], "finish": [191, 192, 194, 195, 198, 199], "run_queri": [191, 192, 194, 195, 198, 199], "047861": 191, "diagnosis_op": 191, "patientunitstayid": 191, "476": 191, "478": 191, "100729": 191, "teachingstatu": 191, "hospitalid": 191, "lab_op": [191, 192, 194], "labnam": 191, "671": 191, "672": 191, "031188": 191, "medications_op": 191, "drugnam": 191, "914": [191, 193], "915": [191, 193], "171809": 191, "hpc": 192, "ca": 192, "delirium_v3_0_0": 192, "21": [192, 193, 196, 197, 198, 199], "17": [192, 193, 197, 199], "267": 192, "public": [192, 195, 198], "ip_administr": 192, "derived_vari": 192, "intervent": 192, "er_administr": 192, "pharmaci": 192, "ip_scu": 192, "lookup_ip_administr": 192, "lookup_ccsr": 192, "lookup_er_administr": 192, "blood_transfus": 192, "lookup_ip_scu": 192, "lookup_diagnosi": 192, "lookup_room_transf": 192, "lookup_imag": 192, "encounters_qi": 192, "365": 192, "366": 192, "825447": 192, "189606": 192, "04": [192, 197], "372": 192, "373": 192, "992901": 192, "17071": 192, "hospital_id": 192, "encounters_per_site_qi": 192, "encounters_per_sit": 192, "22": [192, 193, 197, 199], "181": 192, "182": 192, "800708": 192, "encounter_op": 192, "sample_collection_date_tim": 192, "lab_test_name_map": 192, "lab_qi": 192, "genc_id": 192, "sodium_test": 192, "59": [192, 199], "972": 192, "973": 192, "37": [192, 193, 197, 199], "740935": 192, "6053": 192, "showcas": [193, 198, 199, 202], "formul": [193, 199], "o": [193, 196, 199], "shutil": [193, 196, 199], "pathlib": [193, 196, 199], "px": [193, 196, 199], "dateutil": [193, 196, 199], "relativedelta": [193, 196, 199], "kaggle_api_extend": 193, "kaggleapi": 193, "imput": [193, 199], "simpleimput": [193, 199], "pipelin": [193, 199], "minmaxscal": [193, 199], "onehotencod": [193, 199], "e402": [193, 196, 199], "catalog": [193, 199], "create_model": [193, 199], "tabularfeatur": [193, 199], "classificationplott": [193, 196, 199], "flatten_results_dict": [193, 199], "get_metrics_trend": [193, 196, 199], "load_datafram": 193, "home": [193, 196, 197, 199], "amritk": [193, 196, 197, 199], "cach": [193, 196, 197, 199], "pypoetri": [193, 196, 197, 199], "virtualenv": [193, 196, 197, 199], "wizuawxh": [193, 196, 197, 199], "py3": [193, 196, 197, 199], "lib": [193, 196, 197, 199], "site": [193, 196, 197, 199], "tqdm": [193, 196, 197, 199], "auto": [193, 196, 197, 199], "py": [193, 196, 197, 199], "tqdmwarn": [193, 196, 197, 199], "iprogress": [193, 196, 197, 199], "ipywidget": [193, 196, 197, 199], "readthedoc": [193, 196, 197, 199], "io": [193, 196, 197, 199], "en": [193, 196, 197, 199], "user_instal": [193, 196, 197, 199], "autonotebook": [193, 196, 197, 199], "notebook_tqdm": [193, 196, 197, 199], "offer": [193, 196, 199], "through": [193, 196, 199], "technic": [193, 196, 199], "architectur": [193, 196, 199], "involv": [193, 196, 199], "subpopul": [193, 196, 199], "explaina": [193, 196, 199], "go": [193, 196, 199], "tool": [193, 196, 199], "progress": [193, 196, 199], "subject": [193, 196, 199], "data_dir": [193, 196], "random_se": [193, 199], "train_siz": [193, 199], "com": [193, 196], "Then": 193, "trigger": 193, "download": 193, "credenti": 193, "locat": [193, 198], "machin": [193, 196], "authent": 193, "dataset_download_fil": 193, "fedesoriano": 193, "unzip": 193, "df": 193, "reset_index": [193, 199], "658": [193, 195], "chestpaintyp": 193, "restingbp": 193, "cholesterol": 193, "fastingb": 193, "restingecg": 193, "40": [193, 199], "ata": 193, "140": 193, "289": 193, "49": [193, 194, 199], "nap": 193, "160": 193, "180": 193, "130": 193, "283": 193, "st": 193, "48": [193, 196, 199], "asi": 193, "138": 193, "214": 193, "54": [193, 197], "150": 193, "195": 193, "913": [193, 194], "ta": 193, "110": 193, "264": 193, "68": [193, 195], "144": 193, "193": 193, "57": [193, 195, 196, 197, 199], "131": 193, "916": 193, "236": 193, "lvh": 193, "917": 193, "38": [193, 199], "175": 193, "maxhr": 193, "exerciseangina": 193, "oldpeak": 193, "st_slope": 193, "heartdiseas": 193, "172": 193, "156": 193, "flat": 193, "98": 193, "108": 193, "122": 193, "132": 193, "141": 193, "115": 193, "174": 193, "173": 193, "918": 193, "13": [193, 194, 196, 198, 199], "pie": [193, 196, 199], "update_layout": [193, 196, 199], "histogram": [193, 196, 199], "xaxis_titl": [193, 196, 199], "yaxis_titl": [193, 196, 199], "bargap": [193, 196, 199], "astyp": [193, 199], "update_trac": [193, 196, 199], "textinfo": [193, 199], "percent": [193, 199], "title_text": [193, 199], "hovertempl": [193, 199], "br": [193, 199], "class_count": [193, 199], "value_count": [193, 198, 199], "class_ratio": [193, 199], "8070866141732284": 193, "14": [193, 195, 196, 197, 199, 202], "wa": [193, 196, 199], "li": 193, "et": 193, "al": 193, "features_list": [193, 199], "help": [193, 196, 199], "essenti": [193, 199], "step": [193, 199], "understand": [193, 199], "u": [193, 199], "16": [193, 196, 197, 198, 199], "tab_featur": [193, 199], "ordin": 193, "might": [193, 199], "numeric_transform": [193, 199], "scaler": [193, 199], "binary_transform": [193, 199], "most_frequ": [193, 199], "numeric_featur": [193, 199], "features_by_typ": [193, 199], "numeric_indic": [193, 199], "get_loc": [193, 199], "19": [193, 196, 197, 199], "binary_featur": [193, 199], "ordinal_featur": 193, "binary_indic": [193, 199], "ordinal_indic": 193, "num": [193, 199], "onehot": [193, 199], "handle_unknown": [193, 199], "ignor": [193, 199], "remaind": [193, 199], "passthrough": [193, 199], "let": [193, 199], "independ": 193, "everi": 193, "uci": 193, "archiv": 193, "ic": 193, "edu": 193, "cleandoc": 193, "misc": 193, "cc0": 193, "demograph": [193, 196], "often": 193, "strong": 193, "correl": 193, "older": [193, 199], "higher": 193, "power": [193, 199], "easi": [193, 199], "compat": [193, 199], "from_panda": [193, 199], "cleanup_cache_fil": [193, 199], "num_row": 193, "cast_column": [193, 199], "stratify_by_column": [193, 199], "seed": [193, 199], "lt": [193, 195, 196, 197, 199], "263237": 193, "24": [193, 199], "straightforward": [193, 199], "maintain": [193, 199], "sgd": [193, 199], "logisit": [193, 199], "regress": [193, 199], "sgdclassif": [193, 199], "sgd_classifi": 193, "123": [193, 199], "verbos": [193, 199], "class_weight": 193, "mortalitypredict": [193, 199], "encapsul": [193, 199], "cohes": [193, 199], "structur": [193, 199], "smooth": [193, 199], "manag": [193, 199], "mortality_task": 193, "26": [193, 199], "best": [193, 199], "hyperparamet": [193, 199], "grid": [193, 199], "27": [193, 197, 199], "alpha": 193, "0001": 193, "001": 193, "learning_r": [193, 199], "invscal": 193, "adapt": 193, "eta0": 193, "roc_auc": 193, "340": 193, "wrapper": [193, 199, 201], "sk_model": [193, 199], "342": 193, "sgdclassifi": 193, "x27": [193, 199], "early_stop": 193, "loss": 193, "log_loss": 193, "rerun": [193, 199], "cell": [193, 199], "trust": [193, 199], "On": [193, 196, 199], "github": [193, 196, 199], "unabl": [193, 199], "render": [193, 199], "try": [193, 199], "page": [193, 199], "nbviewer": [193, 199], "sgdclassifiersgdclassifi": 193, "28": [193, 196, 199], "model_param": [193, 199], "epsilon": 193, "fit_intercept": 193, "l1_ratio": 193, "max_it": 193, "n_iter_no_chang": 193, "n_job": [193, 199], "penalti": 193, "l2": 193, "power_t": 193, "tol": 193, "validation_fract": 193, "warm_start": 193, "29": [193, 199], "30": [193, 196, 199, 202], "y_pred": [193, 199], "only_predict": [193, 199], "184": 193, "8105": 193, "79": [193, 199], "variou": [193, 199], "perspect": [193, 199], "metric_collect": [193, 199], "70": 193, "33": [193, 196, 199], "fnr": [193, 196, 199], "ber": [193, 199], "fairness_metric_collect": [193, 199], "34": [193, 199], "dataset_with_pr": [193, 199], "7631": 193, "51": [193, 194, 198, 199], "9397": 193, "86": [193, 196], "51082": 193, "gt": [193, 195, 196, 199], "20697": 193, "61": [193, 197], "21837": 193, "92": 193, "22940": 193, "21510": 193, "22517": 193, "21211": 193, "right": [193, 199], "36": [193, 195, 199], "results_flat": [193, 196, 199], "remove_metr": [193, 199], "796875": 193, "8260869565217391": 193, "6785714285714286": 193, "7450980392156863": 193, "8819444444444444": 193, "8623853211009175": 193, "8676470588235294": 193, "9076923076923077": 193, "8872180451127819": 193, "927972027972028": 193, "842391304347826": 193, "8686868686868687": 193, "8431372549019608": 193, "8557213930348259": 193, "9152319464371114": 193, "plw2901": [193, 196, 199], "plotter": [193, 196, 197, 199], "class_nam": [193, 199], "set_templ": [193, 196, 199], "plotly_whit": [193, 196, 199], "slice_result": [193, 196, 199], "dict_kei": [193, 199], "roc_plot": [193, 199], "roc_curve_comparison": [193, 199], "41": [193, 196, 197, 199], "overall_perform": [193, 199], "metric_valu": [193, 199], "overall_performance_plot": [193, 199], "metrics_valu": [193, 199], "43": [193, 194, 199], "slice_metr": [193, 199], "44": [193, 194, 195, 198, 199], "slice_metrics_plot": [193, 199], "metrics_comparison_bar": [193, 199], "comparison": [193, 199], "reform": [193, 199], "fairness_result": [193, 199], "deepcopi": [193, 199], "fairness_metr": [193, 199], "group_siz": [193, 199], "46": [193, 195, 197, 198, 199], "fairness_plot": [193, 199], "metrics_comparison_scatt": [193, 199], "leverag": [193, 196, 199], "histor": [193, 196, 199], "gather": [193, 196, 199], "merg": [193, 196, 199], "wish": [193, 196, 199], "metrics_trend": [193, 196, 199], "integr": [193, 196, 199], "purpos": [193, 196, 199], "three": [193, 196, 199], "dummi": [193, 196, 199], "demonstr": [193, 196, 199, 202], "trend": [193, 196, 199], "47": [193, 197, 199], "dummy_report_num": [193, 196, 199], "dummy_report_dir": [193, 196, 199], "getcwd": [193, 196, 199], "dummy_report": [193, 196, 199], "simul": [193, 196, 199], "uniform": [193, 196, 199], "dummy_result": [193, 196, 199], "max": [193, 196, 199], "folder": [193, 196, 199], "dummy_report_path": [193, 196, 199], "date_dir": [193, 196, 199], "dummy_d": [193, 196, 199], "todai": [193, 196, 199], "new_dir": [193, 196, 199], "rmtree": [193, 196, 199], "previou": [193, 196, 199], "report_directori": [193, 196, 199], "flat_result": [193, 196, 199], "trends_plot": [193, 196, 199], "audienc": [193, 199], "organ": [193, 198, 199], "store": [193, 199], "regulatory_requir": [193, 199], "releas": [193, 198, 199], "team": [193, 199], "vectorinstitut": [193, 199], "linear_model": 193, "next": [193, 199], "use_cas": [193, 199], "These": [193, 199], "fairness_assess": [193, 199], "well": [193, 196, 199], "taken": [193, 199], "ethical_consider": [193, 199], "clinician": [193, 199], "engin": [193, 199], "improv": [193, 199], "bias": [193, 196, 199], "lead": [193, 199], "wors": [193, 199], "retrain": [193, 199], "below": [193, 199], "By": [193, 199], "52": [193, 197, 199], "report_path": [193, 196, 199], "view": [193, 196, 199, 202], "052": 194, "expire_flag": 194, "911": 194, "040301": 194, "diagnoses_op": [194, 195], "long_titl": [194, 195], "hadm_id": [194, 195], "614": 194, "616": 194, "094008": 194, "667": 194, "668": 194, "020906": 194, "chartevents_op": [194, 195], "dbsourc": 194, "chart_ev": 194, "378": 194, "380": 194, "69": [194, 197], "680069": 194, "v2": [195, 198], "358": 195, "fhir_etl": 195, "fhir_trm": 195, "mimic_fhir": 195, "mimiciv_deriv": 195, "mimiciv_": 195, "mimiciv_hosp": 195, "mimiciv_icu": 195, "mimiciv_not": 195, "admittim": 195, "dischtim": 195, "anchor_year_differ": 195, "349": 195, "351": 195, "159370": 195, "icd_vers": 195, "admissions_op": 195, "307": 195, "308": 195, "820091": 195, "r": 195, "043": 195, "045": 195, "520904": 195, "82": 195, "categori": [195, 199], "637": 195, "639": 195, "458885": 195, "labevents_op": 195, "732": 195, "733": 195, "953535": 195, "radiology_notes_op": 195, "radiology_not": 195, "56": [195, 197], "426": 195, "428": 195, "557285": 195, "npartit": 195, "879": 195, "390948": 195, "35639": 195, "core": 195, "659": 195, "010172": 195, "torchxrayvis": [196, 197], "functool": [196, 197], "graph_object": [196, 199], "torch": 196, "concatenate_dataset": 196, "lambdad": [196, 197], "resiz": [196, 197], "todev": [196, 197], "densenet": [196, 197], "loader": [196, 197], "load_nihcxr": [196, 197], "apply_transform": [196, 197], "get_devic": [196, 197], "devic": [196, 197, 198], "clinical_dataset": [196, 197], "nih_d": [196, 197], "4000": 196, "spatial_s": [196, 197], "224": [196, 197], "allow_missing_kei": [196, 197], "1024": [196, 197], "newaxi": [196, 197], "densenet121": [196, 197], "res224": [196, 197], "def": [196, 199], "get_predictions_torch": 196, "stack": 196, "squeez": 196, "formatted_a": 196, "preds_d": 196, "91": 196, "309154": 196, "1827": 196, "2803": 196, "int64": [196, 198], "originalimag": 196, "width": [196, 199], "height": [196, 199], "originalimagepixelspac": 196, "unnam": 196, "float32": 196, "arang": 196, "nih_eval_results_gend": 196, "scatter": 196, "mode": 196, "marker": 196, "perf_metric_gend": 196, "title_x": 196, "title_font_s": 196, "768": 196, "selector": 196, "62754": 196, "60743": 196, "65": [196, 197], "62616": 196, "nih_eval_results_ag": 196, "perf_metric_ag": 196, "59554": 196, "61405": 196, "63": 196, "61298": 196, "55": [196, 197, 198, 199], "63322": 196, "67": [196, 199], "showlegend": 196, "bar": [196, 199], "balanced_error_r": 196, "nih_fairness_result_ag": 196, "balancederrorr": 196, "fairness_ag": 196, "62021": 196, "61735": 196, "62566": 196, "fairness_age_par": 196, "slice_": 196, "itr": 196, "enumer": 196, "dummy_reports_cxr": 196, "112": [196, 202], "120": [196, 199, 202], "frontal": [196, 202], "805": [196, 202], "fourteen": 196, "mine": 196, "radiolog": 196, "pleural": 196, "thicken": 196, "80": [196, 199], "remain": 196, "arxiv": 196, "ab": 196, "2111": 196, "00595": 196, "inproceed": 196, "cohen2022xrv": 196, "cohen": 196, "joseph": 196, "paul": 196, "viviano": 196, "bertin": 196, "morrison": 196, "torabian": 196, "parsa": 196, "guarrera": 196, "matteo": 196, "lungren": 196, "matthew": 196, "chaudhari": 196, "akshai": 196, "brook": 196, "rupert": 196, "hashir": 196, "mohammad": 196, "bertrand": 196, "hadrien": 196, "booktitl": 196, "deep": 196, "mlmed": 196, "arxivid": 196, "cohen2020limit": 196, "cross": 196, "domain": [196, 198], "autom": [196, 199], "2002": 196, "02497": 196, "medicin": 196, "radiologist": 196, "scientist": 196, "inabl": 196, "addition": 196, "poor": 196, "qualiti": 196, "artifact": 196, "geograph": 196, "region": 196, "ethic": 196, "ensur": 196, "divers": 196, "regularli": 196, "human": 196, "expertis": 196, "address": 196, "rare": 196, "qualit": 196, "detector": 197, "reductor": 197, "tstester": 197, "plot_drift_experi": 197, "plot_drift_timeseri": 197, "shifter": 197, "source_d": 197, "target_d": 197, "with_transform": 197, "output_all_column": 197, "112120": 197, "115379": 197, "117435": 197, "dr_method": 197, "bbse": 197, "soft": 197, "txrv": 197, "ae": 197, "sensitivity_test": 197, "tester": 197, "tester_method": 197, "source_sample_s": 197, "target_sample_s": 197, "num_run": 197, "detect_shift": 197, "83": [197, 199], "74": [197, 199], "53": [197, 198], "chexpert": 197, "chex": 197, "padchest": 197, "pc": 197, "77": 197, "71": [197, 198], "84": 197, "97": 197, "78": 197, "88": [197, 199], "source_slic": 197, "target_slic": 197, "74383": 197, "76526": 197, "73": [197, 199], "75743": 197, "76302": 197, "76512": 197, "77231": 197, "84518": 197, "84499": 197, "rolling_window_drift": 197, "timestamp_column": 197, "window_s": 197, "4w": 197, "87": 197, "96": 197, "etl": [198, 199], "hous": 198, "synthea_integration_test": 198, "cdm_synthea10": 198, "690": 198, "observation_period": 198, "condition_occurr": 198, "drug_exposur": 198, "procedure_occurr": 198, "device_exposur": 198, "death": 198, "note_nlp": 198, "specimen": 198, "fact_relationship": 198, "care_sit": 198, "payer_plan_period": 198, "cost": 198, "drug_era": 198, "dose_era": 198, "condition_era": 198, "episod": 198, "episode_ev": 198, "cdm_sourc": 198, "vocabulari": 198, "concept_class": 198, "concept_relationship": 198, "relationship": 198, "concept_synonym": 198, "concept_ancestor": 198, "source_to_concept_map": 198, "drug_strength": 198, "cohort": [198, 199], "cohort_definit": 198, "source_to_standard_vocab_map": 198, "source_to_source_vocab_map": 198, "all_visit": 198, "assign_all_visit_id": 198, "final_visit_id": 198, "nativ": [198, 199], "careplan": 198, "immun": 198, "imaging_studi": 198, "procedur": [198, 199, 202], "claim": 198, "claims_transact": 198, "payer_transit": 198, "payer": 198, "visit_start_d": 198, "to_datetim": 198, "dt": 198, "sort_index": 198, "216": 198, "217": 198, "073143": 198, "2011": 198, "2012": 198, "2013": 198, "2017": 198, "2018": 198, "visit_occurrence_id": 198, "407": 198, "408": 198, "060283": 198, "repo": 198, "597": 198, "visits_concept_map": 198, "discharge_to_concept_id": 198, "admitting_concept_id": 198, "visits_op": 198, "discharge_to_concept_nam": 198, "di": 198, "58": [198, 199], "675": 198, "676": 198, "077864": 198, "persons_op": 198, "gender_concept_nam": 198, "cohort_queri": [198, 199], "condition_concept_id": 198, "sepsis_died_filt": 198, "condition_concept_nam": 198, "084": 198, "085": 198, "76": 198, "767182": 198, "measurement_concept_nam": 198, "bacteria": 198, "blood": [198, 199], "autolog": 198, "cultur": 198, "sputum": 198, "urin": 198, "longer": 199, "v3": 199, "num_dai": 199, "synthea_demo": 199, "get_encount": 199, "birthdat": 199, "race": 199, "ethnic": 199, "start_year": 199, "birthdate_year": 199, "lo": 199, "get_observ": 199, "n_ob": 199, "observations_count": 199, "observations_stat": 199, "pivot_t": 199, "add_prefix": 199, "obs_": 199, "get_med": 199, "n_med": 199, "get_procedur": 199, "n_procedur": 199, "to_merg": 199, "to_merge_df": 199, "left_on": 199, "right_on": 199, "to_drop": 199, "startswith": 199, "744": 199, "947": 199, "948": 199, "111": 199, "862667": 199, "396": 199, "398": 199, "447524": 199, "890": 199, "891": 199, "380797": 199, "390": 199, "391": 199, "495345": 199, "491": 199, "492": 199, "099978": 199, "null_count": 199, "isnul": 199, "600": 199, "respect": 199, "larger": 199, "thresh_nan": 199, "dropna": 199, "thresh": 199, "length_of_stai": 199, "length_of_stay_count": 199, "length_of_stay_kei": 199, "5573997233748271": 199, "obs_alanin": 199, "aminotransferas": 199, "enzymat": 199, "volum": 199, "serum": 199, "plasma": 199, "obs_albumin": 199, "obs_alkalin": 199, "phosphatas": 199, "obs_aspart": 199, "obs_bilirubin": 199, "obs_bodi": 199, "obs_calcium": 199, "obs_carbon": 199, "dioxid": 199, "mole": 199, "obs_chlorid": 199, "obs_creatinin": 199, "obs_diastol": 199, "pressur": 199, "obs_erythrocyt": 199, "obs_ferritin": 199, "obs_glomerular": 199, "filtrat": 199, "sq": 199, "obs_glucos": 199, "obs_hematocrit": 199, "obs_hemoglobin": 199, "obs_leukocyt": 199, "obs_mch": 199, "entit": 199, "obs_mchc": 199, "obs_mcv": 199, "obs_oxygen": 199, "satur": 199, "arteri": 199, "obs_platelet": 199, "obs_potassium": 199, "obs_protein": 199, "obs_sodium": 199, "obs_systol": 199, "obs_troponin": 199, "cardiac": 199, "obs_urea": 199, "nitrogen": 199, "1126": 199, "165178": 199, "sllearn": 199, "xgb_classifi": 199, "los_task": 199, "n_estim": 199, "250": 199, "500": 199, "max_depth": 199, "reg_lambda": 199, "colsample_bytre": 199, "gamma": 199, "119": 199, "121": 199, "xgbclassifi": 199, "base_scor": 199, "booster": 199, "callback": 199, "colsample_bylevel": 199, "colsample_bynod": 199, "early_stopping_round": 199, "enable_categor": 199, "eval_metr": 199, "logloss": 199, "feature_typ": 199, "gpu_id": 199, "grow_polici": 199, "importance_typ": 199, "interaction_constraint": 199, "max_bin": 199, "max_cat_threshold": 199, "max_cat_to_onehot": 199, "max_delta_step": 199, "max_leav": 199, "min_child_weight": 199, "miss": 199, "monotone_constraint": 199, "num_parallel_tre": 199, "predictor": 199, "xgbclassifierxgbclassifi": 199, "logist": 199, "use_label_encod": 199, "reg_alpha": 199, "sampling_method": 199, "scale_pos_weight": 199, "subsampl": 199, "tree_method": 199, "validate_paramet": 199, "226": 199, "4034": 199, "3865": 199, "3353": 199, "63716": 199, "66": 199, "8323": 199, "9111": 199, "9174": 199, "9227": 199, "9454": 199, "amp": 199, "8948": 199, "9065": 199, "8886": 199, "8894": 199, "9054": 199, "8789": 199, "8695652173913043": 199, "9811320754716981": 199, "7878787878787878": 199, "8739495798319328": 199, "9571737786023501": 199, "7868852459016393": 199, "7567567567567568": 199, "8115942028985508": 199, "9144144144144144": 199, "8455284552845529": 199, "984375": 199, "7777777777777778": 199, "8689655172413793": 199, "9362139917695472": 199, "8543689320388349": 199, "8888888888888888": 199, "8818897637795275": 199, "9377003205128205": 199, "8495575221238938": 199, "937007874015748": 199, "8206896551724138": 199, "9355044699872286": 199, "xgboost": 199, "python_api": 199, "statist": 200, "commun": 201, "around": 201, "goal": 202}, "objects": {"cyclops": [[184, 0, 0, "-", "data"], [185, 0, 0, "-", "evaluate"], [186, 0, 0, "-", "monitor"], [187, 0, 0, "-", "query"], [188, 0, 0, "-", "report"], [189, 0, 0, "-", "tasks"]], "cyclops.data": [[184, 0, 0, "-", "features"], [6, 0, 0, "-", "slicer"]], "cyclops.data.features": [[4, 0, 0, "-", "medical_image"]], "cyclops.data.features.medical_image": [[5, 1, 1, "", "MedicalImage"]], "cyclops.data.features.medical_image.MedicalImage": [[5, 2, 1, "", "__call__"], [5, 2, 1, "", "cast_storage"], [5, 2, 1, "", "decode_example"], [5, 2, 1, "", "embed_storage"], [5, 2, 1, "", "encode_example"], [5, 2, 1, "", "flatten"]], "cyclops.data.slicer": [[7, 1, 1, "", "SliceSpec"], [8, 4, 1, "", "compound_filter"], [9, 4, 1, "", "filter_datetime"], [10, 4, 1, "", "filter_non_null"], [11, 4, 1, "", "filter_range"], [12, 4, 1, "", "filter_string_contains"], [13, 4, 1, "", "filter_value"], [14, 4, 1, "", "is_datetime"], [15, 4, 1, "", "overall"]], "cyclops.data.slicer.SliceSpec": [[7, 3, 1, "", "_registry"], [7, 2, 1, "", "add_slice_spec"], [7, 3, 1, "", "column_names"], [7, 2, 1, "", "get_slices"], [7, 2, 1, "", "slices"], [7, 3, 1, "", "spec_list"], [7, 3, 1, "", "validate"]], "cyclops.evaluate": [[16, 0, 0, "-", "evaluator"], [185, 0, 0, "-", "fairness"], [185, 0, 0, "-", "metrics"]], "cyclops.evaluate.evaluator": [[17, 4, 1, "", "evaluate"]], "cyclops.evaluate.fairness": [[18, 0, 0, "-", "config"], [20, 0, 0, "-", "evaluator"]], "cyclops.evaluate.fairness.config": [[19, 1, 1, "", "FairnessConfig"]], "cyclops.evaluate.fairness.evaluator": [[21, 4, 1, "", "evaluate_fairness"], [22, 4, 1, "", "warn_too_many_unique_values"]], "cyclops.evaluate.metrics": [[23, 0, 0, "-", "accuracy"], [28, 0, 0, "-", "auroc"], [33, 0, 0, "-", "f_beta"], [42, 0, 0, "-", "factory"], [185, 0, 0, "-", "functional"], [73, 0, 0, "-", "metric"], [77, 0, 0, "-", "precision_recall"], [86, 0, 0, "-", "precision_recall_curve"], [91, 0, 0, "-", "roc"], [96, 0, 0, "-", "sensitivity"], [101, 0, 0, "-", "specificity"], [106, 0, 0, "-", "stat_scores"]], "cyclops.evaluate.metrics.accuracy": [[24, 1, 1, "", "Accuracy"], [25, 1, 1, "", "BinaryAccuracy"], [26, 1, 1, "", "MulticlassAccuracy"], [27, 1, 1, "", "MultilabelAccuracy"]], "cyclops.evaluate.metrics.accuracy.Accuracy": [[24, 2, 1, "", "__add__"], [24, 2, 1, "", "__call__"], [24, 2, 1, "", "__init__"], [24, 2, 1, "", "__mul__"], [24, 2, 1, "", "add_state"], [24, 2, 1, "", "clone"], [24, 2, 1, "", "compute"], [24, 2, 1, "", "reset_state"], [24, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.BinaryAccuracy": [[25, 2, 1, "", "__add__"], [25, 2, 1, "", "__call__"], [25, 2, 1, "", "__init__"], [25, 2, 1, "", "__mul__"], [25, 2, 1, "", "add_state"], [25, 2, 1, "", "clone"], [25, 2, 1, "", "compute"], [25, 2, 1, "", "reset_state"], [25, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy": [[26, 2, 1, "", "__add__"], [26, 2, 1, "", "__call__"], [26, 2, 1, "", "__init__"], [26, 2, 1, "", "__mul__"], [26, 2, 1, "", "add_state"], [26, 2, 1, "", "clone"], [26, 2, 1, "", "compute"], [26, 2, 1, "", "reset_state"], [26, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy": [[27, 2, 1, "", "__add__"], [27, 2, 1, "", "__call__"], [27, 2, 1, "", "__init__"], [27, 2, 1, "", "__mul__"], [27, 2, 1, "", "add_state"], [27, 2, 1, "", "clone"], [27, 2, 1, "", "compute"], [27, 2, 1, "", "reset_state"], [27, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc": [[29, 1, 1, "", "AUROC"], [30, 1, 1, "", "BinaryAUROC"], [31, 1, 1, "", "MulticlassAUROC"], [32, 1, 1, "", "MultilabelAUROC"]], "cyclops.evaluate.metrics.auroc.AUROC": [[29, 2, 1, "", "__add__"], [29, 2, 1, "", "__call__"], [29, 2, 1, "", "__init__"], [29, 2, 1, "", "__mul__"], [29, 2, 1, "", "add_state"], [29, 2, 1, "", "clone"], [29, 2, 1, "", "compute"], [29, 2, 1, "", "reset_state"], [29, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.BinaryAUROC": [[30, 2, 1, "", "__add__"], [30, 2, 1, "", "__call__"], [30, 2, 1, "", "__init__"], [30, 2, 1, "", "__mul__"], [30, 2, 1, "", "add_state"], [30, 2, 1, "", "clone"], [30, 2, 1, "", "compute"], [30, 2, 1, "", "reset_state"], [30, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.MulticlassAUROC": [[31, 2, 1, "", "__add__"], [31, 2, 1, "", "__call__"], [31, 2, 1, "", "__init__"], [31, 2, 1, "", "__mul__"], [31, 2, 1, "", "add_state"], [31, 2, 1, "", "clone"], [31, 2, 1, "", "compute"], [31, 2, 1, "", "reset_state"], [31, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.MultilabelAUROC": [[32, 2, 1, "", "__add__"], [32, 2, 1, "", "__call__"], [32, 2, 1, "", "__init__"], [32, 2, 1, "", "__mul__"], [32, 2, 1, "", "add_state"], [32, 2, 1, "", "clone"], [32, 2, 1, "", "compute"], [32, 2, 1, "", "reset_state"], [32, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta": [[34, 1, 1, "", "BinaryF1Score"], [35, 1, 1, "", "BinaryFbetaScore"], [36, 1, 1, "", "F1Score"], [37, 1, 1, "", "FbetaScore"], [38, 1, 1, "", "MulticlassF1Score"], [39, 1, 1, "", "MulticlassFbetaScore"], [40, 1, 1, "", "MultilabelF1Score"], [41, 1, 1, "", "MultilabelFbetaScore"]], "cyclops.evaluate.metrics.f_beta.BinaryF1Score": [[34, 2, 1, "", "__add__"], [34, 2, 1, "", "__call__"], [34, 2, 1, "", "__init__"], [34, 2, 1, "", "__mul__"], [34, 2, 1, "", "add_state"], [34, 2, 1, "", "clone"], [34, 2, 1, "", "compute"], [34, 2, 1, "", "reset_state"], [34, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore": [[35, 2, 1, "", "__add__"], [35, 2, 1, "", "__call__"], [35, 2, 1, "", "__init__"], [35, 2, 1, "", "__mul__"], [35, 2, 1, "", "add_state"], [35, 2, 1, "", "clone"], [35, 2, 1, "", "compute"], [35, 2, 1, "", "reset_state"], [35, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.F1Score": [[36, 2, 1, "", "__add__"], [36, 2, 1, "", "__call__"], [36, 2, 1, "", "__init__"], [36, 2, 1, "", "__mul__"], [36, 2, 1, "", "add_state"], [36, 2, 1, "", "clone"], [36, 2, 1, "", "compute"], [36, 2, 1, "", "reset_state"], [36, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.FbetaScore": [[37, 2, 1, "", "__add__"], [37, 2, 1, "", "__call__"], [37, 2, 1, "", "__init__"], [37, 2, 1, "", "__mul__"], [37, 2, 1, "", "add_state"], [37, 2, 1, "", "clone"], [37, 2, 1, "", "compute"], [37, 2, 1, "", "reset_state"], [37, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MulticlassF1Score": [[38, 2, 1, "", "__add__"], [38, 2, 1, "", "__call__"], [38, 2, 1, "", "__init__"], [38, 2, 1, "", "__mul__"], [38, 2, 1, "", "add_state"], [38, 2, 1, "", "clone"], [38, 2, 1, "", "compute"], [38, 2, 1, "", "reset_state"], [38, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore": [[39, 2, 1, "", "__add__"], [39, 2, 1, "", "__call__"], [39, 2, 1, "", "__init__"], [39, 2, 1, "", "__mul__"], [39, 2, 1, "", "add_state"], [39, 2, 1, "", "clone"], [39, 2, 1, "", "compute"], [39, 2, 1, "", "reset_state"], [39, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MultilabelF1Score": [[40, 2, 1, "", "__add__"], [40, 2, 1, "", "__call__"], [40, 2, 1, "", "__init__"], [40, 2, 1, "", "__mul__"], [40, 2, 1, "", "add_state"], [40, 2, 1, "", "clone"], [40, 2, 1, "", "compute"], [40, 2, 1, "", "reset_state"], [40, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore": [[41, 2, 1, "", "__add__"], [41, 2, 1, "", "__call__"], [41, 2, 1, "", "__init__"], [41, 2, 1, "", "__mul__"], [41, 2, 1, "", "add_state"], [41, 2, 1, "", "clone"], [41, 2, 1, "", "compute"], [41, 2, 1, "", "reset_state"], [41, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.factory": [[43, 4, 1, "", "create_metric"]], "cyclops.evaluate.metrics.functional": [[44, 0, 0, "-", "accuracy"], [45, 0, 0, "-", "auroc"], [46, 0, 0, "-", "f_beta"], [55, 0, 0, "-", "precision_recall"], [64, 0, 0, "-", "precision_recall_curve"], [65, 0, 0, "-", "roc"], [70, 0, 0, "-", "sensitivity"], [71, 0, 0, "-", "specificity"], [72, 0, 0, "-", "stat_scores"]], "cyclops.evaluate.metrics.functional.f_beta": [[47, 4, 1, "", "binary_f1_score"], [48, 4, 1, "", "binary_fbeta_score"], [49, 4, 1, "", "f1_score"], [50, 4, 1, "", "fbeta_score"], [51, 4, 1, "", "multiclass_f1_score"], [52, 4, 1, "", "multiclass_fbeta_score"], [53, 4, 1, "", "multilabel_f1_score"], [54, 4, 1, "", "multilabel_fbeta_score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[56, 4, 1, "", "binary_precision"], [57, 4, 1, "", "binary_recall"], [58, 4, 1, "", "multiclass_precision"], [59, 4, 1, "", "multiclass_recall"], [60, 4, 1, "", "multilabel_precision"], [61, 4, 1, "", "multilabel_recall"], [62, 4, 1, "", "precision"], [63, 4, 1, "", "recall"]], "cyclops.evaluate.metrics.functional.roc": [[66, 4, 1, "", "binary_roc_curve"], [67, 4, 1, "", "multiclass_roc_curve"], [68, 4, 1, "", "multilabel_roc_curve"], [69, 4, 1, "", "roc_curve"]], "cyclops.evaluate.metrics.metric": [[74, 1, 1, "", "Metric"], [75, 1, 1, "", "MetricCollection"], [76, 1, 1, "", "OperatorMetric"]], "cyclops.evaluate.metrics.metric.Metric": [[74, 2, 1, "", "__add__"], [74, 2, 1, "", "__call__"], [74, 2, 1, "", "__init__"], [74, 2, 1, "", "__mul__"], [74, 2, 1, "", "add_state"], [74, 2, 1, "", "clone"], [74, 2, 1, "", "compute"], [74, 2, 1, "", "reset_state"], [74, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.metric.MetricCollection": [[75, 2, 1, "", "__call__"], [75, 2, 1, "", "__init__"], [75, 2, 1, "", "add_metrics"], [75, 2, 1, "", "clear"], [75, 2, 1, "", "clone"], [75, 2, 1, "", "compute"], [75, 2, 1, "", "get"], [75, 2, 1, "", "items"], [75, 2, 1, "", "keys"], [75, 2, 1, "", "pop"], [75, 2, 1, "", "popitem"], [75, 2, 1, "", "reset_state"], [75, 2, 1, "", "setdefault"], [75, 2, 1, "", "update"], [75, 2, 1, "", "update_state"], [75, 2, 1, "", "values"]], "cyclops.evaluate.metrics.metric.OperatorMetric": [[76, 2, 1, "", "__add__"], [76, 2, 1, "", "__call__"], [76, 2, 1, "", "__init__"], [76, 2, 1, "", "__mul__"], [76, 2, 1, "", "add_state"], [76, 2, 1, "", "clone"], [76, 2, 1, "", "compute"], [76, 2, 1, "", "reset_state"], [76, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall": [[78, 1, 1, "", "BinaryPrecision"], [79, 1, 1, "", "BinaryRecall"], [80, 1, 1, "", "MulticlassPrecision"], [81, 1, 1, "", "MulticlassRecall"], [82, 1, 1, "", "MultilabelPrecision"], [83, 1, 1, "", "MultilabelRecall"], [84, 1, 1, "", "Precision"], [85, 1, 1, "", "Recall"]], "cyclops.evaluate.metrics.precision_recall.BinaryPrecision": [[78, 2, 1, "", "__add__"], [78, 2, 1, "", "__call__"], [78, 2, 1, "", "__init__"], [78, 2, 1, "", "__mul__"], [78, 2, 1, "", "add_state"], [78, 2, 1, "", "clone"], [78, 2, 1, "", "compute"], [78, 2, 1, "", "reset_state"], [78, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.BinaryRecall": [[79, 2, 1, "", "__add__"], [79, 2, 1, "", "__call__"], [79, 2, 1, "", "__init__"], [79, 2, 1, "", "__mul__"], [79, 2, 1, "", "add_state"], [79, 2, 1, "", "clone"], [79, 2, 1, "", "compute"], [79, 2, 1, "", "reset_state"], [79, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision": [[80, 2, 1, "", "__add__"], [80, 2, 1, "", "__call__"], [80, 2, 1, "", "__init__"], [80, 2, 1, "", "__mul__"], [80, 2, 1, "", "add_state"], [80, 2, 1, "", "clone"], [80, 2, 1, "", "compute"], [80, 2, 1, "", "reset_state"], [80, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MulticlassRecall": [[81, 2, 1, "", "__add__"], [81, 2, 1, "", "__call__"], [81, 2, 1, "", "__init__"], [81, 2, 1, "", "__mul__"], [81, 2, 1, "", "add_state"], [81, 2, 1, "", "clone"], [81, 2, 1, "", "compute"], [81, 2, 1, "", "reset_state"], [81, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision": [[82, 2, 1, "", "__add__"], [82, 2, 1, "", "__call__"], [82, 2, 1, "", "__init__"], [82, 2, 1, "", "__mul__"], [82, 2, 1, "", "add_state"], [82, 2, 1, "", "clone"], [82, 2, 1, "", "compute"], [82, 2, 1, "", "reset_state"], [82, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MultilabelRecall": [[83, 2, 1, "", "__add__"], [83, 2, 1, "", "__call__"], [83, 2, 1, "", "__init__"], [83, 2, 1, "", "__mul__"], [83, 2, 1, "", "add_state"], [83, 2, 1, "", "clone"], [83, 2, 1, "", "compute"], [83, 2, 1, "", "reset_state"], [83, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.Precision": [[84, 2, 1, "", "__add__"], [84, 2, 1, "", "__call__"], [84, 2, 1, "", "__init__"], [84, 2, 1, "", "__mul__"], [84, 2, 1, "", "add_state"], [84, 2, 1, "", "clone"], [84, 2, 1, "", "compute"], [84, 2, 1, "", "reset_state"], [84, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.Recall": [[85, 2, 1, "", "__add__"], [85, 2, 1, "", "__call__"], [85, 2, 1, "", "__init__"], [85, 2, 1, "", "__mul__"], [85, 2, 1, "", "add_state"], [85, 2, 1, "", "clone"], [85, 2, 1, "", "compute"], [85, 2, 1, "", "reset_state"], [85, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve": [[87, 1, 1, "", "BinaryPrecisionRecallCurve"], [88, 1, 1, "", "MulticlassPrecisionRecallCurve"], [89, 1, 1, "", "MultilabelPrecisionRecallCurve"], [90, 1, 1, "", "PrecisionRecallCurve"]], "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve": [[87, 2, 1, "", "__add__"], [87, 2, 1, "", "__call__"], [87, 2, 1, "", "__init__"], [87, 2, 1, "", "__mul__"], [87, 2, 1, "", "add_state"], [87, 2, 1, "", "clone"], [87, 2, 1, "", "compute"], [87, 2, 1, "", "reset_state"], [87, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve": [[88, 2, 1, "", "__add__"], [88, 2, 1, "", "__call__"], [88, 2, 1, "", "__init__"], [88, 2, 1, "", "__mul__"], [88, 2, 1, "", "add_state"], [88, 2, 1, "", "clone"], [88, 2, 1, "", "compute"], [88, 2, 1, "", "reset_state"], [88, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve": [[89, 2, 1, "", "__add__"], [89, 2, 1, "", "__call__"], [89, 2, 1, "", "__init__"], [89, 2, 1, "", "__mul__"], [89, 2, 1, "", "add_state"], [89, 2, 1, "", "clone"], [89, 2, 1, "", "compute"], [89, 2, 1, "", "reset_state"], [89, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve": [[90, 2, 1, "", "__add__"], [90, 2, 1, "", "__call__"], [90, 2, 1, "", "__init__"], [90, 2, 1, "", "__mul__"], [90, 2, 1, "", "add_state"], [90, 2, 1, "", "clone"], [90, 2, 1, "", "compute"], [90, 2, 1, "", "reset_state"], [90, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc": [[92, 1, 1, "", "BinaryROCCurve"], [93, 1, 1, "", "MulticlassROCCurve"], [94, 1, 1, "", "MultilabelROCCurve"], [95, 1, 1, "", "ROCCurve"]], "cyclops.evaluate.metrics.roc.BinaryROCCurve": [[92, 2, 1, "", "__add__"], [92, 2, 1, "", "__call__"], [92, 2, 1, "", "__init__"], [92, 2, 1, "", "__mul__"], [92, 2, 1, "", "add_state"], [92, 2, 1, "", "clone"], [92, 2, 1, "", "compute"], [92, 2, 1, "", "reset_state"], [92, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.MulticlassROCCurve": [[93, 2, 1, "", "__add__"], [93, 2, 1, "", "__call__"], [93, 2, 1, "", "__init__"], [93, 2, 1, "", "__mul__"], [93, 2, 1, "", "add_state"], [93, 2, 1, "", "clone"], [93, 2, 1, "", "compute"], [93, 2, 1, "", "reset_state"], [93, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.MultilabelROCCurve": [[94, 2, 1, "", "__add__"], [94, 2, 1, "", "__call__"], [94, 2, 1, "", "__init__"], [94, 2, 1, "", "__mul__"], [94, 2, 1, "", "add_state"], [94, 2, 1, "", "clone"], [94, 2, 1, "", "compute"], [94, 2, 1, "", "reset_state"], [94, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.ROCCurve": [[95, 2, 1, "", "__add__"], [95, 2, 1, "", "__call__"], [95, 2, 1, "", "__init__"], [95, 2, 1, "", "__mul__"], [95, 2, 1, "", "add_state"], [95, 2, 1, "", "clone"], [95, 2, 1, "", "compute"], [95, 2, 1, "", "reset_state"], [95, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity": [[97, 1, 1, "", "BinarySensitivity"], [98, 1, 1, "", "MulticlassSensitivity"], [99, 1, 1, "", "MultilabelSensitivity"], [100, 1, 1, "", "Sensitivity"]], "cyclops.evaluate.metrics.sensitivity.BinarySensitivity": [[97, 2, 1, "", "__add__"], [97, 2, 1, "", "__call__"], [97, 2, 1, "", "__init__"], [97, 2, 1, "", "__mul__"], [97, 2, 1, "", "add_state"], [97, 2, 1, "", "clone"], [97, 2, 1, "", "compute"], [97, 2, 1, "", "reset_state"], [97, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity": [[98, 2, 1, "", "__add__"], [98, 2, 1, "", "__call__"], [98, 2, 1, "", "__init__"], [98, 2, 1, "", "__mul__"], [98, 2, 1, "", "add_state"], [98, 2, 1, "", "clone"], [98, 2, 1, "", "compute"], [98, 2, 1, "", "reset_state"], [98, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity": [[99, 2, 1, "", "__add__"], [99, 2, 1, "", "__call__"], [99, 2, 1, "", "__init__"], [99, 2, 1, "", "__mul__"], [99, 2, 1, "", "add_state"], [99, 2, 1, "", "clone"], [99, 2, 1, "", "compute"], [99, 2, 1, "", "reset_state"], [99, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.Sensitivity": [[100, 2, 1, "", "__add__"], [100, 2, 1, "", "__call__"], [100, 2, 1, "", "__init__"], [100, 2, 1, "", "__mul__"], [100, 2, 1, "", "add_state"], [100, 2, 1, "", "clone"], [100, 2, 1, "", "compute"], [100, 2, 1, "", "reset_state"], [100, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity": [[102, 1, 1, "", "BinarySpecificity"], [103, 1, 1, "", "MulticlassSpecificity"], [104, 1, 1, "", "MultilabelSpecificity"], [105, 1, 1, "", "Specificity"]], "cyclops.evaluate.metrics.specificity.BinarySpecificity": [[102, 2, 1, "", "__add__"], [102, 2, 1, "", "__call__"], [102, 2, 1, "", "__init__"], [102, 2, 1, "", "__mul__"], [102, 2, 1, "", "add_state"], [102, 2, 1, "", "clone"], [102, 2, 1, "", "compute"], [102, 2, 1, "", "reset_state"], [102, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.MulticlassSpecificity": [[103, 2, 1, "", "__add__"], [103, 2, 1, "", "__call__"], [103, 2, 1, "", "__init__"], [103, 2, 1, "", "__mul__"], [103, 2, 1, "", "add_state"], [103, 2, 1, "", "clone"], [103, 2, 1, "", "compute"], [103, 2, 1, "", "reset_state"], [103, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.MultilabelSpecificity": [[104, 2, 1, "", "__add__"], [104, 2, 1, "", "__call__"], [104, 2, 1, "", "__init__"], [104, 2, 1, "", "__mul__"], [104, 2, 1, "", "add_state"], [104, 2, 1, "", "clone"], [104, 2, 1, "", "compute"], [104, 2, 1, "", "reset_state"], [104, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.Specificity": [[105, 2, 1, "", "__add__"], [105, 2, 1, "", "__call__"], [105, 2, 1, "", "__init__"], [105, 2, 1, "", "__mul__"], [105, 2, 1, "", "add_state"], [105, 2, 1, "", "clone"], [105, 2, 1, "", "compute"], [105, 2, 1, "", "reset_state"], [105, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores": [[107, 1, 1, "", "BinaryStatScores"], [108, 1, 1, "", "MulticlassStatScores"], [109, 1, 1, "", "MultilabelStatScores"], [110, 1, 1, "", "StatScores"]], "cyclops.evaluate.metrics.stat_scores.BinaryStatScores": [[107, 2, 1, "", "__add__"], [107, 2, 1, "", "__call__"], [107, 2, 1, "", "__init__"], [107, 2, 1, "", "__mul__"], [107, 2, 1, "", "add_state"], [107, 2, 1, "", "clone"], [107, 2, 1, "", "compute"], [107, 2, 1, "", "reset_state"], [107, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores": [[108, 2, 1, "", "__add__"], [108, 2, 1, "", "__call__"], [108, 2, 1, "", "__init__"], [108, 2, 1, "", "__mul__"], [108, 2, 1, "", "add_state"], [108, 2, 1, "", "clone"], [108, 2, 1, "", "compute"], [108, 2, 1, "", "reset_state"], [108, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores": [[109, 2, 1, "", "__add__"], [109, 2, 1, "", "__call__"], [109, 2, 1, "", "__init__"], [109, 2, 1, "", "__mul__"], [109, 2, 1, "", "add_state"], [109, 2, 1, "", "clone"], [109, 2, 1, "", "compute"], [109, 2, 1, "", "reset_state"], [109, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.StatScores": [[110, 2, 1, "", "__add__"], [110, 2, 1, "", "__call__"], [110, 2, 1, "", "__init__"], [110, 2, 1, "", "__mul__"], [110, 2, 1, "", "add_state"], [110, 2, 1, "", "clone"], [110, 2, 1, "", "compute"], [110, 2, 1, "", "reset_state"], [110, 2, 1, "", "update_state"]], "cyclops.monitor": [[111, 0, 0, "-", "clinical_applicator"], [113, 0, 0, "-", "synthetic_applicator"]], "cyclops.monitor.clinical_applicator": [[112, 1, 1, "", "ClinicalShiftApplicator"]], "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator": [[112, 2, 1, "", "age"], [112, 2, 1, "", "apply_shift"], [112, 2, 1, "", "custom"], [112, 2, 1, "", "hospital_type"], [112, 2, 1, "", "month"], [112, 2, 1, "", "sex"], [112, 2, 1, "", "time"]], "cyclops.monitor.synthetic_applicator": [[114, 1, 1, "", "SyntheticShiftApplicator"], [115, 4, 1, "", "binary_noise_shift"], [116, 4, 1, "", "feature_association_shift"], [117, 4, 1, "", "feature_swap_shift"], [118, 4, 1, "", "gaussian_noise_shift"], [119, 4, 1, "", "knockout_shift"]], "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator": [[114, 2, 1, "", "apply_shift"]], "cyclops.query": [[120, 0, 0, "-", "base"], [122, 0, 0, "-", "eicu"], [124, 0, 0, "-", "gemini"], [126, 0, 0, "-", "interface"], [129, 0, 0, "-", "mimiciii"], [131, 0, 0, "-", "mimiciv"], [133, 0, 0, "-", "omop"], [135, 0, 0, "-", "ops"]], "cyclops.query.base": [[121, 1, 1, "", "DatasetQuerier"]], "cyclops.query.base.DatasetQuerier": [[121, 2, 1, "", "__init__"], [121, 3, 1, "", "db"], [121, 2, 1, "", "get_interface"], [121, 2, 1, "", "get_table"], [121, 2, 1, "", "list_columns"], [121, 2, 1, "", "list_custom_tables"], [121, 2, 1, "", "list_schemas"], [121, 2, 1, "", "list_tables"]], "cyclops.query.eicu": [[123, 1, 1, "", "EICUQuerier"]], "cyclops.query.eicu.EICUQuerier": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "get_interface"], [123, 2, 1, "", "get_table"], [123, 2, 1, "", "list_columns"], [123, 2, 1, "", "list_custom_tables"], [123, 2, 1, "", "list_schemas"], [123, 2, 1, "", "list_tables"]], "cyclops.query.gemini": [[125, 1, 1, "", "GEMINIQuerier"]], "cyclops.query.gemini.GEMINIQuerier": [[125, 2, 1, "", "__init__"], [125, 2, 1, "", "care_units"], [125, 2, 1, "", "diagnoses"], [125, 2, 1, "", "get_interface"], [125, 2, 1, "", "get_table"], [125, 2, 1, "", "imaging"], [125, 2, 1, "", "ip_admin"], [125, 2, 1, "", "list_columns"], [125, 2, 1, "", "list_custom_tables"], [125, 2, 1, "", "list_schemas"], [125, 2, 1, "", "list_tables"], [125, 2, 1, "", "room_transfer"]], "cyclops.query.interface": [[127, 1, 1, "", "QueryInterface"], [128, 1, 1, "", "QueryInterfaceProcessed"]], "cyclops.query.interface.QueryInterface": [[127, 2, 1, "", "clear_data"], [127, 5, 1, "", "data"], [127, 2, 1, "", "run"], [127, 2, 1, "", "save"]], "cyclops.query.interface.QueryInterfaceProcessed": [[128, 2, 1, "", "clear_data"], [128, 5, 1, "", "data"], [128, 2, 1, "", "run"], [128, 2, 1, "", "save"]], "cyclops.query.mimiciii": [[130, 1, 1, "", "MIMICIIIQuerier"]], "cyclops.query.mimiciii.MIMICIIIQuerier": [[130, 2, 1, "", "__init__"], [130, 2, 1, "", "chartevents"], [130, 2, 1, "", "diagnoses"], [130, 2, 1, "", "get_interface"], [130, 2, 1, "", "get_table"], [130, 2, 1, "", "labevents"], [130, 2, 1, "", "list_columns"], [130, 2, 1, "", "list_custom_tables"], [130, 2, 1, "", "list_schemas"], [130, 2, 1, "", "list_tables"]], "cyclops.query.mimiciv": [[132, 1, 1, "", "MIMICIVQuerier"]], "cyclops.query.mimiciv.MIMICIVQuerier": [[132, 2, 1, "", "__init__"], [132, 2, 1, "", "care_units"], [132, 2, 1, "", "chartevents"], [132, 2, 1, "", "diagnoses"], [132, 2, 1, "", "get_interface"], [132, 2, 1, "", "get_table"], [132, 2, 1, "", "labevents"], [132, 2, 1, "", "list_columns"], [132, 2, 1, "", "list_custom_tables"], [132, 2, 1, "", "list_schemas"], [132, 2, 1, "", "list_tables"], [132, 2, 1, "", "patients"]], "cyclops.query.omop": [[134, 1, 1, "", "OMOPQuerier"]], "cyclops.query.omop.OMOPQuerier": [[134, 2, 1, "", "__init__"], [134, 2, 1, "", "get_interface"], [134, 2, 1, "", "get_table"], [134, 2, 1, "", "list_columns"], [134, 2, 1, "", "list_custom_tables"], [134, 2, 1, "", "list_schemas"], [134, 2, 1, "", "list_tables"], [134, 2, 1, "", "map_concept_ids_to_name"], [134, 2, 1, "", "measurement"], [134, 2, 1, "", "observation"], [134, 2, 1, "", "person"], [134, 2, 1, "", "visit_detail"], [134, 2, 1, "", "visit_occurrence"]], "cyclops.query.ops": [[136, 1, 1, "", "AddColumn"], [137, 1, 1, "", "AddDeltaColumn"], [138, 1, 1, "", "AddDeltaConstant"], [139, 1, 1, "", "AddNumeric"], [140, 1, 1, "", "And"], [141, 1, 1, "", "Apply"], [142, 1, 1, "", "Cast"], [143, 1, 1, "", "ConditionAfterDate"], [144, 1, 1, "", "ConditionBeforeDate"], [145, 1, 1, "", "ConditionEndsWith"], [146, 1, 1, "", "ConditionEquals"], [147, 1, 1, "", "ConditionGreaterThan"], [148, 1, 1, "", "ConditionIn"], [149, 1, 1, "", "ConditionInMonths"], [150, 1, 1, "", "ConditionInYears"], [151, 1, 1, "", "ConditionLessThan"], [152, 1, 1, "", "ConditionLike"], [153, 1, 1, "", "ConditionRegexMatch"], [154, 1, 1, "", "ConditionStartsWith"], [155, 1, 1, "", "ConditionSubstring"], [156, 1, 1, "", "Distinct"], [157, 1, 1, "", "Drop"], [158, 1, 1, "", "DropNulls"], [159, 1, 1, "", "ExtractTimestampComponent"], [160, 1, 1, "", "FillNull"], [161, 1, 1, "", "GroupByAggregate"], [162, 1, 1, "", "Join"], [163, 1, 1, "", "JoinArgs"], [164, 1, 1, "", "Keep"], [165, 1, 1, "", "Limit"], [166, 1, 1, "", "Literal"], [167, 1, 1, "", "Or"], [168, 1, 1, "", "OrderBy"], [169, 1, 1, "", "QueryOp"], [170, 1, 1, "", "RandomizeOrder"], [171, 1, 1, "", "Rename"], [172, 1, 1, "", "Reorder"], [173, 1, 1, "", "ReorderAfter"], [174, 1, 1, "", "Sequential"], [175, 1, 1, "", "Substring"], [176, 1, 1, "", "Trim"], [177, 1, 1, "", "Union"]], "cyclops.query.ops.AddColumn": [[136, 2, 1, "", "__call__"]], "cyclops.query.ops.AddDeltaColumn": [[137, 2, 1, "", "__call__"]], "cyclops.query.ops.AddDeltaConstant": [[138, 2, 1, "", "__call__"]], "cyclops.query.ops.AddNumeric": [[139, 2, 1, "", "__call__"]], "cyclops.query.ops.And": [[140, 2, 1, "", "__call__"]], "cyclops.query.ops.Apply": [[141, 2, 1, "", "__call__"]], "cyclops.query.ops.Cast": [[142, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionAfterDate": [[143, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionBeforeDate": [[144, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionEndsWith": [[145, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionEquals": [[146, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionGreaterThan": [[147, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionIn": [[148, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionInMonths": [[149, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionInYears": [[150, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionLessThan": [[151, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionLike": [[152, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionRegexMatch": [[153, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionStartsWith": [[154, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionSubstring": [[155, 2, 1, "", "__call__"]], "cyclops.query.ops.Distinct": [[156, 2, 1, "", "__call__"]], "cyclops.query.ops.Drop": [[157, 2, 1, "", "__call__"]], "cyclops.query.ops.DropNulls": [[158, 2, 1, "", "__call__"]], "cyclops.query.ops.ExtractTimestampComponent": [[159, 2, 1, "", "__call__"]], "cyclops.query.ops.FillNull": [[160, 2, 1, "", "__call__"]], "cyclops.query.ops.GroupByAggregate": [[161, 2, 1, "", "__call__"]], "cyclops.query.ops.Join": [[162, 2, 1, "", "__call__"]], "cyclops.query.ops.Keep": [[164, 2, 1, "", "__call__"]], "cyclops.query.ops.Limit": [[165, 2, 1, "", "__call__"]], "cyclops.query.ops.Literal": [[166, 2, 1, "", "__call__"]], "cyclops.query.ops.Or": [[167, 2, 1, "", "__call__"]], "cyclops.query.ops.OrderBy": [[168, 2, 1, "", "__call__"]], "cyclops.query.ops.QueryOp": [[169, 2, 1, "", "__call__"]], "cyclops.query.ops.RandomizeOrder": [[170, 2, 1, "", "__call__"]], "cyclops.query.ops.Rename": [[171, 2, 1, "", "__call__"]], "cyclops.query.ops.Reorder": [[172, 2, 1, "", "__call__"]], "cyclops.query.ops.ReorderAfter": [[173, 2, 1, "", "__call__"]], "cyclops.query.ops.Sequential": [[174, 2, 1, "", "__add__"], [174, 2, 1, "", "__call__"], [174, 2, 1, "", "__init__"], [174, 2, 1, "", "append"], [174, 2, 1, "", "extend"], [174, 2, 1, "", "insert"], [174, 2, 1, "", "pop"]], "cyclops.query.ops.Substring": [[175, 2, 1, "", "__call__"]], "cyclops.query.ops.Trim": [[176, 2, 1, "", "__call__"]], "cyclops.query.ops.Union": [[177, 2, 1, "", "__call__"]], "cyclops.report": [[178, 0, 0, "-", "report"]], "cyclops.report.report": [[179, 1, 1, "", "ModelCardReport"]], "cyclops.report.report.ModelCardReport": [[179, 2, 1, "", "export"], [179, 2, 1, "", "from_json_file"], [179, 2, 1, "", "log_citation"], [179, 2, 1, "", "log_dataset"], [179, 2, 1, "", "log_descriptor"], [179, 2, 1, "", "log_fairness_assessment"], [179, 2, 1, "", "log_from_dict"], [179, 2, 1, "", "log_image"], [179, 2, 1, "", "log_license"], [179, 2, 1, "", "log_model_parameters"], [179, 2, 1, "", "log_owner"], [179, 2, 1, "", "log_performance_metrics"], [179, 2, 1, "", "log_plotly_figure"], [179, 2, 1, "", "log_quantitative_analysis"], [179, 2, 1, "", "log_reference"], [179, 2, 1, "", "log_regulation"], [179, 2, 1, "", "log_risk"], [179, 2, 1, "", "log_use_case"], [179, 2, 1, "", "log_user"], [179, 2, 1, "", "log_version"]], "cyclops.tasks": [[180, 0, 0, "-", "cxr_classification"], [182, 0, 0, "-", "mortality_prediction"]], "cyclops.tasks.cxr_classification": [[181, 1, 1, "", "CXRClassificationTask"]], "cyclops.tasks.cxr_classification.CXRClassificationTask": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "add_model"], [181, 5, 1, "", "data_type"], [181, 2, 1, "", "evaluate"], [181, 2, 1, "", "get_model"], [181, 2, 1, "", "list_models"], [181, 5, 1, "", "models_count"], [181, 2, 1, "", "predict"], [181, 5, 1, "", "task_type"]], "cyclops.tasks.mortality_prediction": [[183, 1, 1, "", "MortalityPredictionTask"]], "cyclops.tasks.mortality_prediction.MortalityPredictionTask": [[183, 2, 1, "", "__init__"], [183, 2, 1, "", "add_model"], [183, 5, 1, "", "data_type"], [183, 2, 1, "", "evaluate"], [183, 2, 1, "", "get_model"], [183, 2, 1, "", "list_models"], [183, 2, 1, "", "list_models_params"], [183, 2, 1, "", "load_model"], [183, 5, 1, "", "models_count"], [183, 2, 1, "", "predict"], [183, 2, 1, "", "save_model"], [183, 5, 1, "", "task_type"], [183, 2, 1, "", "train"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"api": [0, 187, 191, 192, 194, 195, 198, 200, 201], "refer": 0, "contribut": [1, 3], "cyclop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 195], "pre": 1, "commit": 1, "hook": 1, "code": 1, "guidelin": 1, "welcom": 2, "": 2, "document": [2, 3], "content": 2, "get": [3, 191, 192, 194, 195, 196, 198], "start": 3, "instal": 3, "us": [3, 195, 197, 202], "pip": 3, "develop": 3, "poetri": 3, "conda": 3, "notebook": 3, "citat": 3, "data": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 184, 193, 199, 202], "featur": [4, 5, 184, 193, 199], "medical_imag": [4, 5], "medicalimag": 5, "slicer": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "slicespec": 7, "compound_filt": 8, "filter_datetim": 9, "filter_non_nul": 10, "filter_rang": 11, "filter_string_contain": 12, "filter_valu": 13, "is_datetim": 14, "overal": 15, "evalu": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 185, 193, 195, 199], "fair": [18, 19, 20, 21, 22, 185], "config": [18, 19], "fairnessconfig": 19, "evaluate_fair": 21, "warn_too_many_unique_valu": 22, "metric": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 185, 196], "accuraci": [23, 24, 25, 26, 27, 44], "binaryaccuraci": 25, "multiclassaccuraci": 26, "multilabelaccuraci": 27, "auroc": [28, 29, 30, 31, 32, 45, 196], "binaryauroc": 30, "multiclassauroc": 31, "multilabelauroc": 32, "f_beta": [33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54], "binaryf1scor": 34, "binaryfbetascor": 35, "f1score": 36, "fbetascor": 37, "multiclassf1scor": 38, "multiclassfbetascor": 39, "multilabelf1scor": 40, "multilabelfbetascor": 41, "factori": [42, 43], "create_metr": 43, "function": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 185], "binary_f1_scor": 47, "binary_fbeta_scor": 48, "f1_score": 49, "fbeta_scor": 50, "multiclass_f1_scor": 51, "multiclass_fbeta_scor": 52, "multilabel_f1_scor": 53, "multilabel_fbeta_scor": 54, "precision_recal": [55, 56, 57, 58, 59, 60, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 84, 85], "binary_precis": 56, "binary_recal": 57, "multiclass_precis": 58, "multiclass_recal": 59, "multilabel_precis": 60, "multilabel_recal": 61, "precis": [62, 84], "recal": [63, 85], "precision_recall_curv": [64, 86, 87, 88, 89, 90], "roc": [65, 66, 67, 68, 69, 91, 92, 93, 94, 95], "binary_roc_curv": 66, "multiclass_roc_curv": 67, "multilabel_roc_curv": 68, "roc_curv": 69, "sensit": [70, 96, 97, 98, 99, 100, 197], "specif": [71, 101, 102, 103, 104, 105], "stat_scor": [72, 106, 107, 108, 109, 110], "metriccollect": 75, "operatormetr": 76, "binaryprecis": 78, "binaryrecal": 79, "multiclassprecis": 80, "multiclassrecal": 81, "multilabelprecis": 82, "multilabelrecal": 83, "binaryprecisionrecallcurv": 87, "multiclassprecisionrecallcurv": 88, "multilabelprecisionrecallcurv": 89, "precisionrecallcurv": 90, "binaryroccurv": 92, "multiclassroccurv": 93, "multilabelroccurv": 94, "roccurv": 95, "binarysensit": 97, "multiclasssensit": 98, "multilabelsensit": 99, "binaryspecif": 102, "multiclassspecif": 103, "multilabelspecif": 104, "binarystatscor": 107, "multiclassstatscor": 108, "multilabelstatscor": 109, "statscor": 110, "monitor": [111, 112, 113, 114, 115, 116, 117, 118, 119, 186, 200], "clinical_appl": [111, 112], "clinicalshiftappl": 112, "synthetic_appl": [113, 114, 115, 116, 117, 118, 119], "syntheticshiftappl": 114, "binary_noise_shift": 115, "feature_association_shift": 116, "feature_swap_shift": 117, "gaussian_noise_shift": 118, "knockout_shift": 119, "queri": [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 187, 191, 192, 194, 195, 198, 199, 201], "base": [120, 121, 195, 199], "datasetqueri": 121, "eicu": [122, 123, 191], "eicuqueri": [123, 191], "gemini": [124, 125, 192], "geminiqueri": [125, 192], "interfac": [126, 127, 128], "queryinterfac": 127, "queryinterfaceprocess": 128, "mimiciii": [129, 130], "mimiciiiqueri": [130, 194], "mimiciv": [131, 132], "mimicivqueri": [132, 195], "omop": [133, 134, 198], "omopqueri": [134, 198], "op": [135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195], "addcolumn": 136, "adddeltacolumn": 137, "adddeltaconst": 138, "addnumer": 139, "And": 140, "appli": 141, "cast": 142, "conditionafterd": 143, "conditionbefored": 144, "conditionendswith": 145, "conditionequ": 146, "conditiongreaterthan": 147, "conditionin": 148, "conditioninmonth": 149, "conditioninyear": 150, "conditionlessthan": 151, "conditionlik": 152, "conditionregexmatch": [153, 195], "conditionstartswith": 154, "conditionsubstr": 155, "distinct": 156, "drop": [157, 199], "dropnul": 158, "extracttimestampcompon": 159, "fillnul": 160, "groupbyaggreg": 161, "join": 162, "joinarg": 163, "keep": [164, 192], "limit": [165, 191], "liter": 166, "Or": 167, "orderbi": 168, "queryop": 169, "randomizeord": 170, "renam": 171, "reorder": 172, "reorderaft": 173, "sequenti": 174, "substr": [175, 191], "trim": 176, "union": 177, "report": [178, 179, 188, 193, 195, 199], "modelcardreport": 179, "task": [180, 181, 182, 183, 189, 193, 199], "cxr_classif": [180, 181], "cxrclassificationtask": 181, "mortality_predict": [182, 183], "mortalitypredictiontask": 183, "dataset": [187, 192, 193, 196, 197, 199], "tutori": [190, 191, 192, 194, 195, 197, 198], "crd": 191, "import": [191, 192, 193, 194, 195, 196, 197, 198, 199], "instanti": [191, 192, 194, 195, 198], "exampl": [191, 192, 194, 195, 197, 198, 202], "1": [191, 192, 194, 195, 197, 198], "all": [191, 194, 195, 198], "femal": [191, 194, 195, 198], "patient": [191, 192, 194, 195, 198], "discharg": [191, 192], "2014": 191, "100": 191, "row": 191, "2": [191, 194, 195, 197, 198], "encount": [191, 192, 194, 195], "diagnos": [191, 194, 195, 198], "schizophrenia": [191, 195], "diagnosisstr": 191, "year": [191, 195], "2015": [191, 192, 195], "3": [191, 194, 195, 197], "potassium": [191, 194], "lab": [191, 194, 195], "test": [191, 192, 194, 195, 196, 197], "teach": 191, "hospit": [191, 192], "4": [191, 194, 195, 197], "glucos": 191, "medic": 191, "search": 191, "1a": 192, "creat": [192, 193, 199], "tabl": 192, "onli": 192, "one": 192, "per": 192, "most": 192, "recent": 192, "each": 192, "sort": 192, "patient_id_hash": 192, "discharge_date_tim": 192, "record": 192, "1b": 192, "from": [192, 195], "abov": 192, "set": 192, "take": 192, "subset": 192, "who": 192, "were": 192, "between": 192, "april": 192, "march": 192, "31": 192, "2016": 192, "1c": 192, "total": 192, "number": 192, "admiss": [192, 195], "2a": 192, "how": 192, "mani": 192, "sodium": 192, "place": 192, "apr": 192, "mai": 192, "smh": 192, "heart": [193, 202], "failur": [193, 202], "predict": [193, 196, 199, 202], "librari": [193, 196, 197, 199], "constant": [193, 199], "load": [193, 196, 197], "sex": [193, 196], "valu": 193, "ag": [193, 196, 199], "distribut": [193, 199], "outcom": [193, 194, 198, 199], "identifi": [193, 199], "type": [193, 199], "preprocessor": [193, 199], "hug": [193, 199], "face": [193, 199], "model": [193, 196, 197, 199], "creation": [193, 199], "train": [193, 197, 199], "perform": [193, 196, 199], "over": [193, 196, 199], "time": [193, 196, 199], "gener": [193, 197, 199], "mimic": [194, 195], "iii": 194, "male": 194, "mortal": [194, 198], "gastroenter": 194, "icd": [194, 195], "9": [194, 195], "long": [194, 195], "titl": [194, 195], "aado2": 194, "carevu": 194, "chart": 194, "event": 194, "have": 194, "valuenum": 194, "less": 194, "than": 194, "20": 194, "iv": 195, "2021": 195, "later": 195, "approx": 195, "10": 195, "advanc": 195, "contain": 195, "chronic": 195, "routin": 195, "vital": 195, "sign": 195, "5": [195, 197], "hemoglobin": 195, "2009": 195, "6": 195, "radiologi": 195, "filter": 195, "keyword": 195, "lymphadenopathi": 195, "infecti": 195, "occur": 195, "togeth": 195, "7": 195, "return": 195, "dask": 195, "datafram": 195, "lazi": 195, "partit": 195, "batch": 195, "aggreg": 195, "subject_id": 195, "8": 195, "run": 195, "raw": 195, "sql": 195, "string": 195, "chest": [196, 202], "x": [196, 202], "rai": [196, 202], "diseas": 196, "classif": [196, 202], "multilabel": 196, "pathologi": 196, "balanc": 196, "error": 196, "rate": 196, "pariti": 196, "log": 196, "w": 196, "threshold": 196, "popul": 196, "card": 196, "field": 196, "nihcxr": 197, "clinic": 197, "drift": 197, "experi": 197, "sourc": 197, "target": 197, "dimension": 197, "reduct": 197, "techniqu": 197, "differ": 197, "shift": 197, "roll": 197, "window": 197, "synthet": 197, "timestamp": 197, "biweekli": 197, "visit": 198, "after": 198, "2010": 198, "measur": 198, "2020": 198, "end": 198, "sepsi": 198, "prolong": [199, 202], "length": [199, 202], "stai": [199, 202], "comput": 199, "label": 199, "inspect": 199, "preprocess": 199, "nan": 199, "nan_threshold": 199, "gender": 199, "case": 202, "tabular": 202, "kaggl": 202, "synthea": 202, "imag": 202, "nih": 202}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Contributing to cyclops": [[1, "contributing-to-cyclops"]], "Pre-commit hooks": [[1, "pre-commit-hooks"]], "Coding guidelines": [[1, "coding-guidelines"]], "Welcome to cyclops\u2019s documentation!": [[2, "welcome-to-cyclops-s-documentation"]], "Contents:": [[2, null]], "\ud83d\udc23 Getting Started": [[3, "getting-started"]], "Installing cyclops using pip": [[3, "installing-cyclops-using-pip"]], "\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udcbb Developing": [[3, "developing"]], "Using poetry": [[3, "using-poetry"]], "Using Conda": [[3, "using-conda"]], "Contributing": [[3, "contributing"]], "\ud83d\udcda Documentation": [[3, "documentation"]], "\ud83d\udcd3 Notebooks": [[3, "notebooks"]], "\ud83c\udf93 Citation": [[3, "citation"]], "cyclops.data.features.medical_image": [[4, "module-cyclops.data.features.medical_image"]], "cyclops.data.features.medical_image.MedicalImage": [[5, "cyclops-data-features-medical-image-medicalimage"]], "cyclops.data.slicer": [[6, "module-cyclops.data.slicer"]], "cyclops.data.slicer.SliceSpec": [[7, "cyclops-data-slicer-slicespec"]], "cyclops.data.slicer.compound_filter": [[8, "cyclops-data-slicer-compound-filter"]], "cyclops.data.slicer.filter_datetime": [[9, "cyclops-data-slicer-filter-datetime"]], "cyclops.data.slicer.filter_non_null": [[10, "cyclops-data-slicer-filter-non-null"]], "cyclops.data.slicer.filter_range": [[11, "cyclops-data-slicer-filter-range"]], "cyclops.data.slicer.filter_string_contains": [[12, "cyclops-data-slicer-filter-string-contains"]], "cyclops.data.slicer.filter_value": [[13, "cyclops-data-slicer-filter-value"]], "cyclops.data.slicer.is_datetime": [[14, "cyclops-data-slicer-is-datetime"]], "cyclops.data.slicer.overall": [[15, "cyclops-data-slicer-overall"]], "cyclops.evaluate.evaluator": [[16, "module-cyclops.evaluate.evaluator"]], "cyclops.evaluate.evaluator.evaluate": [[17, "cyclops-evaluate-evaluator-evaluate"]], "cyclops.evaluate.fairness.config": [[18, "module-cyclops.evaluate.fairness.config"]], "cyclops.evaluate.fairness.config.FairnessConfig": [[19, "cyclops-evaluate-fairness-config-fairnessconfig"]], "cyclops.evaluate.fairness.evaluator": [[20, "module-cyclops.evaluate.fairness.evaluator"]], "cyclops.evaluate.fairness.evaluator.evaluate_fairness": [[21, "cyclops-evaluate-fairness-evaluator-evaluate-fairness"]], "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values": [[22, "cyclops-evaluate-fairness-evaluator-warn-too-many-unique-values"]], "cyclops.evaluate.metrics.accuracy": [[23, "module-cyclops.evaluate.metrics.accuracy"]], "cyclops.evaluate.metrics.accuracy.Accuracy": [[24, "cyclops-evaluate-metrics-accuracy-accuracy"]], "cyclops.evaluate.metrics.accuracy.BinaryAccuracy": [[25, "cyclops-evaluate-metrics-accuracy-binaryaccuracy"]], "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy": [[26, "cyclops-evaluate-metrics-accuracy-multiclassaccuracy"]], "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy": [[27, "cyclops-evaluate-metrics-accuracy-multilabelaccuracy"]], "cyclops.evaluate.metrics.auroc": [[28, "module-cyclops.evaluate.metrics.auroc"]], "cyclops.evaluate.metrics.auroc.AUROC": [[29, "cyclops-evaluate-metrics-auroc-auroc"]], "cyclops.evaluate.metrics.auroc.BinaryAUROC": [[30, "cyclops-evaluate-metrics-auroc-binaryauroc"]], "cyclops.evaluate.metrics.auroc.MulticlassAUROC": [[31, "cyclops-evaluate-metrics-auroc-multiclassauroc"]], "cyclops.evaluate.metrics.auroc.MultilabelAUROC": [[32, "cyclops-evaluate-metrics-auroc-multilabelauroc"]], "cyclops.evaluate.metrics.f_beta": [[33, "module-cyclops.evaluate.metrics.f_beta"]], "cyclops.evaluate.metrics.f_beta.BinaryF1Score": [[34, "cyclops-evaluate-metrics-f-beta-binaryf1score"]], "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore": [[35, "cyclops-evaluate-metrics-f-beta-binaryfbetascore"]], "cyclops.evaluate.metrics.f_beta.F1Score": [[36, "cyclops-evaluate-metrics-f-beta-f1score"]], "cyclops.evaluate.metrics.f_beta.FbetaScore": [[37, "cyclops-evaluate-metrics-f-beta-fbetascore"]], "cyclops.evaluate.metrics.f_beta.MulticlassF1Score": [[38, "cyclops-evaluate-metrics-f-beta-multiclassf1score"]], "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore": [[39, "cyclops-evaluate-metrics-f-beta-multiclassfbetascore"]], "cyclops.evaluate.metrics.f_beta.MultilabelF1Score": [[40, "cyclops-evaluate-metrics-f-beta-multilabelf1score"]], "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore": [[41, "cyclops-evaluate-metrics-f-beta-multilabelfbetascore"]], "cyclops.evaluate.metrics.factory": [[42, "module-cyclops.evaluate.metrics.factory"]], "cyclops.evaluate.metrics.factory.create_metric": [[43, "cyclops-evaluate-metrics-factory-create-metric"]], "cyclops.evaluate.metrics.functional.accuracy": [[44, "module-cyclops.evaluate.metrics.functional.accuracy"]], "cyclops.evaluate.metrics.functional.auroc": [[45, "module-cyclops.evaluate.metrics.functional.auroc"]], "cyclops.evaluate.metrics.functional.f_beta": [[46, "module-cyclops.evaluate.metrics.functional.f_beta"]], "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score": [[47, "cyclops-evaluate-metrics-functional-f-beta-binary-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score": [[48, "cyclops-evaluate-metrics-functional-f-beta-binary-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.f1_score": [[49, "cyclops-evaluate-metrics-functional-f-beta-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.fbeta_score": [[50, "cyclops-evaluate-metrics-functional-f-beta-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score": [[51, "cyclops-evaluate-metrics-functional-f-beta-multiclass-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score": [[52, "cyclops-evaluate-metrics-functional-f-beta-multiclass-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score": [[53, "cyclops-evaluate-metrics-functional-f-beta-multilabel-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score": [[54, "cyclops-evaluate-metrics-functional-f-beta-multilabel-fbeta-score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[55, "module-cyclops.evaluate.metrics.functional.precision_recall"]], "cyclops.evaluate.metrics.functional.precision_recall.binary_precision": [[56, "cyclops-evaluate-metrics-functional-precision-recall-binary-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.binary_recall": [[57, "cyclops-evaluate-metrics-functional-precision-recall-binary-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision": [[58, "cyclops-evaluate-metrics-functional-precision-recall-multiclass-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall": [[59, "cyclops-evaluate-metrics-functional-precision-recall-multiclass-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision": [[60, "cyclops-evaluate-metrics-functional-precision-recall-multilabel-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall": [[61, "cyclops-evaluate-metrics-functional-precision-recall-multilabel-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.precision": [[62, "cyclops-evaluate-metrics-functional-precision-recall-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.recall": [[63, "cyclops-evaluate-metrics-functional-precision-recall-recall"]], "cyclops.evaluate.metrics.functional.precision_recall_curve": [[64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"]], "cyclops.evaluate.metrics.functional.roc": [[65, "module-cyclops.evaluate.metrics.functional.roc"]], "cyclops.evaluate.metrics.functional.roc.binary_roc_curve": [[66, "cyclops-evaluate-metrics-functional-roc-binary-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve": [[67, "cyclops-evaluate-metrics-functional-roc-multiclass-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve": [[68, "cyclops-evaluate-metrics-functional-roc-multilabel-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.roc_curve": [[69, "cyclops-evaluate-metrics-functional-roc-roc-curve"]], "cyclops.evaluate.metrics.functional.sensitivity": [[70, "module-cyclops.evaluate.metrics.functional.sensitivity"]], "cyclops.evaluate.metrics.functional.specificity": [[71, "module-cyclops.evaluate.metrics.functional.specificity"]], "cyclops.evaluate.metrics.functional.stat_scores": [[72, "module-cyclops.evaluate.metrics.functional.stat_scores"]], "cyclops.evaluate.metrics.metric": [[73, "module-cyclops.evaluate.metrics.metric"]], "cyclops.evaluate.metrics.metric.Metric": [[74, "cyclops-evaluate-metrics-metric-metric"]], "cyclops.evaluate.metrics.metric.MetricCollection": [[75, "cyclops-evaluate-metrics-metric-metriccollection"]], "cyclops.evaluate.metrics.metric.OperatorMetric": [[76, "cyclops-evaluate-metrics-metric-operatormetric"]], "cyclops.evaluate.metrics.precision_recall": [[77, "module-cyclops.evaluate.metrics.precision_recall"]], "cyclops.evaluate.metrics.precision_recall.BinaryPrecision": [[78, "cyclops-evaluate-metrics-precision-recall-binaryprecision"]], "cyclops.evaluate.metrics.precision_recall.BinaryRecall": [[79, "cyclops-evaluate-metrics-precision-recall-binaryrecall"]], "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision": [[80, "cyclops-evaluate-metrics-precision-recall-multiclassprecision"]], "cyclops.evaluate.metrics.precision_recall.MulticlassRecall": [[81, "cyclops-evaluate-metrics-precision-recall-multiclassrecall"]], "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision": [[82, "cyclops-evaluate-metrics-precision-recall-multilabelprecision"]], "cyclops.evaluate.metrics.precision_recall.MultilabelRecall": [[83, "cyclops-evaluate-metrics-precision-recall-multilabelrecall"]], "cyclops.evaluate.metrics.precision_recall.Precision": [[84, "cyclops-evaluate-metrics-precision-recall-precision"]], "cyclops.evaluate.metrics.precision_recall.Recall": [[85, "cyclops-evaluate-metrics-precision-recall-recall"]], "cyclops.evaluate.metrics.precision_recall_curve": [[86, "module-cyclops.evaluate.metrics.precision_recall_curve"]], "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve": [[87, "cyclops-evaluate-metrics-precision-recall-curve-binaryprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve": [[88, "cyclops-evaluate-metrics-precision-recall-curve-multiclassprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve": [[89, "cyclops-evaluate-metrics-precision-recall-curve-multilabelprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve": [[90, "cyclops-evaluate-metrics-precision-recall-curve-precisionrecallcurve"]], "cyclops.evaluate.metrics.roc": [[91, "module-cyclops.evaluate.metrics.roc"]], "cyclops.evaluate.metrics.roc.BinaryROCCurve": [[92, "cyclops-evaluate-metrics-roc-binaryroccurve"]], "cyclops.evaluate.metrics.roc.MulticlassROCCurve": [[93, "cyclops-evaluate-metrics-roc-multiclassroccurve"]], "cyclops.evaluate.metrics.roc.MultilabelROCCurve": [[94, "cyclops-evaluate-metrics-roc-multilabelroccurve"]], "cyclops.evaluate.metrics.roc.ROCCurve": [[95, "cyclops-evaluate-metrics-roc-roccurve"]], "cyclops.evaluate.metrics.sensitivity": [[96, "module-cyclops.evaluate.metrics.sensitivity"]], "cyclops.evaluate.metrics.sensitivity.BinarySensitivity": [[97, "cyclops-evaluate-metrics-sensitivity-binarysensitivity"]], "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity": [[98, "cyclops-evaluate-metrics-sensitivity-multiclasssensitivity"]], "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity": [[99, "cyclops-evaluate-metrics-sensitivity-multilabelsensitivity"]], "cyclops.evaluate.metrics.sensitivity.Sensitivity": [[100, "cyclops-evaluate-metrics-sensitivity-sensitivity"]], "cyclops.evaluate.metrics.specificity": [[101, "module-cyclops.evaluate.metrics.specificity"]], "cyclops.evaluate.metrics.specificity.BinarySpecificity": [[102, "cyclops-evaluate-metrics-specificity-binaryspecificity"]], "cyclops.evaluate.metrics.specificity.MulticlassSpecificity": [[103, "cyclops-evaluate-metrics-specificity-multiclassspecificity"]], "cyclops.evaluate.metrics.specificity.MultilabelSpecificity": [[104, "cyclops-evaluate-metrics-specificity-multilabelspecificity"]], "cyclops.evaluate.metrics.specificity.Specificity": [[105, "cyclops-evaluate-metrics-specificity-specificity"]], "cyclops.evaluate.metrics.stat_scores": [[106, "module-cyclops.evaluate.metrics.stat_scores"]], "cyclops.evaluate.metrics.stat_scores.BinaryStatScores": [[107, "cyclops-evaluate-metrics-stat-scores-binarystatscores"]], "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores": [[108, "cyclops-evaluate-metrics-stat-scores-multiclassstatscores"]], "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores": [[109, "cyclops-evaluate-metrics-stat-scores-multilabelstatscores"]], "cyclops.evaluate.metrics.stat_scores.StatScores": [[110, "cyclops-evaluate-metrics-stat-scores-statscores"]], "cyclops.monitor.clinical_applicator": [[111, "module-cyclops.monitor.clinical_applicator"]], "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator": [[112, "cyclops-monitor-clinical-applicator-clinicalshiftapplicator"]], "cyclops.monitor.synthetic_applicator": [[113, "module-cyclops.monitor.synthetic_applicator"]], "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator": [[114, "cyclops-monitor-synthetic-applicator-syntheticshiftapplicator"]], "cyclops.monitor.synthetic_applicator.binary_noise_shift": [[115, "cyclops-monitor-synthetic-applicator-binary-noise-shift"]], "cyclops.monitor.synthetic_applicator.feature_association_shift": [[116, "cyclops-monitor-synthetic-applicator-feature-association-shift"]], "cyclops.monitor.synthetic_applicator.feature_swap_shift": [[117, "cyclops-monitor-synthetic-applicator-feature-swap-shift"]], "cyclops.monitor.synthetic_applicator.gaussian_noise_shift": [[118, "cyclops-monitor-synthetic-applicator-gaussian-noise-shift"]], "cyclops.monitor.synthetic_applicator.knockout_shift": [[119, "cyclops-monitor-synthetic-applicator-knockout-shift"]], "cyclops.query.base": [[120, "module-cyclops.query.base"]], "cyclops.query.base.DatasetQuerier": [[121, "cyclops-query-base-datasetquerier"]], "cyclops.query.eicu": [[122, "module-cyclops.query.eicu"]], "cyclops.query.eicu.EICUQuerier": [[123, "cyclops-query-eicu-eicuquerier"]], "cyclops.query.gemini": [[124, "module-cyclops.query.gemini"]], "cyclops.query.gemini.GEMINIQuerier": [[125, "cyclops-query-gemini-geminiquerier"]], "cyclops.query.interface": [[126, "module-cyclops.query.interface"]], "cyclops.query.interface.QueryInterface": [[127, "cyclops-query-interface-queryinterface"]], "cyclops.query.interface.QueryInterfaceProcessed": [[128, "cyclops-query-interface-queryinterfaceprocessed"]], "cyclops.query.mimiciii": [[129, "module-cyclops.query.mimiciii"]], "cyclops.query.mimiciii.MIMICIIIQuerier": [[130, "cyclops-query-mimiciii-mimiciiiquerier"]], "cyclops.query.mimiciv": [[131, "module-cyclops.query.mimiciv"]], "cyclops.query.mimiciv.MIMICIVQuerier": [[132, "cyclops-query-mimiciv-mimicivquerier"]], "cyclops.query.omop": [[133, "module-cyclops.query.omop"]], "cyclops.query.omop.OMOPQuerier": [[134, "cyclops-query-omop-omopquerier"]], "cyclops.query.ops": [[135, "module-cyclops.query.ops"]], "cyclops.query.ops.AddColumn": [[136, "cyclops-query-ops-addcolumn"]], "cyclops.query.ops.AddDeltaColumn": [[137, "cyclops-query-ops-adddeltacolumn"]], "cyclops.query.ops.AddDeltaConstant": [[138, "cyclops-query-ops-adddeltaconstant"]], "cyclops.query.ops.AddNumeric": [[139, "cyclops-query-ops-addnumeric"]], "cyclops.query.ops.And": [[140, "cyclops-query-ops-and"]], "cyclops.query.ops.Apply": [[141, "cyclops-query-ops-apply"]], "cyclops.query.ops.Cast": [[142, "cyclops-query-ops-cast"]], "cyclops.query.ops.ConditionAfterDate": [[143, "cyclops-query-ops-conditionafterdate"]], "cyclops.query.ops.ConditionBeforeDate": [[144, "cyclops-query-ops-conditionbeforedate"]], "cyclops.query.ops.ConditionEndsWith": [[145, "cyclops-query-ops-conditionendswith"]], "cyclops.query.ops.ConditionEquals": [[146, "cyclops-query-ops-conditionequals"]], "cyclops.query.ops.ConditionGreaterThan": [[147, "cyclops-query-ops-conditiongreaterthan"]], "cyclops.query.ops.ConditionIn": [[148, "cyclops-query-ops-conditionin"]], "cyclops.query.ops.ConditionInMonths": [[149, "cyclops-query-ops-conditioninmonths"]], "cyclops.query.ops.ConditionInYears": [[150, "cyclops-query-ops-conditioninyears"]], "cyclops.query.ops.ConditionLessThan": [[151, "cyclops-query-ops-conditionlessthan"]], "cyclops.query.ops.ConditionLike": [[152, "cyclops-query-ops-conditionlike"]], "cyclops.query.ops.ConditionRegexMatch": [[153, "cyclops-query-ops-conditionregexmatch"]], "cyclops.query.ops.ConditionStartsWith": [[154, "cyclops-query-ops-conditionstartswith"]], "cyclops.query.ops.ConditionSubstring": [[155, "cyclops-query-ops-conditionsubstring"]], "cyclops.query.ops.Distinct": [[156, "cyclops-query-ops-distinct"]], "cyclops.query.ops.Drop": [[157, "cyclops-query-ops-drop"]], "cyclops.query.ops.DropNulls": [[158, "cyclops-query-ops-dropnulls"]], "cyclops.query.ops.ExtractTimestampComponent": [[159, "cyclops-query-ops-extracttimestampcomponent"]], "cyclops.query.ops.FillNull": [[160, "cyclops-query-ops-fillnull"]], "cyclops.query.ops.GroupByAggregate": [[161, "cyclops-query-ops-groupbyaggregate"]], "cyclops.query.ops.Join": [[162, "cyclops-query-ops-join"]], "cyclops.query.ops.JoinArgs": [[163, "cyclops-query-ops-joinargs"]], "cyclops.query.ops.Keep": [[164, "cyclops-query-ops-keep"]], "cyclops.query.ops.Limit": [[165, "cyclops-query-ops-limit"]], "cyclops.query.ops.Literal": [[166, "cyclops-query-ops-literal"]], "cyclops.query.ops.Or": [[167, "cyclops-query-ops-or"]], "cyclops.query.ops.OrderBy": [[168, "cyclops-query-ops-orderby"]], "cyclops.query.ops.QueryOp": [[169, "cyclops-query-ops-queryop"]], "cyclops.query.ops.RandomizeOrder": [[170, "cyclops-query-ops-randomizeorder"]], "cyclops.query.ops.Rename": [[171, "cyclops-query-ops-rename"]], "cyclops.query.ops.Reorder": [[172, "cyclops-query-ops-reorder"]], "cyclops.query.ops.ReorderAfter": [[173, "cyclops-query-ops-reorderafter"]], "cyclops.query.ops.Sequential": [[174, "cyclops-query-ops-sequential"]], "cyclops.query.ops.Substring": [[175, "cyclops-query-ops-substring"]], "cyclops.query.ops.Trim": [[176, "cyclops-query-ops-trim"]], "cyclops.query.ops.Union": [[177, "cyclops-query-ops-union"]], "cyclops.report.report": [[178, "module-cyclops.report.report"]], "cyclops.report.report.ModelCardReport": [[179, "cyclops-report-report-modelcardreport"]], "cyclops.tasks.cxr_classification": [[180, "module-cyclops.tasks.cxr_classification"]], "cyclops.tasks.cxr_classification.CXRClassificationTask": [[181, "cyclops-tasks-cxr-classification-cxrclassificationtask"]], "cyclops.tasks.mortality_prediction": [[182, "module-cyclops.tasks.mortality_prediction"]], "cyclops.tasks.mortality_prediction.MortalityPredictionTask": [[183, "cyclops-tasks-mortality-prediction-mortalitypredictiontask"]], "cyclops.data": [[184, "module-cyclops.data"]], "cyclops.data.features": [[184, "module-cyclops.data.features"]], "cyclops.evaluate": [[185, "module-cyclops.evaluate"]], "cyclops.evaluate.metrics": [[185, "module-cyclops.evaluate.metrics"]], "cyclops.evaluate.metrics.functional": [[185, "module-cyclops.evaluate.metrics.functional"]], "cyclops.evaluate.fairness": [[185, "module-cyclops.evaluate.fairness"]], "cyclops.monitor": [[186, "module-cyclops.monitor"]], "cyclops.query": [[187, "module-cyclops.query"]], "dataset APIs": [[187, "dataset-apis"]], "cyclops.report": [[188, "module-cyclops.report"]], "cyclops.tasks": [[189, "module-cyclops.tasks"]], "Tutorials": [[190, "tutorials"]], "eICU-CRD query API tutorial": [[191, "eICU-CRD-query-API-tutorial"]], "Imports and instantiate EICUQuerier": [[191, "Imports-and-instantiate-EICUQuerier"]], "Example 1. Get all female patients discharged in 2014 (limit to 100 rows).": [[191, "Example-1.-Get-all-female-patients-discharged-in-2014-(limit-to-100-rows)."]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in diagnosisstring), discharged in the year 2015.": [[191, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-diagnosisstring),-discharged-in-the-year-2015."]], "Example 3. Get potassium lab tests for patients discharged in the year 2014, for all teaching hospitals.": [[191, "Example-3.-Get-potassium-lab-tests-for-patients-discharged-in-the-year-2014,-for-all-teaching-hospitals."]], "Example 4. Get glucose medications (substring search) for female patients discharged in 2014.": [[191, "Example-4.-Get-glucose-medications-(substring-search)-for-female-patients-discharged-in-2014."]], "GEMINI query API tutorial": [[192, "GEMINI-query-API-tutorial"]], "Imports and instantiate GEMINIQuerier.": [[192, "Imports-and-instantiate-GEMINIQuerier."]], "Example 1a. Create a table with only one hospitalization per patient, keeping the most recent encounter for each patient. Sort the dataset by patient_id_hashed and discharge_date_time, and then keep the recent record.": [[192, "Example-1a.-Create-a-table-with-only-one-hospitalization-per-patient,-keeping-the-most-recent-encounter-for-each-patient.-Sort-the-dataset-by-patient_id_hashed-and-discharge_date_time,-and-then-keep-the-recent-record."]], "Example 1b. From the above set of encounters, take a subset of patients who were discharged between April 1, 2015 and March 31, 2016.": [[192, "Example-1b.-From-the-above-set-of-encounters,-take-a-subset-of-patients-who-were-discharged-between-April-1,-2015-and-March-31,-2016."]], "Example 1c. From the above set of encounters, get the total number of admissions for each hospital.": [[192, "Example-1c.-From-the-above-set-of-encounters,-get-the-total-number-of-admissions-for-each-hospital."]], "Example 2a. How many sodium tests were placed between Apr 1, 2015 and May 31, 2015 at SMH?": [[192, "Example-2a.-How-many-sodium-tests-were-placed-between-Apr-1,-2015-and-May-31,-2015-at-SMH?"]], "Heart Failure Prediction": [[193, "Heart-Failure-Prediction"]], "Import Libraries": [[193, "Import-Libraries"], [196, "Import-Libraries"], [199, "Import-Libraries"]], "Constants": [[193, "Constants"], [199, "Constants"]], "Data Loading": [[193, "Data-Loading"]], "Sex values": [[193, "Sex-values"]], "Age distribution": [[193, "Age-distribution"], [199, "Age-distribution"]], "Outcome distribution": [[193, "Outcome-distribution"], [199, "Outcome-distribution"]], "Identifying feature types": [[193, "Identifying-feature-types"], [199, "Identifying-feature-types"]], "Creating data preprocessors": [[193, "Creating-data-preprocessors"], [199, "Creating-data-preprocessors"]], "Creating Hugging Face Dataset": [[193, "Creating-Hugging-Face-Dataset"], [199, "Creating-Hugging-Face-Dataset"]], "Model Creation": [[193, "Model-Creation"], [199, "Model-Creation"]], "Task Creation": [[193, "Task-Creation"], [199, "Task-Creation"]], "Training": [[193, "Training"], [199, "Training"]], "Prediction": [[193, "Prediction"], [199, "Prediction"]], "Evaluation": [[193, "Evaluation"], [199, "Evaluation"]], "Performance over time": [[193, "Performance-over-time"], [196, "Performance-over-time"], [199, "Performance-over-time"]], "Report Generation": [[193, "Report-Generation"], [199, "Report-Generation"]], "MIMIC-III query API tutorial": [[194, "MIMIC-III-query-API-tutorial"]], "Imports and instantiate MIMICIIIQuerier": [[194, "Imports-and-instantiate-MIMICIIIQuerier"]], "Example 1. Get all male patients with a mortality outcome.": [[194, "Example-1.-Get-all-male-patients-with-a-mortality-outcome."]], "Example 2. Get all female patient encounters with diagnoses (gastroenteritis in ICD-9 long title).": [[194, "Example-2.-Get-all-female-patient-encounters-with-diagnoses-(gastroenteritis-in-ICD-9-long-title)."]], "Example 3. Get potassium lab tests for female patient encounters.": [[194, "Example-3.-Get-potassium-lab-tests-for-female-patient-encounters."]], "Example 4. Get AaDO2 carevue chart events for male patients that have a valuenum of less than 20.": [[194, "Example-4.-Get-AaDO2-carevue-chart-events-for-male-patients-that-have-a-valuenum-of-less-than-20."]], "MIMIC-IV query API tutorial": [[195, "MIMIC-IV-query-API-tutorial"]], "Imports and instantiate MIMICIVQuerier": [[195, "Imports-and-instantiate-MIMICIVQuerier"]], "Example 1. Get all patient admissions from 2021 or later (approx year of admission)": [[195, "Example-1.-Get-all-patient-admissions-from-2021-or-later-(approx-year-of-admission)"]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in ICD-10 long title), in the year 2015.": [[195, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-ICD-10-long-title),-in-the-year-2015."]], "Example 3. Advanced - uses ConditionRegexMatch from cyclops.query.ops. Get all patient encounters with diagnoses (ICD-9 long title contains schizophrenia and chronic ), in the year 2015.": [[195, "Example-3.-Advanced---uses-ConditionRegexMatch-from-cyclops.query.ops.-Get-all-patient-encounters-with-diagnoses-(ICD-9-long-title-contains-schizophrenia-and-chronic-),-in-the-year-2015."]], "Example 4. Get routine vital signs for patients from year 2015.": [[195, "Example-4.-Get-routine-vital-signs-for-patients-from-year-2015."]], "Example 5. Get hemoglobin lab tests for patients from year 2009.": [[195, "Example-5.-Get-hemoglobin-lab-tests-for-patients-from-year-2009."]], "Example 6. Get radiology reports and filter on keywords lymphadenopathy and infectious occurring together.": [[195, "Example-6.-Get-radiology-reports-and-filter-on-keywords-lymphadenopathy-and-infectious-occurring-together."]], "Example 7. Get all female patient encounters from year 2015, and return as dask dataframe (lazy evaluation) with 4 partitions (batches) aggregated based on subject_id.": [[195, "Example-7.-Get-all-female-patient-encounters-from-year-2015,-and-return-as-dask-dataframe-(lazy-evaluation)-with-4-partitions-(batches)-aggregated-based-on-subject_id."]], "Example 8. Running a raw SQL string.": [[195, "Example-8.-Running-a-raw-SQL-string."]], "Chest X-Ray Disease Classification": [[196, "Chest-X-Ray-Disease-Classification"]], "Load Dataset": [[196, "Load-Dataset"]], "Load Model and get Predictions": [[196, "Load-Model-and-get-Predictions"]], "Multilabel AUROC by Pathology and Sex": [[196, "Multilabel-AUROC-by-Pathology-and-Sex"]], "Multilabel AUROC by Pathology and Age": [[196, "Multilabel-AUROC-by-Pathology-and-Age"]], "Balanced Error Rate by Pathology and Age": [[196, "Balanced-Error-Rate-by-Pathology-and-Age"]], "Balanced Error Rate Parity by Pathology and Age": [[196, "Balanced-Error-Rate-Parity-by-Pathology-and-Age"]], "Log Performance Metrics as Tests w/ Thresholds": [[196, "Log-Performance-Metrics-as-Tests-w/-Thresholds"]], "Populate Model Card Fields": [[196, "Populate-Model-Card-Fields"]], "NIHCXR Clinical Drift Experiments Tutorial": [[197, "NIHCXR-Clinical-Drift-Experiments-Tutorial"]], "Import Libraries and Load NIHCXR Dataset": [[197, "Import-Libraries-and-Load-NIHCXR-Dataset"]], "Example 1. Generate Source/Target Dataset for Experiments (1-2)": [[197, "Example-1.-Generate-Source/Target-Dataset-for-Experiments-(1-2)"]], "Example 2. Sensitivity test experiment with 3 dimensionality reduction techniques": [[197, "Example-2.-Sensitivity-test-experiment-with-3-dimensionality-reduction-techniques"]], "Example 3. Sensitivity test experiment with models trained on different datasets": [[197, "Example-3.-Sensitivity-test-experiment-with-models-trained-on-different-datasets"]], "Example 4. Sensitivity test experiment with different clinical shifts": [[197, "Example-4.-Sensitivity-test-experiment-with-different-clinical-shifts"]], "Example 5. Rolling window experiment with synthetic timestamps using biweekly window": [[197, "Example-5.-Rolling-window-experiment-with-synthetic-timestamps-using-biweekly-window"]], "OMOP query API tutorial": [[198, "OMOP-query-API-tutorial"]], "Imports and instantiate OMOPQuerier.": [[198, "Imports-and-instantiate-OMOPQuerier."], [198, "id1"]], "Example 1. Get all patient visits in or after 2010.": [[198, "Example-1.-Get-all-patient-visits-in-or-after-2010."]], "Example 2. Get measurements for all visits in or after 2020.": [[198, "Example-2.-Get-measurements-for-all-visits-in-or-after-2020."]], "Example 1. Get all patient visits that ended in a mortality outcome in or after 2010.": [[198, "Example-1.-Get-all-patient-visits-that-ended-in-a-mortality-outcome-in-or-after-2010."]], "Example 2. Get all measurements for female patient visits with sepsis diagnoses, that ended in a mortality outcome.": [[198, "Example-2.-Get-all-measurements-for-female-patient-visits-with-sepsis-diagnoses,-that-ended-in-a-mortality-outcome."]], "Prolonged Length of Stay Prediction": [[199, "Prolonged-Length-of-Stay-Prediction"]], "Data Querying": [[199, "Data-Querying"]], "Compute length of stay (labels)": [[199, "Compute-length-of-stay-(labels)"]], "Data Inspection and Preprocessing": [[199, "Data-Inspection-and-Preprocessing"]], "Drop NaNs based on the NAN_THRESHOLD": [[199, "Drop-NaNs-based-on-the-NAN_THRESHOLD"]], "Length of stay distribution": [[199, "Length-of-stay-distribution"]], "Gender distribution": [[199, "Gender-distribution"]], "monitor API": [[200, "monitor-api"]], "query API": [[201, "query-api"]], "Example use cases": [[202, "example-use-cases"]], "Tabular data": [[202, "tabular-data"]], "Kaggle Heart Failure Prediction": [[202, "kaggle-heart-failure-prediction"]], "Synthea Prolonged Length of Stay Prediction": [[202, "synthea-prolonged-length-of-stay-prediction"]], "Image data": [[202, "image-data"]], "NIH Chest X-ray classification": [[202, "nih-chest-x-ray-classification"]]}, "indexentries": {"cyclops.data.features.medical_image": [[4, "module-cyclops.data.features.medical_image"]], "module": [[4, "module-cyclops.data.features.medical_image"], [6, "module-cyclops.data.slicer"], [16, "module-cyclops.evaluate.evaluator"], [18, "module-cyclops.evaluate.fairness.config"], [20, "module-cyclops.evaluate.fairness.evaluator"], [23, "module-cyclops.evaluate.metrics.accuracy"], [28, "module-cyclops.evaluate.metrics.auroc"], [33, "module-cyclops.evaluate.metrics.f_beta"], [42, "module-cyclops.evaluate.metrics.factory"], [44, "module-cyclops.evaluate.metrics.functional.accuracy"], [45, "module-cyclops.evaluate.metrics.functional.auroc"], [46, "module-cyclops.evaluate.metrics.functional.f_beta"], [55, "module-cyclops.evaluate.metrics.functional.precision_recall"], [64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"], [65, "module-cyclops.evaluate.metrics.functional.roc"], [70, "module-cyclops.evaluate.metrics.functional.sensitivity"], [71, "module-cyclops.evaluate.metrics.functional.specificity"], [72, "module-cyclops.evaluate.metrics.functional.stat_scores"], [73, "module-cyclops.evaluate.metrics.metric"], [77, "module-cyclops.evaluate.metrics.precision_recall"], [86, "module-cyclops.evaluate.metrics.precision_recall_curve"], [91, "module-cyclops.evaluate.metrics.roc"], [96, "module-cyclops.evaluate.metrics.sensitivity"], [101, "module-cyclops.evaluate.metrics.specificity"], [106, "module-cyclops.evaluate.metrics.stat_scores"], [111, "module-cyclops.monitor.clinical_applicator"], [113, "module-cyclops.monitor.synthetic_applicator"], [120, "module-cyclops.query.base"], [122, "module-cyclops.query.eicu"], [124, "module-cyclops.query.gemini"], [126, "module-cyclops.query.interface"], [129, "module-cyclops.query.mimiciii"], [131, "module-cyclops.query.mimiciv"], [133, "module-cyclops.query.omop"], [135, "module-cyclops.query.ops"], [178, "module-cyclops.report.report"], [180, "module-cyclops.tasks.cxr_classification"], [182, "module-cyclops.tasks.mortality_prediction"], [184, "module-cyclops.data"], [184, "module-cyclops.data.features"], [185, "module-cyclops.evaluate"], [185, "module-cyclops.evaluate.fairness"], [185, "module-cyclops.evaluate.metrics"], [185, "module-cyclops.evaluate.metrics.functional"], [186, "module-cyclops.monitor"], [187, "module-cyclops.query"], [188, "module-cyclops.report"], [189, "module-cyclops.tasks"]], "medicalimage (class in cyclops.data.features.medical_image)": [[5, "cyclops.data.features.medical_image.MedicalImage"]], "__call__() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.__call__"]], "cast_storage() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.cast_storage"]], "decode_example() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.decode_example"]], "embed_storage() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.embed_storage"]], "encode_example() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.encode_example"]], "flatten() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.flatten"]], "cyclops.data.slicer": [[6, "module-cyclops.data.slicer"]], "slicespec (class in cyclops.data.slicer)": [[7, "cyclops.data.slicer.SliceSpec"]], "_registry (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec._registry"]], "add_slice_spec() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.add_slice_spec"]], "column_names (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.column_names"]], "get_slices() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.get_slices"]], "slices() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.slices"]], "spec_list (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.spec_list"]], "validate (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.validate"]], "compound_filter() (in module cyclops.data.slicer)": [[8, "cyclops.data.slicer.compound_filter"]], "filter_datetime() (in module cyclops.data.slicer)": [[9, "cyclops.data.slicer.filter_datetime"]], "filter_non_null() (in module cyclops.data.slicer)": [[10, "cyclops.data.slicer.filter_non_null"]], "filter_range() (in module cyclops.data.slicer)": [[11, "cyclops.data.slicer.filter_range"]], "filter_string_contains() (in module cyclops.data.slicer)": [[12, "cyclops.data.slicer.filter_string_contains"]], "filter_value() (in module cyclops.data.slicer)": [[13, "cyclops.data.slicer.filter_value"]], "is_datetime() (in module cyclops.data.slicer)": [[14, "cyclops.data.slicer.is_datetime"]], "overall() (in module cyclops.data.slicer)": [[15, "cyclops.data.slicer.overall"]], "cyclops.evaluate.evaluator": [[16, "module-cyclops.evaluate.evaluator"]], "evaluate() (in module cyclops.evaluate.evaluator)": [[17, "cyclops.evaluate.evaluator.evaluate"]], "cyclops.evaluate.fairness.config": [[18, "module-cyclops.evaluate.fairness.config"]], "fairnessconfig (class in cyclops.evaluate.fairness.config)": [[19, "cyclops.evaluate.fairness.config.FairnessConfig"]], "cyclops.evaluate.fairness.evaluator": [[20, "module-cyclops.evaluate.fairness.evaluator"]], "evaluate_fairness() (in module cyclops.evaluate.fairness.evaluator)": [[21, "cyclops.evaluate.fairness.evaluator.evaluate_fairness"]], "warn_too_many_unique_values() (in module cyclops.evaluate.fairness.evaluator)": [[22, "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values"]], "cyclops.evaluate.metrics.accuracy": [[23, "module-cyclops.evaluate.metrics.accuracy"]], "accuracy (class in cyclops.evaluate.metrics.accuracy)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy"]], "__add__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__add__"]], "__call__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__call__"]], "__init__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__init__"]], "__mul__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__mul__"]], "add_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.add_state"]], "clone() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.clone"]], "compute() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.compute"]], "reset_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.reset_state"]], "update_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.update_state"]], "binaryaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy"]], "__add__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__add__"]], "__call__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__call__"]], "__init__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__init__"]], "__mul__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__mul__"]], "add_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.add_state"]], "clone() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.clone"]], "compute() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.compute"]], "reset_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.reset_state"]], "update_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.update_state"]], "multiclassaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy"]], "__add__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__add__"]], "__call__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__call__"]], "__init__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__init__"]], "__mul__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__mul__"]], "add_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.add_state"]], "clone() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.clone"]], "compute() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.compute"]], "reset_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.reset_state"]], "update_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.update_state"]], "multilabelaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy"]], "__add__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__add__"]], "__call__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__call__"]], "__init__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__init__"]], "__mul__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__mul__"]], "add_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.add_state"]], "clone() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.clone"]], "compute() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.compute"]], "reset_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.reset_state"]], "update_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.update_state"]], "cyclops.evaluate.metrics.auroc": [[28, "module-cyclops.evaluate.metrics.auroc"]], "auroc (class in cyclops.evaluate.metrics.auroc)": [[29, "cyclops.evaluate.metrics.auroc.AUROC"]], "__add__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__add__"]], "__call__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__call__"]], "__init__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__init__"]], "__mul__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__mul__"]], "add_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.add_state"]], "clone() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.clone"]], "compute() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.compute"]], "reset_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.reset_state"]], "update_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.update_state"]], "binaryauroc (class in cyclops.evaluate.metrics.auroc)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC"]], "__add__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__add__"]], "__call__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__call__"]], "__init__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__init__"]], "__mul__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__mul__"]], "add_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.add_state"]], "clone() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.clone"]], "compute() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.compute"]], "reset_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.reset_state"]], "update_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.update_state"]], "multiclassauroc (class in cyclops.evaluate.metrics.auroc)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC"]], "__add__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__add__"]], "__call__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__call__"]], "__init__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__init__"]], "__mul__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__mul__"]], "add_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.add_state"]], "clone() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.clone"]], "compute() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.compute"]], "reset_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.reset_state"]], "update_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.update_state"]], "multilabelauroc (class in cyclops.evaluate.metrics.auroc)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC"]], "__add__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__add__"]], "__call__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__call__"]], "__init__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__init__"]], "__mul__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__mul__"]], "add_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.add_state"]], "clone() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.clone"]], "compute() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.compute"]], "reset_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.reset_state"]], "update_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.update_state"]], "cyclops.evaluate.metrics.f_beta": [[33, "module-cyclops.evaluate.metrics.f_beta"]], "binaryf1score (class in cyclops.evaluate.metrics.f_beta)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score"]], "__add__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__add__"]], "__call__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__call__"]], "__init__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__init__"]], "__mul__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__mul__"]], "add_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.add_state"]], "clone() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.clone"]], "compute() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.compute"]], "reset_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.reset_state"]], "update_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.update_state"]], "binaryfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore"]], "__add__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__add__"]], "__call__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__call__"]], "__init__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__init__"]], "__mul__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__mul__"]], "add_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.add_state"]], "clone() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.clone"]], "compute() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.compute"]], "reset_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.reset_state"]], "update_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.update_state"]], "f1score (class in cyclops.evaluate.metrics.f_beta)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score"]], "__add__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__add__"]], "__call__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__call__"]], "__init__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__init__"]], "__mul__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__mul__"]], "add_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.add_state"]], "clone() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.clone"]], "compute() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.compute"]], "reset_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.reset_state"]], "update_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.update_state"]], "fbetascore (class in cyclops.evaluate.metrics.f_beta)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore"]], "__add__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__add__"]], "__call__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__call__"]], "__init__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__init__"]], "__mul__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__mul__"]], "add_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.add_state"]], "clone() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.clone"]], "compute() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.compute"]], "reset_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.reset_state"]], "update_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.update_state"]], "multiclassf1score (class in cyclops.evaluate.metrics.f_beta)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score"]], "__add__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__add__"]], "__call__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__call__"]], "__init__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__init__"]], "__mul__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__mul__"]], "add_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.add_state"]], "clone() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.clone"]], "compute() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.compute"]], "reset_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.reset_state"]], "update_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.update_state"]], "multiclassfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore"]], "__add__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__add__"]], "__call__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__call__"]], "__init__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__init__"]], "__mul__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__mul__"]], "add_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.add_state"]], "clone() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.clone"]], "compute() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.compute"]], "reset_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.reset_state"]], "update_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.update_state"]], "multilabelf1score (class in cyclops.evaluate.metrics.f_beta)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score"]], "__add__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__add__"]], "__call__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__call__"]], "__init__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__init__"]], "__mul__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__mul__"]], "add_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.add_state"]], "clone() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.clone"]], "compute() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.compute"]], "reset_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.reset_state"]], "update_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.update_state"]], "multilabelfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore"]], "__add__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__add__"]], "__call__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__call__"]], "__init__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__init__"]], "__mul__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__mul__"]], "add_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.add_state"]], "clone() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.clone"]], "compute() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.compute"]], "reset_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.reset_state"]], "update_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.update_state"]], "cyclops.evaluate.metrics.factory": [[42, "module-cyclops.evaluate.metrics.factory"]], "create_metric() (in module cyclops.evaluate.metrics.factory)": [[43, "cyclops.evaluate.metrics.factory.create_metric"]], "cyclops.evaluate.metrics.functional.accuracy": [[44, "module-cyclops.evaluate.metrics.functional.accuracy"]], "cyclops.evaluate.metrics.functional.auroc": [[45, "module-cyclops.evaluate.metrics.functional.auroc"]], "cyclops.evaluate.metrics.functional.f_beta": [[46, "module-cyclops.evaluate.metrics.functional.f_beta"]], "binary_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[47, "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score"]], "binary_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[48, "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score"]], "f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[49, "cyclops.evaluate.metrics.functional.f_beta.f1_score"]], "fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[50, "cyclops.evaluate.metrics.functional.f_beta.fbeta_score"]], "multiclass_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[51, "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score"]], "multiclass_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[52, "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score"]], "multilabel_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[53, "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score"]], "multilabel_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[54, "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[55, "module-cyclops.evaluate.metrics.functional.precision_recall"]], "binary_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[56, "cyclops.evaluate.metrics.functional.precision_recall.binary_precision"]], "binary_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[57, "cyclops.evaluate.metrics.functional.precision_recall.binary_recall"]], "multiclass_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[58, "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision"]], "multiclass_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[59, "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall"]], "multilabel_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[60, "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision"]], "multilabel_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[61, "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall"]], "precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[62, "cyclops.evaluate.metrics.functional.precision_recall.precision"]], "recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[63, "cyclops.evaluate.metrics.functional.precision_recall.recall"]], "cyclops.evaluate.metrics.functional.precision_recall_curve": [[64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"]], "cyclops.evaluate.metrics.functional.roc": [[65, "module-cyclops.evaluate.metrics.functional.roc"]], "binary_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[66, "cyclops.evaluate.metrics.functional.roc.binary_roc_curve"]], "multiclass_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[67, "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve"]], "multilabel_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[68, "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve"]], "roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[69, "cyclops.evaluate.metrics.functional.roc.roc_curve"]], "cyclops.evaluate.metrics.functional.sensitivity": [[70, "module-cyclops.evaluate.metrics.functional.sensitivity"]], "cyclops.evaluate.metrics.functional.specificity": [[71, "module-cyclops.evaluate.metrics.functional.specificity"]], "cyclops.evaluate.metrics.functional.stat_scores": [[72, "module-cyclops.evaluate.metrics.functional.stat_scores"]], "cyclops.evaluate.metrics.metric": [[73, "module-cyclops.evaluate.metrics.metric"]], "metric (class in cyclops.evaluate.metrics.metric)": [[74, "cyclops.evaluate.metrics.metric.Metric"]], "__add__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__add__"]], "__call__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__call__"]], "__init__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__init__"]], "__mul__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__mul__"]], "add_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.add_state"]], "clone() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.clone"]], "compute() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.compute"]], "reset_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.reset_state"]], "update_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.update_state"]], "metriccollection (class in cyclops.evaluate.metrics.metric)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection"]], "__call__() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.__call__"]], "__init__() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.__init__"]], "add_metrics() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.add_metrics"]], "clear() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.clear"]], "clone() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.clone"]], "compute() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.compute"]], "get() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.get"]], "items() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.items"]], "keys() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.keys"]], "pop() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.pop"]], "popitem() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.popitem"]], "reset_state() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.reset_state"]], "setdefault() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.setdefault"]], "update() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.update"]], "update_state() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.update_state"]], "values() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.values"]], "operatormetric (class in cyclops.evaluate.metrics.metric)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric"]], "__add__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__add__"]], "__call__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__call__"]], "__init__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__init__"]], "__mul__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__mul__"]], "add_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.add_state"]], "clone() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.clone"]], "compute() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.compute"]], "reset_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.reset_state"]], "update_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.update_state"]], "cyclops.evaluate.metrics.precision_recall": [[77, "module-cyclops.evaluate.metrics.precision_recall"]], "binaryprecision (class in cyclops.evaluate.metrics.precision_recall)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision"]], "__add__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__add__"]], "__call__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__call__"]], "__init__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__init__"]], "__mul__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__mul__"]], "add_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.add_state"]], "clone() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.clone"]], "compute() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.compute"]], "reset_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.reset_state"]], "update_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.update_state"]], "binaryrecall (class in cyclops.evaluate.metrics.precision_recall)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall"]], "__add__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__add__"]], "__call__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__call__"]], "__init__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__init__"]], "__mul__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__mul__"]], "add_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.add_state"]], "clone() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.clone"]], "compute() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.compute"]], "reset_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.reset_state"]], "update_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.update_state"]], "multiclassprecision (class in cyclops.evaluate.metrics.precision_recall)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision"]], "__add__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__add__"]], "__call__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__call__"]], "__init__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__init__"]], "__mul__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__mul__"]], "add_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.add_state"]], "clone() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.clone"]], "compute() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.compute"]], "reset_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.reset_state"]], "update_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.update_state"]], "multiclassrecall (class in cyclops.evaluate.metrics.precision_recall)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall"]], "__add__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__add__"]], "__call__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__call__"]], "__init__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__init__"]], "__mul__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__mul__"]], "add_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.add_state"]], "clone() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.clone"]], "compute() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.compute"]], "reset_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.reset_state"]], "update_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.update_state"]], "multilabelprecision (class in cyclops.evaluate.metrics.precision_recall)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision"]], "__add__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__add__"]], "__call__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__call__"]], "__init__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__init__"]], "__mul__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__mul__"]], "add_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.add_state"]], "clone() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.clone"]], "compute() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.compute"]], "reset_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.reset_state"]], "update_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.update_state"]], "multilabelrecall (class in cyclops.evaluate.metrics.precision_recall)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall"]], "__add__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__add__"]], "__call__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__call__"]], "__init__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__init__"]], "__mul__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__mul__"]], "add_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.add_state"]], "clone() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.clone"]], "compute() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.compute"]], "reset_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.reset_state"]], "update_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.update_state"]], "precision (class in cyclops.evaluate.metrics.precision_recall)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision"]], "__add__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__add__"]], "__call__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__call__"]], "__init__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__init__"]], "__mul__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__mul__"]], "add_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.add_state"]], "clone() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.clone"]], "compute() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.compute"]], "reset_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.reset_state"]], "update_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.update_state"]], "recall (class in cyclops.evaluate.metrics.precision_recall)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall"]], "__add__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__add__"]], "__call__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__call__"]], "__init__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__init__"]], "__mul__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__mul__"]], "add_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.add_state"]], "clone() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.clone"]], "compute() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.compute"]], "reset_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.reset_state"]], "update_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.update_state"]], "cyclops.evaluate.metrics.precision_recall_curve": [[86, "module-cyclops.evaluate.metrics.precision_recall_curve"]], "binaryprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve"]], "__add__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__add__"]], "__call__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__call__"]], "__init__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__init__"]], "__mul__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__mul__"]], "add_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.add_state"]], "clone() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.clone"]], "compute() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.compute"]], "reset_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.reset_state"]], "update_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.update_state"]], "multiclassprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve"]], "__add__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__add__"]], "__call__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__call__"]], "__init__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__init__"]], "__mul__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__mul__"]], "add_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.add_state"]], "clone() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.clone"]], "compute() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.compute"]], "reset_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.reset_state"]], "update_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.update_state"]], "multilabelprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve"]], "__add__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__add__"]], "__call__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__call__"]], "__init__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__init__"]], "__mul__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__mul__"]], "add_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.add_state"]], "clone() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.clone"]], "compute() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.compute"]], "reset_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.reset_state"]], "update_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.update_state"]], "precisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve"]], "__add__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__add__"]], "__call__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__call__"]], "__init__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__init__"]], "__mul__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__mul__"]], "add_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.add_state"]], "clone() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.clone"]], "compute() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.compute"]], "reset_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.reset_state"]], "update_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.update_state"]], "cyclops.evaluate.metrics.roc": [[91, "module-cyclops.evaluate.metrics.roc"]], "binaryroccurve (class in cyclops.evaluate.metrics.roc)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve"]], "__add__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__add__"]], "__call__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__call__"]], "__init__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__init__"]], "__mul__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__mul__"]], "add_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.add_state"]], "clone() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.clone"]], "compute() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.compute"]], "reset_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.reset_state"]], "update_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.update_state"]], "multiclassroccurve (class in cyclops.evaluate.metrics.roc)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve"]], "__add__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__add__"]], "__call__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__call__"]], "__init__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__init__"]], "__mul__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__mul__"]], "add_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.add_state"]], "clone() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.clone"]], "compute() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.compute"]], "reset_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.reset_state"]], "update_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.update_state"]], "multilabelroccurve (class in cyclops.evaluate.metrics.roc)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve"]], "__add__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__add__"]], "__call__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__call__"]], "__init__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__init__"]], "__mul__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__mul__"]], "add_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.add_state"]], "clone() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.clone"]], "compute() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.compute"]], "reset_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.reset_state"]], "update_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.update_state"]], "roccurve (class in cyclops.evaluate.metrics.roc)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve"]], "__add__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__add__"]], "__call__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__call__"]], "__init__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__init__"]], "__mul__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__mul__"]], "add_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.add_state"]], "clone() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.clone"]], "compute() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.compute"]], "reset_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.reset_state"]], "update_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.update_state"]], "cyclops.evaluate.metrics.sensitivity": [[96, "module-cyclops.evaluate.metrics.sensitivity"]], "binarysensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity"]], "__add__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__add__"]], "__call__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__call__"]], "__init__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__init__"]], "__mul__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__mul__"]], "add_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.add_state"]], "clone() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.clone"]], "compute() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.compute"]], "reset_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.reset_state"]], "update_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.update_state"]], "multiclasssensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity"]], "__add__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__add__"]], "__call__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__call__"]], "__init__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__init__"]], "__mul__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__mul__"]], "add_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.add_state"]], "clone() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.clone"]], "compute() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.compute"]], "reset_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.reset_state"]], "update_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.update_state"]], "multilabelsensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity"]], "__add__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__add__"]], "__call__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__call__"]], "__init__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__init__"]], "__mul__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__mul__"]], "add_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.add_state"]], "clone() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.clone"]], "compute() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.compute"]], "reset_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.reset_state"]], "update_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.update_state"]], "sensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity"]], "__add__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__add__"]], "__call__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__call__"]], "__init__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__init__"]], "__mul__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__mul__"]], "add_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.add_state"]], "clone() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.clone"]], "compute() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.compute"]], "reset_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.reset_state"]], "update_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.update_state"]], "cyclops.evaluate.metrics.specificity": [[101, "module-cyclops.evaluate.metrics.specificity"]], "binaryspecificity (class in cyclops.evaluate.metrics.specificity)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity"]], "__add__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__add__"]], "__call__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__call__"]], "__init__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__init__"]], "__mul__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__mul__"]], "add_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.add_state"]], "clone() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.clone"]], "compute() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.compute"]], "reset_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.reset_state"]], "update_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.update_state"]], "multiclassspecificity (class in cyclops.evaluate.metrics.specificity)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity"]], "__add__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__add__"]], "__call__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__call__"]], "__init__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__init__"]], "__mul__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__mul__"]], "add_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.add_state"]], "clone() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.clone"]], "compute() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.compute"]], "reset_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.reset_state"]], "update_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.update_state"]], "multilabelspecificity (class in cyclops.evaluate.metrics.specificity)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity"]], "__add__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__add__"]], "__call__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__call__"]], "__init__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__init__"]], "__mul__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__mul__"]], "add_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.add_state"]], "clone() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.clone"]], "compute() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.compute"]], "reset_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.reset_state"]], "update_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.update_state"]], "specificity (class in cyclops.evaluate.metrics.specificity)": [[105, "cyclops.evaluate.metrics.specificity.Specificity"]], "__add__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__add__"]], "__call__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__call__"]], "__init__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__init__"]], "__mul__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__mul__"]], "add_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.add_state"]], "clone() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.clone"]], "compute() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.compute"]], "reset_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.reset_state"]], "update_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.update_state"]], "cyclops.evaluate.metrics.stat_scores": [[106, "module-cyclops.evaluate.metrics.stat_scores"]], "binarystatscores (class in cyclops.evaluate.metrics.stat_scores)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores"]], "__add__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__add__"]], "__call__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__call__"]], "__init__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__init__"]], "__mul__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__mul__"]], "add_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.add_state"]], "clone() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.clone"]], "compute() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.compute"]], "reset_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.reset_state"]], "update_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.update_state"]], "multiclassstatscores (class in cyclops.evaluate.metrics.stat_scores)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores"]], "__add__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__add__"]], "__call__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__call__"]], "__init__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__init__"]], "__mul__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__mul__"]], "add_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.add_state"]], "clone() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.clone"]], "compute() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.compute"]], "reset_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.reset_state"]], "update_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.update_state"]], "multilabelstatscores (class in cyclops.evaluate.metrics.stat_scores)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores"]], "__add__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__add__"]], "__call__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__call__"]], "__init__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__init__"]], "__mul__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__mul__"]], "add_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.add_state"]], "clone() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.clone"]], "compute() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.compute"]], "reset_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.reset_state"]], "update_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.update_state"]], "statscores (class in cyclops.evaluate.metrics.stat_scores)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores"]], "__add__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__add__"]], "__call__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__call__"]], "__init__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__init__"]], "__mul__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__mul__"]], "add_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.add_state"]], "clone() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.clone"]], "compute() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.compute"]], "reset_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.reset_state"]], "update_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.update_state"]], "cyclops.monitor.clinical_applicator": [[111, "module-cyclops.monitor.clinical_applicator"]], "clinicalshiftapplicator (class in cyclops.monitor.clinical_applicator)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator"]], "age() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.age"]], "apply_shift() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.apply_shift"]], "custom() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.custom"]], "hospital_type() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.hospital_type"]], "month() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.month"]], "sex() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.sex"]], "time() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.time"]], "cyclops.monitor.synthetic_applicator": [[113, "module-cyclops.monitor.synthetic_applicator"]], "syntheticshiftapplicator (class in cyclops.monitor.synthetic_applicator)": [[114, "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator"]], "apply_shift() (syntheticshiftapplicator method)": [[114, "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator.apply_shift"]], "binary_noise_shift() (in module cyclops.monitor.synthetic_applicator)": [[115, "cyclops.monitor.synthetic_applicator.binary_noise_shift"]], "feature_association_shift() (in module cyclops.monitor.synthetic_applicator)": [[116, "cyclops.monitor.synthetic_applicator.feature_association_shift"]], "feature_swap_shift() (in module cyclops.monitor.synthetic_applicator)": [[117, "cyclops.monitor.synthetic_applicator.feature_swap_shift"]], "gaussian_noise_shift() (in module cyclops.monitor.synthetic_applicator)": [[118, "cyclops.monitor.synthetic_applicator.gaussian_noise_shift"]], "knockout_shift() (in module cyclops.monitor.synthetic_applicator)": [[119, "cyclops.monitor.synthetic_applicator.knockout_shift"]], "cyclops.query.base": [[120, "module-cyclops.query.base"]], "datasetquerier (class in cyclops.query.base)": [[121, "cyclops.query.base.DatasetQuerier"]], "__init__() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.__init__"]], "db (datasetquerier attribute)": [[121, "cyclops.query.base.DatasetQuerier.db"]], "get_interface() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.get_interface"]], "get_table() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.get_table"]], "list_columns() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_columns"]], "list_custom_tables() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_custom_tables"]], "list_schemas() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_schemas"]], "list_tables() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_tables"]], "cyclops.query.eicu": [[122, "module-cyclops.query.eicu"]], "eicuquerier (class in cyclops.query.eicu)": [[123, "cyclops.query.eicu.EICUQuerier"]], "__init__() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.__init__"]], "get_interface() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.get_interface"]], "get_table() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.get_table"]], "list_columns() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_columns"]], "list_custom_tables() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_custom_tables"]], "list_schemas() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_schemas"]], "list_tables() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_tables"]], "cyclops.query.gemini": [[124, "module-cyclops.query.gemini"]], "geminiquerier (class in cyclops.query.gemini)": [[125, "cyclops.query.gemini.GEMINIQuerier"]], "__init__() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.__init__"]], "care_units() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.care_units"]], "diagnoses() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.diagnoses"]], "get_interface() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.get_interface"]], "get_table() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.get_table"]], "imaging() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.imaging"]], "ip_admin() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.ip_admin"]], "list_columns() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_columns"]], "list_custom_tables() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_custom_tables"]], "list_schemas() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_schemas"]], "list_tables() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_tables"]], "room_transfer() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.room_transfer"]], "cyclops.query.interface": [[126, "module-cyclops.query.interface"]], "queryinterface (class in cyclops.query.interface)": [[127, "cyclops.query.interface.QueryInterface"]], "clear_data() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.clear_data"]], "data (queryinterface property)": [[127, "cyclops.query.interface.QueryInterface.data"]], "run() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.run"]], "save() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.save"]], "queryinterfaceprocessed (class in cyclops.query.interface)": [[128, "cyclops.query.interface.QueryInterfaceProcessed"]], "clear_data() (queryinterfaceprocessed method)": [[128, "cyclops.query.interface.QueryInterfaceProcessed.clear_data"]], "data (queryinterfaceprocessed property)": [[128, "cyclops.query.interface.QueryInterfaceProcessed.data"]], "run() (queryinterfaceprocessed method)": [[128, "cyclops.query.interface.QueryInterfaceProcessed.run"]], "save() (queryinterfaceprocessed method)": [[128, "cyclops.query.interface.QueryInterfaceProcessed.save"]], "cyclops.query.mimiciii": [[129, "module-cyclops.query.mimiciii"]], "mimiciiiquerier (class in cyclops.query.mimiciii)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier"]], "__init__() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.__init__"]], "chartevents() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.chartevents"]], "diagnoses() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.diagnoses"]], "get_interface() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.get_interface"]], "get_table() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.get_table"]], "labevents() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.labevents"]], "list_columns() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.list_columns"]], "list_custom_tables() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.list_custom_tables"]], "list_schemas() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.list_schemas"]], "list_tables() (mimiciiiquerier method)": [[130, "cyclops.query.mimiciii.MIMICIIIQuerier.list_tables"]], "cyclops.query.mimiciv": [[131, "module-cyclops.query.mimiciv"]], "mimicivquerier (class in cyclops.query.mimiciv)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier"]], "__init__() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.__init__"]], "care_units() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.care_units"]], "chartevents() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.chartevents"]], "diagnoses() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.diagnoses"]], "get_interface() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.get_interface"]], "get_table() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.get_table"]], "labevents() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.labevents"]], "list_columns() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.list_columns"]], "list_custom_tables() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.list_custom_tables"]], "list_schemas() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.list_schemas"]], "list_tables() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.list_tables"]], "patients() (mimicivquerier method)": [[132, "cyclops.query.mimiciv.MIMICIVQuerier.patients"]], "cyclops.query.omop": [[133, "module-cyclops.query.omop"]], "omopquerier (class in cyclops.query.omop)": [[134, "cyclops.query.omop.OMOPQuerier"]], "__init__() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.__init__"]], "get_interface() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.get_interface"]], "get_table() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.get_table"]], "list_columns() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.list_columns"]], "list_custom_tables() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.list_custom_tables"]], "list_schemas() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.list_schemas"]], "list_tables() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.list_tables"]], "map_concept_ids_to_name() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.map_concept_ids_to_name"]], "measurement() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.measurement"]], "observation() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.observation"]], "person() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.person"]], "visit_detail() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.visit_detail"]], "visit_occurrence() (omopquerier method)": [[134, "cyclops.query.omop.OMOPQuerier.visit_occurrence"]], "cyclops.query.ops": [[135, "module-cyclops.query.ops"]], "addcolumn (class in cyclops.query.ops)": [[136, "cyclops.query.ops.AddColumn"]], "__call__() (addcolumn method)": [[136, "cyclops.query.ops.AddColumn.__call__"]], "adddeltacolumn (class in cyclops.query.ops)": [[137, "cyclops.query.ops.AddDeltaColumn"]], "__call__() (adddeltacolumn method)": [[137, "cyclops.query.ops.AddDeltaColumn.__call__"]], "adddeltaconstant (class in cyclops.query.ops)": [[138, "cyclops.query.ops.AddDeltaConstant"]], "__call__() (adddeltaconstant method)": [[138, "cyclops.query.ops.AddDeltaConstant.__call__"]], "addnumeric (class in cyclops.query.ops)": [[139, "cyclops.query.ops.AddNumeric"]], "__call__() (addnumeric method)": [[139, "cyclops.query.ops.AddNumeric.__call__"]], "and (class in cyclops.query.ops)": [[140, "cyclops.query.ops.And"]], "__call__() (and method)": [[140, "cyclops.query.ops.And.__call__"]], "apply (class in cyclops.query.ops)": [[141, "cyclops.query.ops.Apply"]], "__call__() (apply method)": [[141, "cyclops.query.ops.Apply.__call__"]], "cast (class in cyclops.query.ops)": [[142, "cyclops.query.ops.Cast"]], "__call__() (cast method)": [[142, "cyclops.query.ops.Cast.__call__"]], "conditionafterdate (class in cyclops.query.ops)": [[143, "cyclops.query.ops.ConditionAfterDate"]], "__call__() (conditionafterdate method)": [[143, "cyclops.query.ops.ConditionAfterDate.__call__"]], "conditionbeforedate (class in cyclops.query.ops)": [[144, "cyclops.query.ops.ConditionBeforeDate"]], "__call__() (conditionbeforedate method)": [[144, "cyclops.query.ops.ConditionBeforeDate.__call__"]], "conditionendswith (class in cyclops.query.ops)": [[145, "cyclops.query.ops.ConditionEndsWith"]], "__call__() (conditionendswith method)": [[145, "cyclops.query.ops.ConditionEndsWith.__call__"]], "conditionequals (class in cyclops.query.ops)": [[146, "cyclops.query.ops.ConditionEquals"]], "__call__() (conditionequals method)": [[146, "cyclops.query.ops.ConditionEquals.__call__"]], "conditiongreaterthan (class in cyclops.query.ops)": [[147, "cyclops.query.ops.ConditionGreaterThan"]], "__call__() (conditiongreaterthan method)": [[147, "cyclops.query.ops.ConditionGreaterThan.__call__"]], "conditionin (class in cyclops.query.ops)": [[148, "cyclops.query.ops.ConditionIn"]], "__call__() (conditionin method)": [[148, "cyclops.query.ops.ConditionIn.__call__"]], "conditioninmonths (class in cyclops.query.ops)": [[149, "cyclops.query.ops.ConditionInMonths"]], "__call__() (conditioninmonths method)": [[149, "cyclops.query.ops.ConditionInMonths.__call__"]], "conditioninyears (class in cyclops.query.ops)": [[150, "cyclops.query.ops.ConditionInYears"]], "__call__() (conditioninyears method)": [[150, "cyclops.query.ops.ConditionInYears.__call__"]], "conditionlessthan (class in cyclops.query.ops)": [[151, "cyclops.query.ops.ConditionLessThan"]], "__call__() (conditionlessthan method)": [[151, "cyclops.query.ops.ConditionLessThan.__call__"]], "conditionlike (class in cyclops.query.ops)": [[152, "cyclops.query.ops.ConditionLike"]], "__call__() (conditionlike method)": [[152, "cyclops.query.ops.ConditionLike.__call__"]], "conditionregexmatch (class in cyclops.query.ops)": [[153, "cyclops.query.ops.ConditionRegexMatch"]], "__call__() (conditionregexmatch method)": [[153, "cyclops.query.ops.ConditionRegexMatch.__call__"]], "conditionstartswith (class in cyclops.query.ops)": [[154, "cyclops.query.ops.ConditionStartsWith"]], "__call__() (conditionstartswith method)": [[154, "cyclops.query.ops.ConditionStartsWith.__call__"]], "conditionsubstring (class in cyclops.query.ops)": [[155, "cyclops.query.ops.ConditionSubstring"]], "__call__() (conditionsubstring method)": [[155, "cyclops.query.ops.ConditionSubstring.__call__"]], "distinct (class in cyclops.query.ops)": [[156, "cyclops.query.ops.Distinct"]], "__call__() (distinct method)": [[156, "cyclops.query.ops.Distinct.__call__"]], "drop (class in cyclops.query.ops)": [[157, "cyclops.query.ops.Drop"]], "__call__() (drop method)": [[157, "cyclops.query.ops.Drop.__call__"]], "dropnulls (class in cyclops.query.ops)": [[158, "cyclops.query.ops.DropNulls"]], "__call__() (dropnulls method)": [[158, "cyclops.query.ops.DropNulls.__call__"]], "extracttimestampcomponent (class in cyclops.query.ops)": [[159, "cyclops.query.ops.ExtractTimestampComponent"]], "__call__() (extracttimestampcomponent method)": [[159, "cyclops.query.ops.ExtractTimestampComponent.__call__"]], "fillnull (class in cyclops.query.ops)": [[160, "cyclops.query.ops.FillNull"]], "__call__() (fillnull method)": [[160, "cyclops.query.ops.FillNull.__call__"]], "groupbyaggregate (class in cyclops.query.ops)": [[161, "cyclops.query.ops.GroupByAggregate"]], "__call__() (groupbyaggregate method)": [[161, "cyclops.query.ops.GroupByAggregate.__call__"]], "join (class in cyclops.query.ops)": [[162, "cyclops.query.ops.Join"]], "__call__() (join method)": [[162, "cyclops.query.ops.Join.__call__"]], "joinargs (class in cyclops.query.ops)": [[163, "cyclops.query.ops.JoinArgs"]], "keep (class in cyclops.query.ops)": [[164, "cyclops.query.ops.Keep"]], "__call__() (keep method)": [[164, "cyclops.query.ops.Keep.__call__"]], "limit (class in cyclops.query.ops)": [[165, "cyclops.query.ops.Limit"]], "__call__() (limit method)": [[165, "cyclops.query.ops.Limit.__call__"]], "literal (class in cyclops.query.ops)": [[166, "cyclops.query.ops.Literal"]], "__call__() (literal method)": [[166, "cyclops.query.ops.Literal.__call__"]], "or (class in cyclops.query.ops)": [[167, "cyclops.query.ops.Or"]], "__call__() (or method)": [[167, "cyclops.query.ops.Or.__call__"]], "orderby (class in cyclops.query.ops)": [[168, "cyclops.query.ops.OrderBy"]], "__call__() (orderby method)": [[168, "cyclops.query.ops.OrderBy.__call__"]], "queryop (class in cyclops.query.ops)": [[169, "cyclops.query.ops.QueryOp"]], "__call__() (queryop method)": [[169, "cyclops.query.ops.QueryOp.__call__"]], "randomizeorder (class in cyclops.query.ops)": [[170, "cyclops.query.ops.RandomizeOrder"]], "__call__() (randomizeorder method)": [[170, "cyclops.query.ops.RandomizeOrder.__call__"]], "rename (class in cyclops.query.ops)": [[171, "cyclops.query.ops.Rename"]], "__call__() (rename method)": [[171, "cyclops.query.ops.Rename.__call__"]], "reorder (class in cyclops.query.ops)": [[172, "cyclops.query.ops.Reorder"]], "__call__() (reorder method)": [[172, "cyclops.query.ops.Reorder.__call__"]], "reorderafter (class in cyclops.query.ops)": [[173, "cyclops.query.ops.ReorderAfter"]], "__call__() (reorderafter method)": [[173, "cyclops.query.ops.ReorderAfter.__call__"]], "sequential (class in cyclops.query.ops)": [[174, "cyclops.query.ops.Sequential"]], "__add__() (sequential method)": [[174, "cyclops.query.ops.Sequential.__add__"]], "__call__() (sequential method)": [[174, "cyclops.query.ops.Sequential.__call__"]], "__init__() (sequential method)": [[174, "cyclops.query.ops.Sequential.__init__"]], "append() (sequential method)": [[174, "cyclops.query.ops.Sequential.append"]], "extend() (sequential method)": [[174, "cyclops.query.ops.Sequential.extend"]], "insert() (sequential method)": [[174, "cyclops.query.ops.Sequential.insert"]], "pop() (sequential method)": [[174, "cyclops.query.ops.Sequential.pop"]], "substring (class in cyclops.query.ops)": [[175, "cyclops.query.ops.Substring"]], "__call__() (substring method)": [[175, "cyclops.query.ops.Substring.__call__"]], "trim (class in cyclops.query.ops)": [[176, "cyclops.query.ops.Trim"]], "__call__() (trim method)": [[176, "cyclops.query.ops.Trim.__call__"]], "union (class in cyclops.query.ops)": [[177, "cyclops.query.ops.Union"]], "__call__() (union method)": [[177, "cyclops.query.ops.Union.__call__"]], "cyclops.report.report": [[178, "module-cyclops.report.report"]], "modelcardreport (class in cyclops.report.report)": [[179, "cyclops.report.report.ModelCardReport"]], "export() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.export"]], "from_json_file() (modelcardreport class method)": [[179, "cyclops.report.report.ModelCardReport.from_json_file"]], "log_citation() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_citation"]], "log_dataset() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_dataset"]], "log_descriptor() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_descriptor"]], "log_fairness_assessment() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_fairness_assessment"]], "log_from_dict() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_from_dict"]], "log_image() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_image"]], "log_license() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_license"]], "log_model_parameters() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_model_parameters"]], "log_owner() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_owner"]], "log_performance_metrics() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_performance_metrics"]], "log_plotly_figure() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_plotly_figure"]], "log_quantitative_analysis() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_quantitative_analysis"]], "log_reference() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_reference"]], "log_regulation() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_regulation"]], "log_risk() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_risk"]], "log_use_case() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_use_case"]], "log_user() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_user"]], "log_version() (modelcardreport method)": [[179, "cyclops.report.report.ModelCardReport.log_version"]], "cyclops.tasks.cxr_classification": [[180, "module-cyclops.tasks.cxr_classification"]], "cxrclassificationtask (class in cyclops.tasks.cxr_classification)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask"]], "__init__() (cxrclassificationtask method)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.__init__"]], "add_model() (cxrclassificationtask method)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.add_model"]], "data_type (cxrclassificationtask property)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.data_type"]], "evaluate() (cxrclassificationtask method)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.evaluate"]], "get_model() (cxrclassificationtask method)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.get_model"]], "list_models() (cxrclassificationtask method)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.list_models"]], "models_count (cxrclassificationtask property)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.models_count"]], "predict() (cxrclassificationtask method)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.predict"]], "task_type (cxrclassificationtask property)": [[181, "cyclops.tasks.cxr_classification.CXRClassificationTask.task_type"]], "cyclops.tasks.mortality_prediction": [[182, "module-cyclops.tasks.mortality_prediction"]], "mortalitypredictiontask (class in cyclops.tasks.mortality_prediction)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask"]], "__init__() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.__init__"]], "add_model() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.add_model"]], "data_type (mortalitypredictiontask property)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.data_type"]], "evaluate() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.evaluate"]], "get_model() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.get_model"]], "list_models() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.list_models"]], "list_models_params() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.list_models_params"]], "load_model() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.load_model"]], "models_count (mortalitypredictiontask property)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.models_count"]], "predict() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.predict"]], "save_model() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.save_model"]], "task_type (mortalitypredictiontask property)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.task_type"]], "train() (mortalitypredictiontask method)": [[183, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.train"]], "cyclops.data": [[184, "module-cyclops.data"]], "cyclops.data.features": [[184, "module-cyclops.data.features"]], "cyclops.evaluate": [[185, "module-cyclops.evaluate"]], "cyclops.evaluate.fairness": [[185, "module-cyclops.evaluate.fairness"]], "cyclops.evaluate.metrics": [[185, "module-cyclops.evaluate.metrics"]], "cyclops.evaluate.metrics.functional": [[185, "module-cyclops.evaluate.metrics.functional"]], "cyclops.monitor": [[186, "module-cyclops.monitor"]], "cyclops.query": [[187, "module-cyclops.query"]], "cyclops.report": [[188, "module-cyclops.report"]], "cyclops.tasks": [[189, "module-cyclops.tasks"]]}})