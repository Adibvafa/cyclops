Search.setIndex({"docnames": ["api", "contributing", "index", "intro", "reference/api/_autosummary/cyclops.data.features.medical_image", "reference/api/_autosummary/cyclops.data.features.medical_image.MedicalImage", "reference/api/_autosummary/cyclops.data.slicer", "reference/api/_autosummary/cyclops.data.slicer.SliceSpec", "reference/api/_autosummary/cyclops.data.slicer.compound_filter", "reference/api/_autosummary/cyclops.data.slicer.filter_datetime", "reference/api/_autosummary/cyclops.data.slicer.filter_non_null", "reference/api/_autosummary/cyclops.data.slicer.filter_range", "reference/api/_autosummary/cyclops.data.slicer.filter_string_contains", "reference/api/_autosummary/cyclops.data.slicer.filter_value", "reference/api/_autosummary/cyclops.data.slicer.is_datetime", "reference/api/_autosummary/cyclops.data.slicer.overall", "reference/api/_autosummary/cyclops.evaluate.evaluator", "reference/api/_autosummary/cyclops.evaluate.evaluator.evaluate", "reference/api/_autosummary/cyclops.evaluate.fairness.config", "reference/api/_autosummary/cyclops.evaluate.fairness.config.FairnessConfig", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.evaluate_fairness", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.Accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.BinaryAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MulticlassAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MultilabelAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.AUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.BinaryAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MulticlassAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MultilabelAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.F1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.FbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.factory", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.create_metric", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.auroc", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.binary_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.stat_scores", "reference/api/_autosummary/cyclops.evaluate.metrics.metric", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.Metric", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.MetricCollection", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.OperatorMetric", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Precision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Recall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.BinaryROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MulticlassROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MultilabelROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.ROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.BinarySensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.Sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.BinarySpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MulticlassSpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MultilabelSpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.Specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.BinaryStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MulticlassStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MultilabelStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.StatScores", "reference/api/_autosummary/cyclops.monitor.clinical_applicator", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.ClinicalShiftApplicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.binary_noise_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_association_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_swap_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.gaussian_noise_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.knockout_shift", "reference/api/_autosummary/cyclops.query.base", "reference/api/_autosummary/cyclops.query.base.DatasetQuerier", "reference/api/_autosummary/cyclops.query.eicu", "reference/api/_autosummary/cyclops.query.eicu.EICUQuerier", "reference/api/_autosummary/cyclops.query.gemini", "reference/api/_autosummary/cyclops.query.gemini.GEMINIQuerier", "reference/api/_autosummary/cyclops.query.interface", "reference/api/_autosummary/cyclops.query.interface.QueryInterface", "reference/api/_autosummary/cyclops.query.mimiciii", "reference/api/_autosummary/cyclops.query.mimiciii.MIMICIIIQuerier", "reference/api/_autosummary/cyclops.query.mimiciv", "reference/api/_autosummary/cyclops.query.mimiciv.MIMICIVQuerier", "reference/api/_autosummary/cyclops.query.omop", "reference/api/_autosummary/cyclops.query.omop.OMOPQuerier", "reference/api/_autosummary/cyclops.query.ops", "reference/api/_autosummary/cyclops.query.ops.AddColumn", "reference/api/_autosummary/cyclops.query.ops.AddDeltaColumn", "reference/api/_autosummary/cyclops.query.ops.AddDeltaConstant", "reference/api/_autosummary/cyclops.query.ops.AddNumeric", "reference/api/_autosummary/cyclops.query.ops.And", "reference/api/_autosummary/cyclops.query.ops.Apply", "reference/api/_autosummary/cyclops.query.ops.Cast", "reference/api/_autosummary/cyclops.query.ops.ConditionAfterDate", "reference/api/_autosummary/cyclops.query.ops.ConditionBeforeDate", "reference/api/_autosummary/cyclops.query.ops.ConditionEndsWith", "reference/api/_autosummary/cyclops.query.ops.ConditionEquals", "reference/api/_autosummary/cyclops.query.ops.ConditionGreaterThan", "reference/api/_autosummary/cyclops.query.ops.ConditionIn", "reference/api/_autosummary/cyclops.query.ops.ConditionInMonths", "reference/api/_autosummary/cyclops.query.ops.ConditionInYears", "reference/api/_autosummary/cyclops.query.ops.ConditionLessThan", "reference/api/_autosummary/cyclops.query.ops.ConditionLike", "reference/api/_autosummary/cyclops.query.ops.ConditionRegexMatch", "reference/api/_autosummary/cyclops.query.ops.ConditionStartsWith", "reference/api/_autosummary/cyclops.query.ops.ConditionSubstring", "reference/api/_autosummary/cyclops.query.ops.Distinct", "reference/api/_autosummary/cyclops.query.ops.Drop", "reference/api/_autosummary/cyclops.query.ops.DropEmpty", "reference/api/_autosummary/cyclops.query.ops.DropNulls", "reference/api/_autosummary/cyclops.query.ops.ExtractTimestampComponent", "reference/api/_autosummary/cyclops.query.ops.FillNull", "reference/api/_autosummary/cyclops.query.ops.GroupByAggregate", "reference/api/_autosummary/cyclops.query.ops.Join", "reference/api/_autosummary/cyclops.query.ops.Keep", "reference/api/_autosummary/cyclops.query.ops.Limit", "reference/api/_autosummary/cyclops.query.ops.Literal", "reference/api/_autosummary/cyclops.query.ops.Or", "reference/api/_autosummary/cyclops.query.ops.OrderBy", "reference/api/_autosummary/cyclops.query.ops.QueryOp", "reference/api/_autosummary/cyclops.query.ops.RandomizeOrder", "reference/api/_autosummary/cyclops.query.ops.Rename", "reference/api/_autosummary/cyclops.query.ops.Reorder", "reference/api/_autosummary/cyclops.query.ops.ReorderAfter", "reference/api/_autosummary/cyclops.query.ops.Sequential", "reference/api/_autosummary/cyclops.query.ops.Substring", "reference/api/_autosummary/cyclops.query.ops.Trim", "reference/api/_autosummary/cyclops.query.ops.Union", "reference/api/_autosummary/cyclops.report.report", "reference/api/_autosummary/cyclops.report.report.ModelCardReport", "reference/api/_autosummary/cyclops.tasks.cxr_classification", "reference/api/_autosummary/cyclops.tasks.cxr_classification.CXRClassificationTask", "reference/api/_autosummary/cyclops.tasks.mortality_prediction", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.MortalityPredictionTask", "reference/api/cyclops.data", "reference/api/cyclops.evaluate", "reference/api/cyclops.monitor", "reference/api/cyclops.query", "reference/api/cyclops.report", "reference/api/cyclops.tasks", "tutorials", "tutorials/eicu/query_api", "tutorials/gemini/query_api", "tutorials/kaggle/heart_failure_prediction", "tutorials/mimiciii/query_api", "tutorials/mimiciv/query_api", "tutorials/nihcxr/cxr_classification", "tutorials/nihcxr/monitor_api", "tutorials/omop/query_api", "tutorials/synthea/los_prediction", "tutorials_monitor", "tutorials_query", "tutorials_use_cases"], "filenames": ["api.rst", "contributing.rst", "index.rst", "intro.rst", "reference/api/_autosummary/cyclops.data.features.medical_image.rst", "reference/api/_autosummary/cyclops.data.features.medical_image.MedicalImage.rst", "reference/api/_autosummary/cyclops.data.slicer.rst", "reference/api/_autosummary/cyclops.data.slicer.SliceSpec.rst", "reference/api/_autosummary/cyclops.data.slicer.compound_filter.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_datetime.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_non_null.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_range.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_string_contains.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_value.rst", "reference/api/_autosummary/cyclops.data.slicer.is_datetime.rst", "reference/api/_autosummary/cyclops.data.slicer.overall.rst", "reference/api/_autosummary/cyclops.evaluate.evaluator.rst", "reference/api/_autosummary/cyclops.evaluate.evaluator.evaluate.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.config.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.config.FairnessConfig.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.evaluate_fairness.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.Accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.BinaryAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.AUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.BinaryAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MulticlassAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MultilabelAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.F1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.FbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.create_metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.auroc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.binary_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.stat_scores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.Metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.MetricCollection.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.OperatorMetric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.BinaryROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MulticlassROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MultilabelROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.ROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.BinarySensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.Sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.BinarySpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MulticlassSpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MultilabelSpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.Specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.BinaryStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.StatScores.rst", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.rst", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.binary_noise_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_association_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_swap_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.gaussian_noise_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.knockout_shift.rst", "reference/api/_autosummary/cyclops.query.base.rst", "reference/api/_autosummary/cyclops.query.base.DatasetQuerier.rst", "reference/api/_autosummary/cyclops.query.eicu.rst", "reference/api/_autosummary/cyclops.query.eicu.EICUQuerier.rst", "reference/api/_autosummary/cyclops.query.gemini.rst", "reference/api/_autosummary/cyclops.query.gemini.GEMINIQuerier.rst", "reference/api/_autosummary/cyclops.query.interface.rst", "reference/api/_autosummary/cyclops.query.interface.QueryInterface.rst", "reference/api/_autosummary/cyclops.query.mimiciii.rst", "reference/api/_autosummary/cyclops.query.mimiciii.MIMICIIIQuerier.rst", "reference/api/_autosummary/cyclops.query.mimiciv.rst", "reference/api/_autosummary/cyclops.query.mimiciv.MIMICIVQuerier.rst", "reference/api/_autosummary/cyclops.query.omop.rst", "reference/api/_autosummary/cyclops.query.omop.OMOPQuerier.rst", "reference/api/_autosummary/cyclops.query.ops.rst", "reference/api/_autosummary/cyclops.query.ops.AddColumn.rst", "reference/api/_autosummary/cyclops.query.ops.AddDeltaColumn.rst", "reference/api/_autosummary/cyclops.query.ops.AddDeltaConstant.rst", "reference/api/_autosummary/cyclops.query.ops.AddNumeric.rst", "reference/api/_autosummary/cyclops.query.ops.And.rst", "reference/api/_autosummary/cyclops.query.ops.Apply.rst", "reference/api/_autosummary/cyclops.query.ops.Cast.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionAfterDate.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionBeforeDate.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionEndsWith.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionEquals.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionGreaterThan.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionIn.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionInMonths.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionInYears.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionLessThan.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionLike.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionRegexMatch.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionStartsWith.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionSubstring.rst", "reference/api/_autosummary/cyclops.query.ops.Distinct.rst", "reference/api/_autosummary/cyclops.query.ops.Drop.rst", "reference/api/_autosummary/cyclops.query.ops.DropEmpty.rst", "reference/api/_autosummary/cyclops.query.ops.DropNulls.rst", "reference/api/_autosummary/cyclops.query.ops.ExtractTimestampComponent.rst", "reference/api/_autosummary/cyclops.query.ops.FillNull.rst", "reference/api/_autosummary/cyclops.query.ops.GroupByAggregate.rst", "reference/api/_autosummary/cyclops.query.ops.Join.rst", "reference/api/_autosummary/cyclops.query.ops.Keep.rst", "reference/api/_autosummary/cyclops.query.ops.Limit.rst", "reference/api/_autosummary/cyclops.query.ops.Literal.rst", "reference/api/_autosummary/cyclops.query.ops.Or.rst", "reference/api/_autosummary/cyclops.query.ops.OrderBy.rst", "reference/api/_autosummary/cyclops.query.ops.QueryOp.rst", "reference/api/_autosummary/cyclops.query.ops.RandomizeOrder.rst", "reference/api/_autosummary/cyclops.query.ops.Rename.rst", "reference/api/_autosummary/cyclops.query.ops.Reorder.rst", "reference/api/_autosummary/cyclops.query.ops.ReorderAfter.rst", "reference/api/_autosummary/cyclops.query.ops.Sequential.rst", "reference/api/_autosummary/cyclops.query.ops.Substring.rst", "reference/api/_autosummary/cyclops.query.ops.Trim.rst", "reference/api/_autosummary/cyclops.query.ops.Union.rst", "reference/api/_autosummary/cyclops.report.report.rst", "reference/api/_autosummary/cyclops.report.report.ModelCardReport.rst", "reference/api/_autosummary/cyclops.tasks.cxr_classification.rst", "reference/api/_autosummary/cyclops.tasks.cxr_classification.CXRClassificationTask.rst", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.rst", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.MortalityPredictionTask.rst", "reference/api/cyclops.data.rst", "reference/api/cyclops.evaluate.rst", "reference/api/cyclops.monitor.rst", "reference/api/cyclops.query.rst", "reference/api/cyclops.report.rst", "reference/api/cyclops.tasks.rst", "tutorials.rst", "tutorials/eicu/query_api.ipynb", "tutorials/gemini/query_api.ipynb", "tutorials/kaggle/heart_failure_prediction.ipynb", "tutorials/mimiciii/query_api.ipynb", "tutorials/mimiciv/query_api.ipynb", "tutorials/nihcxr/cxr_classification.ipynb", "tutorials/nihcxr/monitor_api.ipynb", "tutorials/omop/query_api.ipynb", "tutorials/synthea/los_prediction.ipynb", "tutorials_monitor.rst", "tutorials_query.rst", "tutorials_use_cases.rst"], "titles": ["API Reference", "Contributing to cyclops", "Welcome to cyclops\u2019s documentation!", "\ud83d\udc23 Getting Started", "cyclops.data.features.medical_image", "cyclops.data.features.medical_image.MedicalImage", "cyclops.data.slicer", "cyclops.data.slicer.SliceSpec", "cyclops.data.slicer.compound_filter", "cyclops.data.slicer.filter_datetime", "cyclops.data.slicer.filter_non_null", "cyclops.data.slicer.filter_range", "cyclops.data.slicer.filter_string_contains", "cyclops.data.slicer.filter_value", "cyclops.data.slicer.is_datetime", "cyclops.data.slicer.overall", "cyclops.evaluate.evaluator", "cyclops.evaluate.evaluator.evaluate", "cyclops.evaluate.fairness.config", "cyclops.evaluate.fairness.config.FairnessConfig", "cyclops.evaluate.fairness.evaluator", "cyclops.evaluate.fairness.evaluator.evaluate_fairness", "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values", "cyclops.evaluate.metrics.accuracy", "cyclops.evaluate.metrics.accuracy.Accuracy", "cyclops.evaluate.metrics.accuracy.BinaryAccuracy", "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy", "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy", "cyclops.evaluate.metrics.auroc", "cyclops.evaluate.metrics.auroc.AUROC", "cyclops.evaluate.metrics.auroc.BinaryAUROC", "cyclops.evaluate.metrics.auroc.MulticlassAUROC", "cyclops.evaluate.metrics.auroc.MultilabelAUROC", "cyclops.evaluate.metrics.f_beta", "cyclops.evaluate.metrics.f_beta.BinaryF1Score", "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore", "cyclops.evaluate.metrics.f_beta.F1Score", "cyclops.evaluate.metrics.f_beta.FbetaScore", "cyclops.evaluate.metrics.f_beta.MulticlassF1Score", "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore", "cyclops.evaluate.metrics.f_beta.MultilabelF1Score", "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore", "cyclops.evaluate.metrics.factory", "cyclops.evaluate.metrics.factory.create_metric", "cyclops.evaluate.metrics.functional.accuracy", "cyclops.evaluate.metrics.functional.auroc", "cyclops.evaluate.metrics.functional.f_beta", "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score", "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.f1_score", "cyclops.evaluate.metrics.functional.f_beta.fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score", "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score", "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score", "cyclops.evaluate.metrics.functional.precision_recall", "cyclops.evaluate.metrics.functional.precision_recall.binary_precision", "cyclops.evaluate.metrics.functional.precision_recall.binary_recall", "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision", "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall", "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision", "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall", "cyclops.evaluate.metrics.functional.precision_recall.precision", "cyclops.evaluate.metrics.functional.precision_recall.recall", "cyclops.evaluate.metrics.functional.precision_recall_curve", "cyclops.evaluate.metrics.functional.roc", "cyclops.evaluate.metrics.functional.roc.binary_roc_curve", "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve", "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve", "cyclops.evaluate.metrics.functional.roc.roc_curve", "cyclops.evaluate.metrics.functional.sensitivity", "cyclops.evaluate.metrics.functional.specificity", "cyclops.evaluate.metrics.functional.stat_scores", "cyclops.evaluate.metrics.metric", "cyclops.evaluate.metrics.metric.Metric", "cyclops.evaluate.metrics.metric.MetricCollection", "cyclops.evaluate.metrics.metric.OperatorMetric", "cyclops.evaluate.metrics.precision_recall", "cyclops.evaluate.metrics.precision_recall.BinaryPrecision", "cyclops.evaluate.metrics.precision_recall.BinaryRecall", "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision", "cyclops.evaluate.metrics.precision_recall.MulticlassRecall", "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision", "cyclops.evaluate.metrics.precision_recall.MultilabelRecall", "cyclops.evaluate.metrics.precision_recall.Precision", "cyclops.evaluate.metrics.precision_recall.Recall", "cyclops.evaluate.metrics.precision_recall_curve", "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve", "cyclops.evaluate.metrics.roc", "cyclops.evaluate.metrics.roc.BinaryROCCurve", "cyclops.evaluate.metrics.roc.MulticlassROCCurve", "cyclops.evaluate.metrics.roc.MultilabelROCCurve", "cyclops.evaluate.metrics.roc.ROCCurve", "cyclops.evaluate.metrics.sensitivity", "cyclops.evaluate.metrics.sensitivity.BinarySensitivity", "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity", "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity", "cyclops.evaluate.metrics.sensitivity.Sensitivity", "cyclops.evaluate.metrics.specificity", "cyclops.evaluate.metrics.specificity.BinarySpecificity", "cyclops.evaluate.metrics.specificity.MulticlassSpecificity", "cyclops.evaluate.metrics.specificity.MultilabelSpecificity", "cyclops.evaluate.metrics.specificity.Specificity", "cyclops.evaluate.metrics.stat_scores", "cyclops.evaluate.metrics.stat_scores.BinaryStatScores", "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores", "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores", "cyclops.evaluate.metrics.stat_scores.StatScores", "cyclops.monitor.clinical_applicator", "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator", "cyclops.monitor.synthetic_applicator", "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator", "cyclops.monitor.synthetic_applicator.binary_noise_shift", "cyclops.monitor.synthetic_applicator.feature_association_shift", "cyclops.monitor.synthetic_applicator.feature_swap_shift", "cyclops.monitor.synthetic_applicator.gaussian_noise_shift", "cyclops.monitor.synthetic_applicator.knockout_shift", "cyclops.query.base", "cyclops.query.base.DatasetQuerier", "cyclops.query.eicu", "cyclops.query.eicu.EICUQuerier", "cyclops.query.gemini", "cyclops.query.gemini.GEMINIQuerier", "cyclops.query.interface", "cyclops.query.interface.QueryInterface", "cyclops.query.mimiciii", "cyclops.query.mimiciii.MIMICIIIQuerier", "cyclops.query.mimiciv", "cyclops.query.mimiciv.MIMICIVQuerier", "cyclops.query.omop", "cyclops.query.omop.OMOPQuerier", "cyclops.query.ops", "cyclops.query.ops.AddColumn", "cyclops.query.ops.AddDeltaColumn", "cyclops.query.ops.AddDeltaConstant", "cyclops.query.ops.AddNumeric", "cyclops.query.ops.And", "cyclops.query.ops.Apply", "cyclops.query.ops.Cast", "cyclops.query.ops.ConditionAfterDate", "cyclops.query.ops.ConditionBeforeDate", "cyclops.query.ops.ConditionEndsWith", "cyclops.query.ops.ConditionEquals", "cyclops.query.ops.ConditionGreaterThan", "cyclops.query.ops.ConditionIn", "cyclops.query.ops.ConditionInMonths", "cyclops.query.ops.ConditionInYears", "cyclops.query.ops.ConditionLessThan", "cyclops.query.ops.ConditionLike", "cyclops.query.ops.ConditionRegexMatch", "cyclops.query.ops.ConditionStartsWith", "cyclops.query.ops.ConditionSubstring", "cyclops.query.ops.Distinct", "cyclops.query.ops.Drop", "cyclops.query.ops.DropEmpty", "cyclops.query.ops.DropNulls", "cyclops.query.ops.ExtractTimestampComponent", "cyclops.query.ops.FillNull", "cyclops.query.ops.GroupByAggregate", "cyclops.query.ops.Join", "cyclops.query.ops.Keep", "cyclops.query.ops.Limit", "cyclops.query.ops.Literal", "cyclops.query.ops.Or", "cyclops.query.ops.OrderBy", "cyclops.query.ops.QueryOp", "cyclops.query.ops.RandomizeOrder", "cyclops.query.ops.Rename", "cyclops.query.ops.Reorder", "cyclops.query.ops.ReorderAfter", "cyclops.query.ops.Sequential", "cyclops.query.ops.Substring", "cyclops.query.ops.Trim", "cyclops.query.ops.Union", "cyclops.report.report", "cyclops.report.report.ModelCardReport", "cyclops.tasks.cxr_classification", "cyclops.tasks.cxr_classification.CXRClassificationTask", "cyclops.tasks.mortality_prediction", "cyclops.tasks.mortality_prediction.MortalityPredictionTask", "cyclops.data", "cyclops.evaluate", "cyclops.monitor", "cyclops.query", "cyclops.report", "cyclops.tasks", "Tutorials", "eICU-CRD query API tutorial", "GEMINI query API tutorial", "Heart Failure Prediction", "MIMIC-III query API tutorial", "MIMIC-IV query API tutorial", "Chest X-Ray Disease Classification", "NIHCXR Clinical Drift Experiments Tutorial", "OMOP query API tutorial", "Prolonged Length of Stay Prediction", "monitor API", "query API", "Example use cases"], "terms": {"cyclop": [0, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200], "queri": [0, 2, 3, 189, 201], "interfac": [0, 125, 129, 131, 133, 178], "queryinterfac": [0, 125, 129, 131, 133], "__init__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 123, 125, 127, 129, 131, 133, 173, 180, 182], "clear_data": [0, 127], "data": [0, 2, 3, 24, 26, 27, 49, 50, 52, 54, 69, 72, 89, 95, 112, 114, 115, 116, 117, 118, 119, 125, 127, 129, 131, 169, 178, 180, 182, 189, 194, 195, 196, 197, 199], "join": [0, 127, 131, 190, 191, 192, 193, 194, 195, 197, 198], "op": [0, 127, 131, 189, 190, 191, 193, 197, 198, 200], "run": [0, 1, 3, 121, 127, 189, 190, 191, 192, 193, 197, 198, 200], "save": [0, 127, 178, 182, 192, 198], "union": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 178, 180, 182], "union_al": [0, 127, 176], "addcolumn": [0, 198], "__call__": [0, 5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "adddeltacolumn": [0, 194], "adddeltaconst": 0, "addnumer": 0, "And": [0, 194], "appli": [0, 1, 8, 25, 29, 59, 62, 63, 66, 67, 68, 75, 76, 93, 104, 109, 110, 112, 131, 135, 136, 137, 138, 175, 180, 182, 192, 198], "cast": [0, 5, 121, 123, 125, 127, 129, 131, 133, 191, 192, 194, 198], "conditionafterd": [0, 191, 194, 197], "conditionbefored": [0, 191], "conditionendswith": 0, "conditionequ": [0, 190, 191, 193, 194, 198], "conditiongreaterthan": [0, 198], "conditionin": [0, 139, 166, 198], "conditioninmonth": 0, "conditioninyear": [0, 194], "conditionlessthan": [0, 193, 198], "conditionlik": [0, 139, 166, 194], "conditionregexmatch": [0, 189, 200], "conditionstartswith": 0, "conditionsubstr": [0, 190, 191, 193, 194, 197], "distinct": [0, 191], "drop": [0, 173, 189, 192, 201], "dropempti": [0, 191], "dropnul": 0, "extracttimestampcompon": [0, 198], "fillnul": 0, "groupbyaggreg": [0, 191, 198], "keep": [0, 7, 17, 21, 162, 189, 198, 200], "limit": [0, 21, 127, 169, 189, 192, 193, 194, 195, 197, 198, 200], "liter": [0, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 69, 78, 79, 80, 81, 82, 83, 84, 85, 90, 95, 97, 98, 99, 100, 103, 104, 105, 110, 127, 178], "Or": 0, "orderbi": [0, 191], "queryop": [0, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176], "randomizeord": 0, "renam": [0, 192, 195, 198], "reorder": [0, 172], "reorderaft": 0, "sequenti": [0, 127, 190, 191, 193, 194, 197, 198], "__add__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 173], "append": [0, 173, 195, 198], "extend": [0, 173, 198], "insert": [0, 173], "pop": [0, 75, 173, 192, 198], "substr": [0, 12, 154, 189, 200], "trim": 0, "base": [0, 3, 5, 7, 17, 19, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 189, 192, 200, 201], "datasetqueri": [0, 123, 125, 129, 131, 133, 198], "db": [0, 121, 191, 194], "get_tabl": [0, 121, 123, 125, 129, 131, 133], "list_column": [0, 121, 123, 125, 129, 131, 133, 198], "list_custom_t": [0, 121, 123, 125, 129, 131, 133, 193], "list_schema": [0, 121, 123, 125, 129, 131, 133, 194, 197], "list_tabl": [0, 121, 123, 125, 129, 131, 133, 190, 191, 197], "dataset": [0, 3, 6, 7, 16, 17, 19, 21, 26, 38, 39, 51, 52, 58, 61, 68, 69, 80, 81, 83, 88, 89, 90, 94, 95, 98, 99, 103, 104, 112, 114, 121, 123, 125, 127, 129, 131, 133, 178, 180, 182, 183, 189, 199, 200, 201], "mimiciii": [0, 193, 197], "mimiciiiqueri": [0, 189, 197, 200], "chartev": [0, 129, 131, 193, 194], "diagnos": [0, 125, 129, 131, 189, 200], "labev": [0, 129, 131, 193], "mimiciv": [0, 194], "mimicivqueri": [0, 189, 200], "patient": [0, 125, 131, 189, 192, 195, 196, 198, 200, 201], "eicu": [0, 3, 189, 200], "eicuqueri": [0, 189, 200], "omop": [0, 189, 200], "omopqueri": [0, 189, 200], "map_concept_ids_to_nam": [0, 133, 197], "measur": [0, 133, 189, 200], "observ": [0, 62, 133, 192, 195, 197, 198, 201], "person": [0, 133, 197], "visit_detail": [0, 133, 197], "visit_occurr": [0, 133, 197], "gemini": [0, 121, 123, 129, 131, 133, 189, 200], "geminiqueri": [0, 189, 200], "care_unit": [0, 125], "imag": [0, 4, 5, 17, 21, 118, 125, 178, 180, 183, 189, 195, 196], "ip_admin": [0, 125], "room_transf": [0, 125], "slicer": [0, 192, 195, 196, 198], "compound_filt": 0, "filter_datetim": 0, "filter_non_nul": 0, "filter_rang": 0, "filter_string_contain": 0, "filter_valu": [0, 195], "is_datetim": 0, "overal": [0, 7, 21, 178, 192, 195, 198], "slicespec": [0, 17, 112, 180, 192, 195, 196, 198], "spec_list": [0, 7, 192, 195, 196, 198], "include_overal": [0, 7], "valid": [0, 7, 9, 17, 178, 180, 182, 192], "column_nam": [0, 7, 9, 10, 11, 12, 13, 195], "_registri": [0, 7], "add_slice_spec": [0, 7], "get_slic": [0, 7], "slice": [0, 3, 7, 8, 17, 21, 173, 178, 180, 182, 192, 195, 198], "featur": [0, 7, 9, 10, 11, 12, 13, 15, 17, 112, 116, 117, 178, 180, 182, 189, 195, 201], "medical_imag": 0, "medicalimag": 0, "cast_storag": [0, 5], "decode_exampl": [0, 5], "embed_storag": [0, 5], "encode_exampl": [0, 5], "flatten": [0, 5, 192, 198], "task": [0, 2, 3, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 53, 54, 58, 60, 61, 62, 63, 66, 67, 68, 69, 78, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 110, 189, 195, 201], "cxr_classif": 0, "cxrclassificationtask": 0, "add_model": [0, 180, 182], "data_typ": [0, 180, 182], "evalu": [0, 2, 3, 178, 180, 182, 189, 195, 200, 201], "get_model": [0, 180, 182], "list_model": [0, 180, 182, 192, 198], "models_count": [0, 180, 182], "predict": [0, 3, 17, 19, 21, 24, 26, 27, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 67, 80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 180, 181, 182, 189], "task_typ": [0, 180, 182, 192, 195, 198], "mortality_predict": [0, 192, 198], "mortalitypredictiontask": [0, 192, 198], "list_models_param": [0, 182, 192, 198], "load_model": [0, 182], "save_model": [0, 182], "train": [0, 3, 17, 178, 180, 182, 189, 195, 199, 201], "metric": [0, 17, 19, 21, 178, 180, 182, 189, 192, 198, 201], "__mul__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "add_stat": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "clone": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "comput": [0, 17, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 127, 180, 182, 189, 201], "reset_st": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "update_st": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "metriccollect": [0, 17, 21, 180, 182, 192, 198], "add_metr": [0, 75], "clear": [0, 75, 127], "get": [0, 2, 75, 121, 123, 125, 127, 129, 131, 133, 155, 174, 180, 182, 189, 192, 198, 200, 201], "item": [0, 75, 192, 195, 196, 198], "kei": [0, 7, 17, 21, 75, 161, 170, 173, 178, 192, 195, 196, 198], "popitem": [0, 75], "setdefault": [0, 75], "updat": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 190, 192, 193, 194, 195, 196, 197, 198], "valu": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 138, 145, 146, 147, 150, 157, 158, 160, 161, 162, 165, 178, 189, 195, 196, 198, 201], "operatormetr": 0, "factori": [0, 7, 195], "create_metr": [0, 192, 195, 198], "accuraci": [0, 192, 198], "binaryaccuraci": [0, 192, 198], "multiclassaccuraci": 0, "multilabelaccuraci": 0, "auroc": [0, 189, 192, 198, 201], "binaryauroc": [0, 29, 192, 198], "multiclassauroc": [0, 29], "multilabelauroc": [0, 29, 195], "precision_recal": 0, "binaryprecis": [0, 192, 198], "binaryrecal": [0, 97, 192, 198], "multiclassprecis": 0, "multiclassrecal": [0, 98], "multilabelprecis": 0, "multilabelrecal": [0, 99], "precis": [0, 24, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 64, 66, 77, 78, 80, 82, 85, 86, 87, 88, 89, 90, 92, 100, 105, 192, 198], "recal": [0, 24, 38, 51, 55, 57, 59, 61, 64, 66, 77, 79, 81, 83, 86, 87, 88, 89, 90, 92, 97, 98, 99, 105, 192, 198], "precision_recall_curv": [0, 192, 198], "binaryprecisionrecallcurv": [0, 30, 92, 192, 198], "multiclassprecisionrecallcurv": [0, 31, 93], "multilabelprecisionrecallcurv": [0, 32, 94], "precisionrecallcurv": 0, "roc": [0, 28, 29, 30, 31, 32, 45, 192, 198], "binaryroccurv": [0, 192, 198], "multiclassroccurv": 0, "multilabelroccurv": 0, "roccurv": 0, "sensit": [0, 178, 189, 192, 195, 198, 199], "binarysensit": 0, "multiclasssensit": 0, "multilabelsensit": 0, "specif": [0, 7, 17, 115, 118, 180, 182, 192, 195, 198], "binaryspecif": 0, "multiclassspecif": 0, "multilabelspecif": 0, "f_beta": 0, "binaryf1scor": [0, 192, 198], "binaryfbetascor": [0, 34], "f1score": 0, "fbetascor": [0, 36], "multiclassf1scor": 0, "multiclassfbetascor": [0, 38], "multilabelf1scor": 0, "multilabelfbetascor": [0, 40], "stat_scor": 0, "binarystatscor": [0, 25, 35, 78, 79, 102], "multiclassstatscor": [0, 26, 39, 80, 81, 103], "multilabelstatscor": [0, 27, 41, 82, 83, 104], "statscor": 0, "function": [0, 3, 5, 6, 7, 8, 16, 17, 20, 21, 25, 35, 41, 42, 76, 93, 102, 104, 107, 109, 110, 113, 131, 135, 136, 137, 138, 140, 161, 168, 175, 178, 190, 191, 192, 193, 194, 195, 197, 198, 200], "binary_precis": 0, "binary_recal": 0, "multiclass_precis": 0, "multiclass_recal": 0, "multilabel_precis": 0, "multilabel_recal": 0, "binary_roc_curv": 0, "multiclass_roc_curv": 0, "multilabel_roc_curv": 0, "roc_curv": [0, 192, 198], "binary_f1_scor": 0, "binary_fbeta_scor": 0, "f1_score": [0, 192, 198], "fbeta_scor": 0, "multiclass_f1_scor": 0, "multiclass_fbeta_scor": 0, "multilabel_f1_scor": 0, "multilabel_fbeta_scor": 0, "fair": [0, 17, 178, 180, 182, 192, 195, 198], "evaluate_fair": [0, 195], "warn_too_many_unique_valu": 0, "config": [0, 182, 190, 193, 194, 197], "fairnessconfig": [0, 17, 180, 182, 192, 198], "monitor": [0, 2, 3, 189, 192, 195, 196, 198], "clinical_appl": 0, "clinicalshiftappl": [0, 196], "ag": [0, 112, 189, 196, 201], "apply_shift": [0, 112, 114, 196], "custom": [0, 112, 121, 123, 125, 129, 131, 133, 178, 193, 196], "hospital_typ": [0, 112], "month": [0, 7, 9, 112, 148, 159, 192, 195, 198], "sex": [0, 112, 189, 196, 198, 201], "time": [0, 7, 75, 112, 159, 178, 189, 199, 201], "synthetic_appl": 0, "binary_noise_shift": 0, "feature_association_shift": 0, "feature_swap_shift": 0, "gaussian_noise_shift": 0, "knockout_shift": 0, "syntheticshiftappl": [0, 113], "report": [0, 2, 3, 110, 125, 189, 195, 200, 201], "modelcardreport": [0, 192, 195, 198], "export": [0, 178, 192, 195, 198], "from_json_fil": [0, 178], "log_cit": [0, 178, 195], "log_dataset": [0, 178, 192], "log_descriptor": [0, 178, 192, 195, 198], "log_fairness_assess": [0, 178, 192, 195, 198], "log_from_dict": [0, 178, 192, 195, 198], "log_imag": [0, 178], "log_licens": [0, 178, 192, 198], "log_model_paramet": [0, 178, 192, 198], "log_own": [0, 178, 192, 195, 198], "log_performance_metr": [0, 178, 192, 198], "log_plotly_figur": [0, 178, 192, 195, 198], "log_quantitative_analysi": [0, 178, 192, 195, 198], "log_refer": [0, 178, 192, 198], "log_regul": [0, 178], "log_risk": [0, 178, 192, 195, 198], "log_use_cas": [0, 178, 192, 195, 198], "log_us": [0, 178, 192, 195, 198], "log_vers": [0, 178, 192, 198], "thank": 1, "your": [1, 192], "interest": [1, 192, 198], "To": [1, 3, 5, 192, 198], "submit": 1, "pr": 1, "pleas": [1, 190, 192, 193, 194, 195, 196, 197, 198], "fill": [1, 160], "out": [1, 178, 192, 198], "templat": [1, 178], "along": [1, 112, 192, 195, 198], "If": [1, 5, 7, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 167, 175, 178, 180, 182, 192, 198], "fix": 1, "an": [1, 3, 5, 7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 51, 60, 61, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 125, 127, 129, 131, 133, 136, 139, 162, 166, 170, 178, 192, 195, 198], "issu": [1, 21], "don": 1, "t": [1, 5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 178], "forget": 1, "link": [1, 178, 192, 195, 198], "onc": [1, 75, 192, 195, 198], "python": [1, 3, 198, 200], "virtual": [1, 3], "environ": [1, 3, 192, 198], "i": [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 131, 133, 135, 136, 137, 138, 140, 154, 157, 158, 162, 169, 178, 180, 182, 190, 192, 193, 194, 195, 197, 198, 200, 201], "setup": [1, 190, 191, 193, 194, 197, 198], "you": [1, 3, 5, 75, 192, 195, 198, 199, 200], "can": [1, 3, 5, 7, 21, 25, 38, 51, 69, 75, 84, 85, 95, 100, 110, 121, 123, 125, 129, 131, 133, 140, 154, 178, 182, 192, 195, 198, 199], "us": [1, 2, 5, 7, 8, 17, 21, 24, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 63, 66, 67, 68, 69, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 102, 105, 107, 110, 112, 114, 121, 123, 125, 127, 129, 131, 133, 136, 139, 155, 161, 162, 166, 169, 176, 178, 180, 182, 189, 190, 192, 193, 195, 197, 198, 199, 200], "all": [1, 7, 8, 9, 10, 11, 12, 13, 15, 63, 73, 75, 108, 109, 110, 127, 154, 167, 170, 176, 182, 189, 191, 192, 196, 198, 200], "file": [1, 5, 127, 178, 192, 195, 198], "For": [1, 21, 76, 133, 178, 192, 198], "style": [1, 162], "we": [1, 3, 178, 192, 195, 197, 198], "recommend": [1, 76], "googl": 1, "guid": 1, "black": 1, "format": [1, 5, 7, 89, 127, 142, 143, 162, 178, 192, 197, 198], "docstr": 1, "numpi": [1, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 180, 192, 195, 196, 198], "also": [1, 3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 140, 192, 198, 201], "flake8": 1, "pylint": [1, 140], "further": 1, "static": 1, "analysi": [1, 178, 192, 195, 198], "The": [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 61, 63, 66, 68, 69, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 127, 131, 136, 140, 163, 178, 180, 182, 186, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201], "show": [1, 190, 192, 193, 194, 195, 197, 198], "error": [1, 189, 201], "which": [1, 9, 10, 11, 12, 13, 21, 90, 121, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 178, 192, 195, 197, 198, 201], "need": [1, 17, 21, 174, 192, 198], "befor": [1, 17, 21, 22, 143, 162, 182, 192, 198], "last": 1, "least": 1, "type": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 189, 194, 201], "hint": 1, "our": [1, 192, 198], "check": [1, 14, 89, 127, 170], "mypi": 1, "current": [1, 141, 178, 192, 195, 198], "ar": [1, 5, 7, 11, 12, 17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 100, 103, 104, 105, 108, 109, 110, 112, 116, 121, 131, 140, 162, 178, 192, 195, 198], "strict": 1, "enforc": 1, "more": [1, 7, 16, 17, 180, 182, 192, 201], "api": [1, 2, 3, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 189, 192, 201], "becom": [1, 127, 169], "stabl": [1, 190, 192, 193, 194, 195, 196, 197, 198], "start": [2, 17, 153, 174, 192, 198], "instal": [2, 192], "pip": [2, 192], "develop": [2, 192, 195, 198], "poetri": 2, "conda": 2, "contribut": 2, "notebook": [2, 190, 192, 193, 194, 195, 197, 198], "citat": [2, 178, 192, 195, 198], "pre": [2, 192, 198], "commit": 2, "hook": 2, "code": [2, 190, 192, 193, 194, 197, 198], "guidelin": [2, 3], "tutori": [2, 192, 195, 198, 199, 200, 201], "exampl": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 189, 192, 195, 198, 199, 200], "case": [2, 3, 75, 115, 178, 189, 192, 198, 199], "refer": [2, 3, 178, 192, 195, 198], "toolkit": 3, "facilit": 3, "research": 3, "deploy": 3, "ml": [3, 192, 198], "model": [3, 16, 17, 21, 178, 180, 182, 189, 197, 199, 201], "healthcar": 3, "It": [3, 38, 51, 75, 84, 85, 100, 105, 140, 199, 200], "provid": [3, 7, 9, 12, 17, 21, 69, 110, 121, 123, 125, 129, 131, 133, 140, 154, 160, 161, 167, 178, 186, 192, 197, 198], "few": 3, "high": [3, 192, 198], "level": [3, 21, 192, 198], "name": [3, 7, 8, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 121, 123, 125, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 166, 170, 171, 172, 174, 178, 180, 182, 192, 195, 196, 197, 198], "ehr": [3, 121, 186, 197, 200], "databas": [3, 121, 123, 125, 126, 127, 129, 131, 133, 186, 190, 191, 192, 193, 194, 197, 198, 200], "mimic": [3, 128, 129, 130, 131, 189, 197, 200], "iv": [3, 130, 189, 200], "creat": [3, 6, 7, 21, 42, 43, 75, 84, 85, 100, 115, 118, 119, 121, 127, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 175, 178, 180, 182, 189, 195, 200, 201], "infer": [3, 17, 131], "popular": [3, 192], "effici": 3, "load": [3, 17, 178, 182, 189, 197, 198, 199, 201], "differ": [3, 24, 29, 36, 37, 46, 55, 62, 63, 64, 69, 70, 72, 84, 85, 90, 95, 100, 105, 154, 162, 189, 192, 195, 198, 199], "modal": 3, "common": [3, 192, 197], "implement": [3, 168, 201], "scikit": [3, 192], "learn": [3, 192, 195], "pytorch": 3, "canon": 3, "mortal": [3, 181, 182, 189, 200], "chest": [3, 179, 180, 189], "x": [3, 114, 115, 116, 117, 118, 119, 140, 179, 180, 182, 189, 192, 196, 198], "rai": [3, 179, 180, 189], "classif": [3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 78, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 179, 180, 182, 189, 192, 198], "clinic": [3, 111, 112, 189, 199], "detect": [3, 195, 199], "shift": [3, 111, 112, 114, 116, 117, 189, 199], "relev": [3, 178, 192, 198, 199], "card": [3, 178, 189, 192, 198, 201], "librari": [3, 189, 199, 201], "end": [3, 144, 173, 189, 192, 195, 198, 200], "iii": [3, 128, 129, 189, 197, 200], "crd": [3, 122, 189, 200], "python3": [3, 190, 192, 193, 194, 195, 196, 197, 198], "m": [3, 192, 193, 195, 196, 198], "pycyclop": [3, 190, 192, 193, 194, 195, 196, 197, 198], "packag": [3, 183, 184, 185, 187, 190, 192, 193, 194, 195, 196, 197, 198], "support": [3, 7, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 72, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 107, 108, 109, 122, 128, 130, 141, 199], "process": [3, 112, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 192, 195, 198], "transform": [3, 17, 66, 67, 68, 93, 180, 182, 192, 195, 196, 198], "downstream": [3, 121, 123, 125, 129, 131, 133, 192, 198], "addit": [3, 75, 127, 131, 178, 180, 182, 192, 198], "from": [3, 5, 7, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 119, 125, 127, 131, 133, 159, 162, 170, 175, 178, 180, 182, 189, 190, 192, 193, 195, 196, 197, 198, 200], "other": [3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 135, 172, 173, 192], "thei": [3, 69], "extra": [3, 178], "multipl": [3, 8, 17, 21, 75, 125, 139, 140, 161, 166, 178], "could": [3, 192, 198], "combin": [3, 8, 135, 139, 166, 192], "both": [3, 162], "set": [3, 7, 17, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 178, 189, 192, 195, 198, 200], "up": [3, 192, 195, 198], "henc": 3, "make": [3, 154, 192, 198], "sure": [3, 192], "sourc": [3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 189, 199], "env": 3, "info": [3, 125, 190, 191, 192, 193, 194, 197, 198], "path": [3, 5, 112, 127, 178, 182, 192, 195, 198], "bin": [3, 21], "activ": [3, 198], "build": [3, 112, 121, 200], "built": 3, "sphinx": 3, "local": 3, "cd": 3, "doc": 3, "html": [3, 178, 190, 192, 193, 194, 195, 196, 197, 198], "sphinxopt": 3, "d": [3, 75, 112, 195], "nbsphinx_allow_error": 3, "true": [3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 26, 27, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 121, 123, 125, 129, 131, 133, 135, 136, 151, 154, 167, 170, 176, 178, 180, 182, 190, 191, 192, 195, 196, 197, 198], "welcom": 3, "see": [3, 7, 178, 190, 192, 193, 194, 195, 196, 197, 198], "jupyt": [3, 190, 192, 193, 194, 195, 196, 197, 198], "insid": 3, "ipython": 3, "kernel": 3, "after": [3, 17, 121, 131, 140, 142, 172, 173, 189, 192, 198, 200], "ipykernel": 3, "user": [3, 178, 190, 191, 192, 193, 194, 197, 198], "name_of_kernel": 3, "now": 3, "navig": 3, "": [3, 7, 10, 14, 17, 21, 75, 127, 133, 140, 160, 178, 180, 182, 190, 191, 192, 193, 194, 195, 196, 197, 198], "tab": [3, 192], "cite": 3, "when": [3, 5, 17, 21, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 75, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105, 121, 154, 162, 169, 180, 182, 192, 198], "project": 3, "paper": 3, "articl": 3, "krishnan2022": 3, "12": [3, 7, 192, 193, 194, 195, 198], "02": [3, 69], "22283021": 3, "author": [3, 192, 195], "krishnan": 3, "amrit": 3, "subasri": 3, "vallijah": 3, "mckeen": 3, "kaden": 3, "kore": 3, "ali": 3, "ogidi": 3, "franklin": 3, "alinoori": 3, "mahshid": 3, "lalani": 3, "nadim": 3, "dhalla": 3, "azra": 3, "verma": 3, "amol": 3, "razak": 3, "fahad": 3, "pandya": 3, "deval": 3, "dolatabadi": 3, "elham": 3, "titl": [3, 189, 192, 195, 198, 200], "cyclic": 3, "toward": 3, "operation": 3, "health": [3, 192, 198], "eloc": 3, "id": [3, 5, 112, 133, 192, 195, 198], "2022": [3, 7, 195, 197], "year": [3, 7, 9, 131, 148, 149, 159, 189, 192, 195, 197, 198, 200], "doi": 3, "10": [3, 164, 189, 192, 195, 196, 198, 200], "1101": 3, "publish": [3, 192], "cold": 3, "spring": 3, "harbor": 3, "laboratori": [3, 198], "press": 3, "url": [3, 195], "http": [3, 178, 190, 192, 193, 194, 195, 196, 197, 198], "www": [3, 192], "medrxiv": 3, "org": [3, 178, 192, 195, 198], "content": [3, 178], "earli": 3, "08": 3, "journal": 3, "medic": [4, 5, 183, 189, 195, 198, 200, 201], "class": [4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 192, 194, 195, 198], "decod": [5, 195], "none": [5, 7, 9, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 167, 174, 175, 178, 180, 182, 192, 195, 196, 198], "reader": 5, "itkread": 5, "suffix": 5, "jpg": 5, "read": [5, 17], "paramet": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 190, 192, 193, 194, 195, 197, 198], "bool": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 75, 76, 108, 109, 110, 112, 116, 117, 121, 123, 125, 127, 129, 131, 133, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 166, 167, 170, 176, 178, 180, 182, 195], "option": [5, 7, 9, 10, 11, 12, 13, 17, 21, 24, 27, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 69, 75, 80, 81, 82, 83, 84, 85, 90, 95, 98, 99, 100, 103, 104, 105, 108, 112, 114, 121, 123, 125, 127, 129, 131, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 176, 178, 180, 182], "default": [5, 7, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 153, 178, 180, 182, 192, 198], "whether": [5, 7, 21, 75, 108, 109, 110, 112, 121, 123, 125, 127, 129, 131, 133, 154, 167, 170, 176, 178, 198, 201], "fals": [5, 7, 9, 10, 11, 12, 13, 14, 19, 21, 29, 30, 40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105, 107, 108, 109, 110, 117, 118, 127, 135, 136, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 166, 167, 176, 180, 182, 191, 192, 195, 198], "return": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 189, 190, 191, 193, 197, 198, 200], "dictionari": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 75, 161, 178, 180, 182, 192, 198], "image_path": 5, "byte": 5, "image_byt": 5, "str": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 170, 171, 172, 173, 174, 175, 178, 180, 182, 192, 194, 198], "imageread": 5, "monai": [5, 195, 196], "method": [5, 7, 19, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 182, 192, 193, 195, 198], "attribut": [5, 7, 19, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 180, 182, 192, 198], "call": [5, 168, 178], "self": [5, 121], "storag": 5, "arrow": 5, "arrai": [5, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 63, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 119, 180, 195], "convert": [5, 25, 35, 41, 48, 61, 69, 95, 102, 104, 107, 141, 162, 192, 198], "pyarrow": 5, "rtype": 5, "structarrai": 5, "pa": 5, "string": [5, 7, 9, 12, 17, 21, 75, 144, 153, 161, 162, 165, 174, 175, 178, 189, 195, 200], "must": [5, 9, 17, 21, 141, 147, 148, 149, 154, 161, 178], "contain": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 27, 103, 104, 127, 178, 189, 192, 195, 198, 200, 201], "binari": [5, 24, 25, 29, 30, 34, 35, 36, 37, 47, 48, 49, 50, 56, 57, 60, 61, 62, 63, 66, 69, 72, 78, 79, 84, 85, 87, 90, 92, 95, 97, 100, 102, 104, 105, 107, 110, 115, 182, 192, 195, 198, 201], "struct": 5, "order": [5, 17, 107, 108, 109, 127, 167, 169, 171, 172], "doesn": 5, "matter": 5, "list": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 141, 147, 148, 149, 154, 155, 156, 157, 158, 160, 161, 162, 163, 166, 167, 171, 172, 173, 175, 178, 180, 182, 190, 191, 192, 193, 194, 197, 198], "arg": [5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 168, 169, 173], "stringarrai": 5, "listarrai": 5, "token_per_repo_id": 5, "serial": 5, "version": [5, 178, 192, 195, 198], "dict": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 75, 121, 123, 125, 129, 131, 133, 161, 170, 178, 180, 182], "access": 5, "privat": 5, "repositori": [5, 192], "hub": 5, "pass": [5, 17, 43, 75, 112, 178, 182, 190, 192, 193, 194, 197, 198], "repo_id": 5, "token": [5, 192], "deseri": 5, "np": [5, 11, 14, 21, 180, 182, 192, 195, 196, 198], "ndarrai": [5, 14, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 180, 182], "metadata": [5, 192, 195, 198], "emb": 5, "encod": 5, "input": [5, 24, 46, 55, 60, 61, 64, 69, 70, 72, 87, 89, 95, 115, 118, 140, 180, 182], "state": [5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "itself": 5, "otherwis": [5, 14, 24, 27, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110, 135, 136, 137, 138, 175], "tupl": [5, 7, 66, 67, 68, 69, 75, 87, 88, 89, 92, 93, 94, 112, 127, 162, 180, 182], "classlabel": [5, 192, 198], "translat": 5, "translationvariablelanguag": 5, "sequenc": [5, 17, 75, 161, 173, 180, 182, 195], "array2d": 5, "array3d": 5, "array4d": 5, "array5d": 5, "audio": 5, "subset": [6, 189, 200], "hug": [6, 180, 182, 189, 201], "face": [6, 180, 182, 189, 201], "object": [7, 19, 21, 112, 114, 121, 125, 126, 127, 129, 131, 133, 136, 137, 140, 142, 143, 161, 168, 173, 178, 180, 182, 192, 198, 200], "ani": [7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 121, 123, 125, 127, 129, 131, 133, 136, 144, 145, 146, 147, 150, 153, 154, 160, 165, 178, 180, 182, 192, 195, 198], "A": [7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 25, 75, 76, 104, 109, 126, 137, 142, 143, 162, 178, 192, 195, 198], "each": [7, 8, 17, 21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 69, 75, 76, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110, 133, 140, 167, 189, 190, 192, 193, 194, 197, 198, 200], "map": [7, 8, 22, 43, 75, 121, 123, 125, 129, 131, 133, 170, 180, 182, 192, 195, 198], "column": [7, 8, 9, 10, 11, 12, 13, 17, 21, 112, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 170, 171, 172, 174, 175, 180, 182, 192, 195, 198], "one": [7, 16, 17, 21, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 69, 76, 80, 81, 82, 83, 84, 85, 95, 98, 99, 100, 105, 154, 180, 182, 189, 200], "follow": [7, 17, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105, 172, 178, 192, 195, 197, 198], "exact": [7, 13], "select": [7, 112, 116, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 192, 194, 195, 198], "thi": [7, 17, 21, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105, 121, 138, 154, 161, 162, 178, 182, 190, 192, 193, 194, 195, 197, 198, 201], "singl": [7, 75, 140, 178, 182, 192, 198], "row": [7, 127, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 164, 167, 169, 189, 191, 192, 193, 194, 195, 197, 200], "where": [7, 8, 9, 10, 11, 12, 13, 60, 61, 63, 75, 127, 174, 178, 182, 192, 198, 201], "e": [7, 9, 10, 17, 21, 75, 116, 117, 118, 121, 159, 162, 165, 178, 192, 198], "g": [7, 9, 17, 21, 116, 117, 118, 159, 162, 165, 178, 192, 198], "2021": [7, 189, 192, 197, 200], "01": [7, 29, 31, 32, 142, 143, 191, 192, 194, 195, 197, 198], "00": [7, 192, 195, 196, 197, 198], "min_valu": [7, 11, 192, 195, 196, 198], "minimum": [7, 11], "specifi": [7, 17, 75, 112, 121, 123, 125, 129, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 161, 162, 163, 172, 175, 178, 180, 182, 192, 195, 198], "min_inclus": [7, 11, 192, 198], "indic": [7, 21, 27, 60, 61, 115, 118, 192, 198], "includ": [7, 11, 21, 72, 112, 114, 146, 150, 192, 195, 198, 199], "rang": [7, 11, 29, 30, 66, 67, 68, 93, 192, 195, 198], "work": [7, 27, 103, 104, 135, 178, 192, 195, 198], "numer": [7, 11, 138, 192, 198], "datetim": [7, 9, 11, 14, 121, 123, 125, 129, 131, 133, 137, 142, 143, 178, 192, 195, 198], "inf": [7, 11, 192, 195, 198], "max_valu": [7, 11, 192, 195, 196, 198], "boolean": [7, 8, 9, 10, 11, 12, 13, 15, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "greater": [7, 22, 146, 150, 198], "than": [7, 11, 22, 48, 52, 54, 135, 136, 146, 150, 180, 182, 189, 192, 198, 200, 201], "equal": [7, 11, 21, 145, 146, 150], "maximum": [7, 11, 22, 29, 30], "max_inclus": [7, 11, 192, 198], "less": [7, 11, 48, 52, 54, 150, 189, 198, 200], "match": [7, 9, 12, 13, 17, 152, 197], "between": [7, 21, 38, 51, 69, 95, 189, 200], "1": [7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 117, 118, 119, 137, 138, 140, 142, 143, 145, 146, 147, 148, 150, 160, 165, 178, 189, 192, 195, 198, 199, 200, 201], "dai": [7, 9, 137, 198, 201], "31": [7, 189, 192, 198, 200], "hour": [7, 9], "0": [7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 130, 160, 174, 178, 190, 191, 192, 193, 194, 195, 196, 197, 198], "23": [7, 192, 198], "negat": [7, 9, 10, 11, 12, 13, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 195], "flag": [7, 162], "doe": [7, 9, 11, 12, 13, 17, 21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 178], "keep_nul": [7, 9, 11, 12, 13], "null": [7, 9, 10, 11, 12, 13, 158, 160, 198], "conjunct": [7, 195], "its": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 60, 61, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 192, 195, 198], "own": [7, 192, 198], "callabl": [7, 8, 17, 21, 76, 140, 178], "import": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 178, 189, 199, 200, 201], "slice_spec": [7, 17, 180, 182, 192, 195, 198], "feature_1": 7, "feature_2": 7, "feature_3": 7, "value_1": 7, "value_2": 7, "2020": [7, 9, 142, 143, 149, 189, 195, 200], "5": [7, 24, 25, 27, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 115, 118, 119, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200], "60": [7, 195], "6": [7, 24, 26, 35, 36, 38, 39, 49, 56, 59, 62, 63, 78, 79, 80, 81, 83, 84, 85, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 104, 107, 108, 110, 189, 191, 192, 193, 195, 196, 197, 198, 200], "7": [7, 29, 30, 31, 36, 39, 40, 69, 80, 81, 82, 84, 85, 87, 88, 89, 93, 98, 100, 105, 108, 109, 110, 189, 191, 192, 195, 197, 198, 200, 201], "8": [7, 24, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 40, 41, 47, 49, 50, 53, 54, 56, 59, 60, 62, 66, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 105, 107, 109, 110, 189, 192, 195, 197, 198, 200], "2000": 7, "2010": [7, 189, 200], "slice_nam": [7, 178, 192, 195, 198], "slice_func": 7, "print": [7, 190, 191, 192, 193, 194, 195, 197, 198], "do": [7, 17], "someth": 7, "here": [7, 192, 198], "filter": [7, 9, 10, 11, 12, 13, 17, 21, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 166, 189, 192, 195, 196, 198, 200], "add": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 135, 136, 137, 138, 165, 173, 178, 180, 182, 192, 195, 198], "detail": [7, 127, 192, 195, 198], "registri": [7, 192, 198], "gener": [7, 69, 95, 112, 178, 189, 195, 197, 199, 201], "slice_funct": 8, "result": [8, 17, 38, 51, 127, 173, 180, 182, 190, 192, 193, 194, 195, 196, 197, 198], "bitwis": 8, "AND": 8, "signatur": 8, "should": [8, 21, 69, 76, 95, 117, 127, 178, 180, 182, 192, 195, 198], "kwarg": [8, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 121, 123, 125, 129, 131, 133, 168, 169, 180, 182], "given": [9, 11, 12, 13, 14, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 75, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110, 160, 173, 178, 180, 182], "int": [9, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 116, 117, 118, 119, 127, 138, 141, 148, 149, 162, 164, 173, 174, 178, 180, 182, 192, 198], "compon": [9, 159], "have": [9, 12, 13, 17, 114, 121, 123, 125, 129, 131, 133, 147, 154, 162, 189, 192, 200, 201], "nan": [9, 10, 189, 201], "nat": 9, "rais": [9, 11, 12, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 178, 180, 182], "typeerror": [9, 11, 12, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 178], "float": [11, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 115, 116, 117, 118, 119, 138, 141, 178], "valueerror": [11, 17, 21, 48, 50, 52, 54, 58, 59, 60, 61, 62, 63, 69, 178, 180, 182], "either": [11, 30, 31, 32, 75, 87, 88, 89, 92, 93, 94, 110, 178, 192, 198], "ha": [13, 75, 174, 178, 192, 195, 198], "find": [13, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 195], "perform": [13, 26, 27, 31, 32, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 178, 189, 197, 199, 201], "datetime64": 14, "target_column": [17, 19, 21, 192, 195, 198], "feature_column": [17, 195, 196], "prediction_column_prefix": [17, 180, 182, 192, 195, 198], "remove_column": [17, 19, 21, 180, 182, 195], "split": [17, 112, 178, 180, 182, 192, 195, 198], "batch_siz": [17, 19, 21, 112, 180, 182, 192, 198], "1000": [17, 19, 21, 112, 182, 192], "fairness_config": [17, 180, 182, 192, 198], "override_fairness_metr": [17, 180, 182, 192, 198], "load_dataset_kwarg": 17, "datasetdict": [17, 180, 182], "load_dataset": 17, "argument": [17, 21, 43, 75, 131, 136, 144, 145, 146, 147, 150, 153, 154, 180, 182, 192, 198], "target": [17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 116, 117, 180, 182, 189, 192, 198, 199, 201], "prefix": [17, 75], "ad": [17, 114, 127, 135, 136, 137, 138, 173, 178, 180, 182, 192, 198], "model_nam": [17, 180, 182, 192, 195, 196, 198], "remov": [17, 21, 75, 119, 157, 158, 180, 182, 192, 195, 198], "mai": [17, 21, 189, 192, 195, 198, 200], "expens": [17, 21, 162], "memori": [17, 21], "wrappedmodel": [17, 180, 182], "entir": [17, 192, 198], "being": [17, 135, 136, 137, 138, 142, 143, 145, 148, 149], "note": [17, 121, 131, 178, 190, 192, 195, 197, 198], "chosen": 17, "avail": [17, 178, 192, 198, 201], "first": [17, 21, 25, 76, 104, 176, 190, 192, 193, 194, 197, 198], "test": [17, 178, 180, 182, 189, 192, 198, 199, 200, 201], "eval": 17, "val": 17, "dev": 17, "batch": [17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 180, 182, 189, 195, 200], "size": [17, 21, 112, 180, 182, 192, 195, 198], "neg": [17, 35, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 63, 72, 81, 83, 85, 98, 99, 100, 105, 107, 108, 109, 135, 136, 198], "integ": [17, 21, 165, 178], "configur": [17, 18, 19, 121, 123, 125, 129, 131, 133, 180, 182, 192, 198], "overridden": [17, 180, 182], "prediction_column": [17, 19, 21, 195], "keyword": [17, 21, 43, 75, 144, 145, 146, 147, 150, 153, 154, 176, 182, 189, 200], "onli": [17, 21, 24, 27, 29, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 62, 63, 75, 80, 81, 82, 84, 85, 98, 100, 103, 104, 105, 108, 109, 110, 154, 162, 163, 189, 200], "found": [17, 75, 178, 190, 192, 193, 194, 195, 196, 197, 198], "group": [19, 21, 22, 75, 161, 178, 192, 195, 198], "group_valu": [19, 21], "group_bin": [19, 21, 192, 195, 198], "group_base_valu": [19, 21, 192, 195, 198], "threshold": [19, 21, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 102, 104, 105, 107, 109, 110, 178, 189, 192, 198, 201], "compute_optimal_threshold": [19, 21], "metric_nam": [19, 21, 43, 178, 192, 195, 198], "metric_kwarg": [19, 21], "take": [21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 112, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 189, 192, 200], "allow": [21, 22, 121, 123, 125, 129, 131, 133, 192, 198, 199, 200], "intersect": 21, "treat": 21, "multilabel": [21, 24, 27, 29, 32, 36, 37, 40, 41, 49, 50, 53, 54, 60, 61, 62, 63, 68, 69, 72, 82, 83, 84, 85, 89, 90, 94, 95, 99, 100, 104, 105, 109, 110, 189, 201], "same": [21, 75, 116, 161, 162], "uniqu": [21, 22, 29, 30, 31, 32, 66, 67, 68, 69, 87, 88, 89, 92, 93, 94, 95, 195, 201], "number": [21, 22, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 103, 104, 105, 108, 110, 112, 116, 117, 127, 164, 172, 178, 180, 182, 189, 194, 198, 199, 200], "continu": [21, 192, 195, 198], "veri": 21, "slow": [21, 169], "larg": [21, 169], "denomin": 21, "pariti": [21, 189, 201], "across": [21, 116, 199], "linspac": 21, "monoton": [21, 69, 95], "control": [21, 115], "usag": [21, 192, 198], "rel": 21, "small": 21, "32": [21, 192, 198], "avoid": 21, "optim": [21, 192], "oper": [21, 65, 76, 127, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "necessari": 21, "nest": 21, "second": [21, 76], "third": 21, "omit": 21, "requir": [21, 24, 29, 36, 37, 49, 50, 69, 84, 85, 90, 95, 100, 105, 110, 178, 180, 182, 192, 198], "huggingfac": [21, 112, 180, 182], "runtimeerror": 21, "empti": [21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 157], "encount": [21, 125, 189, 198, 200], "unique_valu": 22, "max_unique_valu": 22, "50": [22, 192, 195, 196, 198], "warn": [22, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 102, 103, 104, 105], "score": [24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 70, 72, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110], "multiclass": [24, 26, 29, 31, 36, 37, 38, 39, 49, 50, 51, 52, 58, 59, 62, 63, 67, 69, 72, 80, 81, 84, 85, 88, 90, 93, 95, 98, 100, 103, 105, 108, 110], "One": [24, 29, 31, 32, 35, 48, 59, 62, 63, 69, 95, 195, 198], "pos_label": [24, 25, 30, 34, 35, 36, 37, 47, 48, 49, 50, 56, 57, 62, 63, 66, 69, 78, 79, 84, 85, 87, 90, 92, 95, 97, 100, 102, 105, 107, 110], "label": [24, 25, 27, 29, 32, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 92, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 116, 117, 119, 135, 136, 137, 138, 159, 161, 165, 175, 180, 182, 189, 192, 193, 194, 195, 201], "consid": [24, 26, 27, 36, 37, 49, 50, 62, 63, 84, 85, 90, 95, 100, 103, 104, 105, 133], "posit": [24, 25, 29, 30, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 92, 95, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 195], "num_class": [24, 26, 29, 31, 36, 37, 38, 39, 49, 50, 51, 52, 58, 59, 61, 62, 63, 67, 69, 80, 81, 84, 85, 88, 90, 93, 95, 98, 100, 103, 105, 108, 110, 192, 198], "decid": [24, 36, 37, 40, 41, 49, 50, 53, 54, 56, 57, 60, 61, 78, 79, 82, 83, 84, 85, 97, 99, 100, 105], "top_k": [24, 26, 27, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110], "probabl": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 80, 81, 82, 84, 85, 93, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 182, 192, 198], "logit": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 72, 80, 81, 82, 84, 85, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110], "top": [24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110], "k": [24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 75, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110, 196], "num_label": [24, 27, 29, 32, 36, 37, 40, 41, 49, 50, 53, 54, 60, 61, 62, 63, 68, 69, 82, 83, 84, 85, 89, 90, 94, 95, 99, 100, 104, 105, 109, 110, 195], "averag": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 192], "micro": [24, 26, 27, 29, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "macro": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "weight": [24, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 195, 196, 198], "calcul": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "global": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "unweight": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "mean": [24, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 192, 195, 196, 198], "imbal": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 119], "account": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 192, 195], "instanc": [24, 26, 27, 31, 32, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 192, 198], "alter": [24, 26, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105], "zero_divis": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 102, 103, 104, 105], "zero": [24, 25, 26, 27, 34, 36, 37, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "divis": [24, 25, 26, 27, 34, 36, 37, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "act": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "pred": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 192, 198], "75": [24, 25, 29, 30, 66, 67, 68, 90, 92, 95, 103, 104, 105, 192], "05": [24, 26, 27, 29, 31, 32, 36, 38, 39, 40, 49, 53, 62, 67, 68, 69, 80, 81, 84, 85, 88, 90, 93, 94, 95, 98, 100, 103, 104, 105, 108, 110, 191, 198], "95": [24, 26, 27, 36, 38, 49, 62, 69, 88, 90, 93, 94, 95, 197], "p": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 195], "zip": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "2": [24, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 130, 138, 140, 147, 148, 174, 178, 189, 191, 192, 195, 198, 199, 200], "3": [24, 26, 27, 29, 31, 34, 35, 36, 37, 38, 39, 40, 47, 49, 50, 51, 52, 53, 56, 58, 59, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 189, 191, 192, 195, 197, 198, 199, 200], "66666667": [24, 26, 36, 38, 49, 51, 61, 63, 81, 85, 87, 88, 90, 93, 94, 95, 98, 100, 104], "initi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 123, 125, 127, 129, 131, 133, 173, 192, 195, 198], "two": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 162, 173, 176], "scalar": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "togeth": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 189, 200], "multipli": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "variabl": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 201], "attributeerror": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "alreadi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 192, 198], "exist": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 135, 136, 137, 138, 170, 175, 178, 180, 182, 192, 195, 198], "copi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 192, 195, 198], "abstract": [24, 29, 36, 37, 73, 74, 84, 85, 90, 95, 100, 105, 110, 168], "final": [24, 29, 36, 37, 74, 84, 85, 90, 95, 100, 105, 110, 173, 195, 198], "reset": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "_update_count": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "_comput": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "sigmoid": [25, 35, 41, 66, 68, 69, 102, 104, 107, 109, 110], "them": [25, 104, 127, 192, 195, 198, 199], "875": 25, "problem": [26, 88, 108, 109, 110, 201], "highest": [26, 27, 62, 63, 103, 104], "determin": [26, 27, 29, 30, 31, 32, 66, 67, 68, 87, 88, 89, 90, 92, 93, 94], "dtype": [26, 27, 31, 32, 38, 39, 40, 41, 66, 67, 68, 69, 80, 81, 82, 83, 87, 88, 89, 92, 93, 94, 98, 99, 103, 104, 115, 116, 117, 118, 119, 192, 195, 197], "float64": [26, 27, 31, 32, 38, 39, 40, 41, 66, 67, 68, 69, 80, 81, 82, 83, 87, 88, 89, 92, 93, 94, 98, 99, 103, 104, 115, 116, 117, 118, 119, 195], "binar": [27, 29, 30, 31, 32, 34, 47, 67, 68, 93, 94, 109, 110], "output": [27, 69, 178, 192, 198], "classifi": [27, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 102, 192, 198], "correct": [27, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102, 103, 104], "per": [27, 75, 189, 195, 198, 200], "area": [28, 29, 30, 31, 32, 45], "under": [28, 29, 30, 31, 32, 45, 192, 198], "curv": [28, 29, 30, 31, 32, 45, 64, 65, 66, 67, 68, 69, 86, 87, 88, 89, 90, 92, 93, 94, 95, 192, 198], "max_fpr": [29, 30], "rate": [29, 30, 66, 67, 68, 69, 189, 198, 201], "partial": [29, 30, 195], "auc": 29, "automat": [29, 30, 31, 32, 66, 67, 68, 87, 88, 89, 90, 92, 93, 94, 121], "applic": [29, 111, 112, 114], "4": [29, 30, 34, 35, 36, 37, 40, 47, 50, 59, 63, 69, 82, 83, 84, 85, 87, 88, 90, 92, 93, 94, 95, 99, 100, 105, 107, 108, 109, 110, 189, 191, 192, 195, 197, 198, 199, 200], "35": [29, 30, 69, 87, 92, 95, 103, 104, 105, 192, 195, 196, 198], "9": [29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 49, 50, 53, 54, 56, 60, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 189, 190, 192, 195, 196, 197, 198, 200], "6111111111111112": [29, 30], "89": [29, 31, 32, 69, 192, 195], "06": [29, 31, 69, 195, 198], "94": [29, 31], "22222222": [29, 31], "625": [29, 32, 35, 103], "aucroc": 30, "confus": [30, 31, 32, 87, 88, 89, 92, 93, 94], "matrix": [30, 31, 32, 87, 88, 89, 92, 93, 94, 115, 116, 117, 118, 119], "f": [33, 35, 37, 38, 39, 41, 46, 48, 50, 51, 52, 54, 75, 190, 191, 192, 193, 194, 195, 196, 197, 198], "beta": [33, 35, 37, 39, 41, 46, 48, 50, 52, 54], "f1": [34, 36, 38, 40, 46, 47, 49, 51, 53], "form": [34, 47, 192, 198], "6666666666666666": [34, 36, 47, 56, 78, 84], "harmon": [35, 37, 39, 41, 48, 50, 52, 54], "8333333333333334": [35, 37, 50, 59, 62], "85714286": [36, 38], "9090909090909091": 37, "83333333": [37, 41, 50, 54], "55555556": [37, 50, 103], "90909091": [37, 39, 41], "85": [39, 80, 81, 84, 85, 98, 100, 192, 196, 198], "total": [40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 108, 189, 198, 200], "count": [40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 161, 191, 192, 195, 198], "predicit": 41, "constructor": 43, "arraylik": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 93, 102], "ground": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102], "truth": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102], "npt": [48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63], "7142857142857143": 48, "estim": [49, 50, 66, 67, 68, 69, 93, 102, 182], "shape": [49, 50, 51, 52, 53, 54, 60, 61, 108, 109, 195, 196], "expect": [60, 61, 192, 198], "like": [60, 61, 75, 133, 151, 192], "n": [60, 61, 192, 195], "l": [60, 61], "sampl": [60, 61, 63, 119], "presenc": [60, 61, 195], "absenc": [60, 61], "rest": 61, "ratio": [62, 63, 105, 198], "correctli": 62, "precision_scor": 62, "tp": [63, 107, 108, 109], "fn": [63, 107, 108, 109], "intuit": 63, "abil": [63, 192, 198], "recall_scor": 63, "3333333333333333": 63, "receiv": [65, 131], "characterist": 65, "decis": [66, 67, 68, 69, 93, 178, 192, 198], "fpr": [66, 67, 68, 69, 192, 195, 198], "tpr": [66, 67, 68, 69], "25": [66, 67, 68, 88, 90, 92, 93, 95, 105, 116, 117, 192, 196, 198], "softmax": [67, 69, 93], "1d": [67, 68, 69, 95], "33333333": [67, 85, 88, 90, 93, 94, 95, 100], "non": 69, "evenli": [69, 95], "space": [69, 95], "increas": [69, 95], "assertionerror": [69, 178], "03": [69, 191], "stat": [72, 106, 107, 108, 109, 110], "abc": 74, "other_metr": 75, "postfix": 75, "userdict": 75, "collect": [75, 192, 195, 198], "want": 75, "behav": 75, "themselv": 75, "intern": 75, "similar": 75, "reduc": 75, "els": [75, 192, 195, 196, 198], "keep_bas": 75, "iter": 75, "underli": 75, "moduledict": 75, "hashabl": 75, "v": [75, 195], "correspond": [75, 133, 157, 158, 182], "keyerror": [75, 178], "some": [75, 135, 136, 137, 138, 142, 143, 144, 145, 146, 150, 153, 156, 157, 158, 167, 170, 175, 192, 198], "pair": [75, 161], "present": 75, "lack": 75, "In": [75, 192, 198], "metric_a": 76, "metric_b": 76, "metric1": 76, "metric2": 76, "unari": 76, "appropri": [84, 85, 100, 192, 198], "375": [88, 90], "suniqu": 90, "45": [90, 105, 191, 192, 197, 198], "42857143": 90, "15": [103, 104, 105, 192, 195, 197, 198], "57142857": 103, "sum": [105, 108, 109, 110, 195, 198], "_abstractscor": [107, 108, 109], "fp": [107, 108, 109], "tn": [107, 108, 109], "classwis": [108, 110], "over": [108, 109, 110, 161, 189, 201], "labelwis": [109, 110], "prior": [110, 192, 195, 198], "modul": [111, 131, 177, 178, 192, 198], "shift_typ": [112, 114], "shift_id": [112, 196], "induc": [112, 114], "synthet": [112, 114, 189, 198, 199, 201], "categor": [112, 192, 198], "origin": [112, 127], "util": [112, 127, 190, 191, 192, 193, 194, 195, 197, 198], "load_nih": 112, "mnt": [112, 195, 196], "nihcxr": [112, 189, 195, 199], "hospital_type_1": 112, "hospital_type_2": 112, "hospital_type_3": 112, "hospital_type_4": 112, "hospital_type_5": 112, "ds_sourc": [112, 196], "ds_target": [112, 196], "num_proc": [112, 196], "hospit": [112, 131, 189, 192, 198, 200, 201], "drift_detect": 114, "experiment": 114, "sklearn": [114, 192, 198], "load_diabet": 114, "y": [114, 116, 117, 119, 140, 182, 192, 195, 198], "return_x_i": 114, "x_tr": 114, "x_te": 114, "y_tr": 114, "y_te": 114, "train_test_split": [114, 192, 198], "test_siz": 114, "random_st": [114, 192, 198], "42": [114, 192, 198], "gn_shift": 114, "x_shift": 114, "x_train": [114, 182], "noise_amt": [114, 118], "delta": [114, 115, 118, 119, 137], "ko_shift": 114, "cp_shift": 114, "mfa_shift": 114, "bn_shift": 114, "tolerance_shift": 114, "ds_shift": 114, "nois": [114, 115, 118, 192, 195, 198], "prob": 115, "covari": [115, 116, 117, 118, 119], "proport": 115, "fraction": [115, 118, 119, 198], "affect": [115, 118, 178, 192, 198], "n_shuffl": [116, 117], "keep_rows_const": 116, "repermute_each_column": 116, "multiwai": 116, "associ": [116, 192, 195, 198], "swap": [116, 117], "individu": [116, 192, 198], "within": 116, "cl": [116, 117], "etc": [116, 117, 192, 195, 198], "floatnumpi": 116, "shuffl": [116, 117, 192], "permut": 116, "placehold": 116, "shift_class": [117, 119], "rank": 117, "changepoint": 117, "axi": [117, 195, 196, 198], "x_ref": 117, "y_ref": 117, "normal": [118, 192], "clip": 118, "gaussian": 118, "standard": [118, 121, 123, 125, 129, 131, 133, 192, 198], "deviat": 118, "divid": 118, "255": [118, 195, 196], "placehol": 119, "querier": [120, 123, 125, 129, 131, 133, 190, 191, 193, 194, 197, 198], "config_overrid": [121, 123, 125, 129, 131, 133], "orm": [121, 127, 190, 191, 193, 194, 197, 198, 200], "overrid": [121, 123, 125, 129, 131, 133], "intend": [121, 192, 195, 198], "subclass": [121, 178], "tabl": [121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 189, 190, 193, 197, 200], "schema": [121, 123, 125, 129, 131, 133, 194, 197], "schema_nam": [121, 123, 125, 129, 131, 133, 197], "table_nam": [121, 123, 125, 129, 131, 133], "instanti": [121, 189, 192, 198, 200], "cast_timestamp_col": [121, 123, 125, 129, 131, 133], "possibli": [121, 123, 125, 129, 131, 133], "recogn": [121, 123, 125, 129, 131, 133], "timestamp": [121, 123, 125, 129, 131, 133, 141, 142, 143, 148, 149, 159, 178, 189, 191, 195, 199], "sqlalchemi": [121, 123, 125, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 200], "sql": [121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 189, 200], "subqueri": [121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176], "care": [125, 131], "unit": 125, "fetch": [125, 127], "transfer": 125, "construct": [125, 129, 131, 133, 136, 137], "wrap": [125, 126, 127, 129, 131, 133], "diagnosi": [125, 129, 131, 190], "room": 125, "dataclass": 127, "tabletyp": 127, "chain": [127, 173], "thu": 127, "datafram": [127, 182, 189, 192, 198, 200], "properti": [127, 180, 182], "join_tabl": [127, 162, 190, 193, 194, 197], "on_to_typ": [127, 162], "cond": [127, 162], "table_col": [127, 162], "join_table_col": [127, 162], "isout": [127, 162, 197, 198], "anoth": [127, 162, 170, 173], "dbtabl": [127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176], "binaryexpress": [127, 162], "condit": [127, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 166, 192, 197], "outer": [127, 162], "backend": [127, 194], "panda": [127, 192, 197, 198], "index_col": [127, 194], "n_partit": [127, 194], "No": [127, 195, 197], "dask": [127, 189, 200], "framework": 127, "index": [127, 173, 174, 192, 195, 198], "defin": [127, 178, 192, 195, 198], "partit": [127, 189, 200], "server": 127, "document": [127, 192, 195, 198], "file_format": [127, 192], "parquet": 127, "csv": [127, 192, 197, 198], "upstream": 127, "icu": 131, "chart": [131, 189, 200], "event": [131, 189, 200], "lab": [131, 189, 191, 195, 200], "approxim": 131, "anchor_year": 131, "anchor_year_group": 131, "suppli": 131, "dod": 131, "adjust": [131, 195], "src_tabl": 133, "src_col": 133, "dst_col": 133, "concept": [133, 197], "somecol_concept_id": 133, "somecol_concept_nam": 133, "accord": [133, 190, 193, 194, 197], "assign": 133, "add_to": [135, 136, 137, 138], "col": [135, 140, 141, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 165, 167, 171, 172, 174, 175], "new_col_label": [135, 136, 137, 138, 174, 175, 198], "subtract": [135, 136], "rather": [135, 136], "new": [135, 136, 137, 138, 140, 160, 161, 165, 171, 174, 175, 178, 192, 198], "col1": [135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 162, 163, 165, 167, 170, 171, 172, 173, 174, 175], "col2": [135, 136, 137, 138, 140, 141, 156, 157, 158, 160, 162, 163, 167, 171, 172, 173, 175], "col3": [135, 136, 162, 172], "col1_plus_col2": [135, 136], "col1_plus_col3": 135, "col2_plus_col3": 135, "pai": 135, "attent": 135, "wherea": 135, "delta_kwarg": 136, "interv": 136, "timedelta": 137, "col1_plus_1": [137, 138], "col2_plus_1": 138, "cond_op": [139, 166], "lab_nam": [139, 151, 161, 166], "hba1c": [139, 151, 166], "john": [139, 166], "jane": [139, 166], "return_cond": [139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 166], "instead": [139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 166, 178], "func": [140, 195, 196], "new_col": 140, "assum": [140, 190, 193, 194, 197], "lambda": [140, 192, 195, 196, 198], "col1_new": [140, 160, 170], "col2_new": [140, 160], "noqa": [140, 192, 195, 198], "e501": [140, 192, 198], "disabl": 140, "line": [140, 192, 195, 198], "too": 140, "long": [140, 178, 189, 200], "type_": 141, "convers": 141, "date": [141, 142, 143, 178, 192, 195, 198], "timestamp_col": [142, 143, 148, 149, 159], "not_": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "binarize_col": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "yyyi": [142, 143, 178], "mm": [142, 143, 178], "dd": [142, 143, 178], "col1_bool": [142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154], "cond_kwarg": [144, 145, 146, 147, 150, 153, 154], "2019": [149, 197], "pattern": 151, "lab_name_bool": 151, "regex": 152, "regular": 152, "express": [152, 192, 195, 198], "any_": 154, "just": 154, "b": 154, "person_id": [155, 161, 197], "visit_id": 155, "extract_str": 159, "extract": [159, 174, 190, 191, 192, 193, 194, 197, 198], "inform": [159, 178, 192], "fill_valu": 160, "new_col_nam": [160, 174], "groupby_col": 161, "aggfunc": [161, 198], "aggsep": 161, "aggreg": [161, 189, 200], "prevent": 161, "string_aggfunc": 161, "separ": 161, "string_agg": 161, "visit_count": 161, "lab_name_agg": 161, "repres": [162, 178, 195], "suggest": 162, "oppos": 162, "sai": 162, "left": [162, 178, 198], "table2": [162, 176], "table1": [162, 176], "neither": 162, "nor": 162, "cartesian": 162, "product": 162, "OR": 166, "ascend": [167, 191], "sort": [167, 189, 192, 198, 200], "descend": 167, "random": [169, 192, 195, 198], "so": 169, "certain": [169, 192, 198], "cannot": 169, "seen": 169, "analyz": 169, "quit": 169, "rename_map": 170, "check_exist": 170, "complet": 171, "come": 172, "ordereddict": 173, "execut": [173, 190, 191, 193, 194, 197, 198], "op_": 173, "start_index": 174, "stop_index": 174, "stop": [174, 198], "col1_substr": 174, "whitespac": 175, "col1_trim": 175, "col2_trim": 175, "union_t": 176, "output_dir": [178, 192, 195, 198], "serv": 178, "popul": [178, 189, 192, 198, 201], "modelcard": 178, "directori": [178, 192, 198], "output_filenam": 178, "template_path": 178, "interact": [178, 198], "save_json": 178, "jinja2": 178, "json": [178, 192, 198], "classmethod": 178, "cyclops_report": [178, 192, 198], "section_nam": [178, 192, 195, 198], "model_detail": [178, 192, 198], "section": [178, 192, 195, 198], "bibtex": 178, "entri": 178, "plain": 178, "text": [178, 194, 195], "descript": [178, 192, 195, 198], "license_id": [178, 192], "sensitive_featur": [178, 192], "sensitive_feature_justif": [178, 192], "log": [178, 189, 192, 198, 201], "about": [178, 192, 195, 198], "resourc": [178, 192, 198], "context": 178, "homepag": 178, "spdx": [178, 192], "identifi": [178, 189, 195, 201], "licens": [178, 192, 195, 198], "apach": [178, 192, 198], "unknown": 178, "unlicens": 178, "proprietari": 178, "justif": [178, 192], "field": [178, 189, 192, 198, 201], "descriptor": 178, "pydant": 178, "basemodel": 178, "As": 178, "conflict": 178, "model_card": [178, 192, 195, 198], "cylop": 178, "tradeoff": [178, 195], "trade": 178, "off": 178, "interpret": 178, "consider": [178, 192, 195, 198], "affected_group": [178, 192, 195, 198], "benefit": [178, 192, 195, 198], "harm": [178, 192, 195, 198], "mitigation_strategi": [178, 192, 195, 198], "assess": 178, "mitig": [178, 192, 195, 198], "strategi": [178, 192, 195, 198], "relat": 178, "img_path": 178, "caption": [178, 192, 195, 198], "full": 178, "whole": [178, 192, 198], "blank": 178, "param": [178, 192, 198], "contact": [178, 192, 195, 198], "role": 178, "owner": [178, 192, 195, 198], "quantit": [178, 192, 195, 198], "slash": 178, "fig": [178, 192, 195, 198], "plotli": [178, 192, 195, 198], "figur": [178, 192, 195, 198], "plot": [178, 192, 195, 198], "analysis_typ": 178, "metric_slic": [178, 192, 195, 198], "decision_threshold": 178, "pass_fail_threshold": [178, 192, 195, 198], "pass_fail_threshold_fn": [178, 192, 195, 198], "explain": [178, 192, 195, 198], "fail": 178, "regul": 178, "regulatori": [178, 192, 198], "compli": 178, "risk": [178, 192, 195, 198, 201], "kind": [178, 192, 195, 198], "primari": [178, 192, 195, 198], "scope": [178, 192, 198], "usecas": 178, "version_str": [178, 192, 198], "semant": 178, "v1": [178, 193, 197], "dt_date": 178, "dt_datetim": 178, "unix": 178, "hh": 178, "ss": 178, "ffffff": 178, "z": 178, "summar": 178, "chang": [178, 192, 195, 198], "made": [178, 192, 198], "task_featur": [180, 182, 192, 198], "task_target": [180, 182, 192, 198], "atelectasi": [180, 195], "consolid": [180, 195], "infiltr": [180, 195], "pneumothorax": [180, 195], "edema": [180, 195], "emphysema": [180, 195], "fibrosi": [180, 195], "effus": [180, 195], "pneumonia": [180, 195], "pleural_thicken": [180, 195], "cardiomegali": [180, 195], "nodul": [180, 195], "mass": [180, 195, 198], "hernia": [180, 195], "lung": 180, "lesion": 180, "fractur": 180, "opac": 180, "enlarg": 180, "cardiomediastinum": 180, "basetask": [180, 182], "multi": [180, 195], "ptmodel": [180, 182, 195], "skmodel": [180, 182], "splits_map": [180, 182], "64": [180, 198], "compos": [180, 192, 195, 196, 198], "unnecessari": [180, 182], "pathologi": [180, 189, 192, 201], "represent": [180, 192, 198], "tabular": [182, 189], "fit": [182, 192, 198], "columntransform": [182, 192, 198], "slicingconfig": 182, "default_max_batch_s": 182, "filepath": 182, "pretrain": [182, 195], "proba": [182, 192, 198], "pd": [182, 197], "notfittederror": 182, "destin": 182, "parent": [182, 192, 195, 198], "dirctori": 182, "best_model_param": [182, 192, 198], "y_train": 182, "seri": 182, "nonei": 182, "male": [189, 195, 196, 200], "outcom": [189, 200, 201], "femal": [189, 192, 195, 196, 198, 200], "gastroenter": [189, 200], "icd": [189, 200], "potassium": [189, 200], "aado2": [189, 200], "carevu": [189, 200], "valuenum": [189, 200], "20": [189, 192, 195, 198, 200], "admiss": [189, 193, 200], "later": [189, 200], "approx": [189, 200], "schizophrenia": [189, 200], "2015": [189, 197, 200], "advanc": [189, 200], "chronic": [189, 200], "routin": [189, 200], "vital": [189, 191, 198, 200], "sign": [189, 192, 198, 200], "hemoglobin": [189, 200], "2009": [189, 200], "radiologi": [189, 191, 200], "lymphadenopathi": [189, 200], "infecti": [189, 200], "occur": [189, 200], "lazi": [189, 200], "subject_id": [189, 193, 200], "raw": [189, 200], "discharg": [189, 200], "2014": [189, 197, 200], "100": [189, 192, 193, 194, 195, 196, 197, 198, 200], "diagnosisstr": [189, 200], "teach": [189, 200], "glucos": [189, 200], "search": [189, 192, 198, 200], "visit": [189, 200], "sepsi": [189, 200], "1a": [189, 200], "most": [189, 192, 200], "recent": [189, 192, 195, 198, 200], "patient_id_hash": [189, 200], "discharge_date_tim": [189, 200], "record": [189, 200], "1b": [189, 200], "abov": [189, 200], "who": [189, 200], "were": [189, 200], "april": [189, 200], "march": [189, 200], "2016": [189, 197, 200], "1c": [189, 200], "2a": [189, 200], "how": [189, 190, 192, 193, 194, 197, 198, 200], "mani": [189, 200], "sodium": [189, 200], "place": [189, 192, 200], "apr": [189, 200], "101": [189, 197, 200], "drift": [189, 199], "experi": [189, 199], "dimension": [189, 199], "reduct": [189, 199], "techniqu": [189, 199], "roll": [189, 199], "window": [189, 199], "biweekli": [189, 199], "kaggl": [189, 192], "heart": 189, "failur": 189, "constant": [189, 201], "distribut": [189, 195, 201], "preprocessor": [189, 201], "creation": [189, 201], "synthea": [189, 197, 198], "prolong": 189, "length": [189, 195], "stai": 189, "inspect": [189, 192, 201], "preprocess": [189, 192, 201], "nan_threshold": [189, 192, 201], "gender": [189, 190, 192, 193, 194, 195, 196, 201], "nih": [189, 195, 196], "diseas": [189, 192, 201], "balanc": [189, 192, 201], "w": [189, 201], "quick": [190, 193, 194, 197], "instruct": [190, 193, 194, 197, 198], "host": [190, 191, 193, 194, 197, 198], "postgr": [190, 193, 194, 197, 198], "usernam": [190, 191, 192, 193, 194, 197], "password": [190, 191, 193, 194, 197, 198], "accordingli": [190, 193, 194, 197], "qo": [190, 191, 193, 194, 197, 198], "dbm": [190, 193, 194, 197, 198], "postgresql": [190, 193, 194, 197, 198, 200], "port": [190, 193, 194, 197, 198], "5432": [190, 193, 194, 197, 198], "localhost": [190, 193, 194, 197, 198], "pwd": [190, 193, 194, 197, 198], "eicu_crd": 190, "home": [190, 192, 193, 194, 195, 196, 197, 198], "amritk": [190, 192, 193, 194, 195, 196, 197, 198], "cach": [190, 192, 193, 194, 195, 196, 197, 198], "pypoetri": [190, 192, 193, 194, 195, 196, 197, 198], "virtualenv": [190, 192, 193, 194, 195, 196, 197, 198], "mhx6ujw0": [190, 192, 193, 194, 195, 196, 197, 198], "py3": [190, 192, 193, 194, 195, 196, 197, 198], "lib": [190, 192, 193, 194, 195, 196, 197, 198], "site": [190, 192, 193, 194, 195, 196, 197, 198], "tqdm": [190, 192, 193, 194, 195, 196, 197, 198], "auto": [190, 192, 193, 194, 195, 196, 197, 198], "py": [190, 192, 193, 194, 195, 196, 197, 198], "21": [190, 191, 192, 193, 194, 195, 196, 197, 198], "tqdmwarn": [190, 192, 193, 194, 195, 196, 197, 198], "iprogress": [190, 192, 193, 194, 195, 196, 197, 198], "ipywidget": [190, 192, 193, 194, 195, 196, 197, 198], "readthedoc": [190, 192, 193, 194, 195, 196, 197, 198], "io": [190, 192, 193, 194, 195, 196, 197, 198], "en": [190, 192, 193, 194, 195, 196, 197, 198], "user_instal": [190, 192, 193, 194, 195, 196, 197, 198], "autonotebook": [190, 192, 193, 194, 195, 196, 197, 198], "notebook_tqdm": [190, 192, 193, 194, 195, 196, 197, 198], "2023": [190, 191, 192, 193, 194, 197, 198], "09": [190, 191, 192, 193, 194, 197, 198], "13": [190, 192, 193, 194, 195, 197, 198], "53": [190, 192, 198], "43": [190, 192, 198], "487": 190, "readi": [190, 191, 193, 194, 197, 198], "39": [190, 191, 192, 193, 194, 195, 197, 198], "admissiondrug": 190, "admissiondx": 190, "allergi": 190, "apacheapsvar": 190, "apachepatientresult": 190, "apachepredvar": 190, "careplancareprovid": 190, "careplaneol": 190, "careplangener": 190, "careplango": 190, "careplaninfectiousdiseas": 190, "customlab": 190, "infusiondrug": 190, "intakeoutput": 190, "microlab": 190, "nurseassess": 190, "nursecar": 190, "nursechart": 190, "pasthistori": 190, "physicalexam": 190, "respiratorycar": 190, "respiratorychart": 190, "treatment": 190, "vitalaperiod": 190, "vitalperiod": 190, "hospitaldischargeyear": 190, "len": [190, 191, 192, 193, 194, 195, 197, 198], "44": [190, 192, 198], "237": 190, "successfulli": [190, 191, 193, 194, 197, 198], "238": 190, "profil": [190, 191, 192, 193, 194, 197, 198], "finish": [190, 191, 193, 194, 197, 198], "run_queri": [190, 191, 193, 194, 197, 198], "050105": 190, "patient_diagnos": 190, "patientunitstayid": 190, "324": 190, "325": 190, "069920": 190, "teachingstatu": 190, "hospitalid": 190, "labnam": 190, "patient_lab": [190, 193], "396": 190, "397": 190, "039890": 190, "drugnam": 190, "patient_med": 190, "580": 190, "581": 190, "161098": 190, "hpc": 191, "ca": 191, "delirium_v4_0_1": 191, "public": [191, 194, 197], "17": [191, 192, 193, 198], "449": 191, "lookup_icd10_ca_descript": 191, "lookup_statcan": 191, "lookup_cci": 191, "lookup_icd10_ca_to_ccsr": 191, "lookup_ip_administr": 191, "lookup_lab_concept": 191, "lookup_vitals_concept": 191, "lookup_pharmacy_concept": 191, "lookup_diagnosi": 191, "locality_vari": 191, "admdad": 191, "derived_vari": 191, "ipscu": 191, "lookup_phy_characterist": 191, "ipintervent": 191, "lookup_ccsr": 191, "lookup_pharmacy_rout": 191, "lookup_transfusion_concept": 191, "lookup_ip_scu": 191, "lookup_er_administr": 191, "lookup_imag": 191, "pharmaci": 191, "lookup_transf": 191, "ipdiagnosi": 191, "lookup_room_transf": 191, "er": 191, "erdiagnosi": 191, "erintervent": 191, "roomtransf": 191, "transfus": 191, "lookup_hospital_num": 191, "51": [191, 192, 198], "902": [191, 197], "903": 191, "093352": 191, "189734": 191, "04": [191, 194, 196, 198], "encounters_queri": 191, "52": [191, 192, 196, 198], "591": 191, "592": 191, "675141": 191, "32567": 191, "hospital_num": 191, "encounters_per_sit": 191, "856": 191, "857": 191, "145693": 191, "lab_op": 191, "collection_date_tim": 191, "test_type_map": 191, "encounters_lab": 191, "genc_id": 191, "sodium_test": 191, "26": [191, 192, 198], "19": [191, 192, 195, 198], "814": 191, "815": [191, 194], "506": 191, "939296": 191, "9305": 191, "showcas": [192, 197, 198, 201], "formul": [192, 198], "o": [192, 195, 198], "shutil": [192, 195, 198], "pathlib": [192, 195, 198], "px": [192, 195, 198], "dateutil": [192, 195, 198], "relativedelta": [192, 195, 198], "kaggle_api_extend": 192, "kaggleapi": 192, "imput": [192, 198], "simpleimput": [192, 198], "pipelin": [192, 198], "minmaxscal": [192, 198], "onehotencod": [192, 198], "e402": [192, 195, 198], "catalog": [192, 198], "create_model": [192, 198], "tabularfeatur": [192, 198], "classificationplott": [192, 195, 198], "flatten_results_dict": [192, 198], "get_metrics_trend": [192, 195, 198], "load_datafram": 192, "offer": [192, 195, 198], "through": [192, 195, 198], "technic": [192, 195, 198], "architectur": [192, 195, 198], "involv": [192, 195, 198], "subpopul": [192, 195, 198], "explaina": [192, 195, 198], "go": [192, 195, 198], "tool": [192, 195, 198], "progress": [192, 195, 198], "subject": [192, 195, 198], "data_dir": [192, 195], "random_se": [192, 198], "train_siz": [192, 198], "com": [192, 195], "Then": 192, "trigger": 192, "download": 192, "credenti": 192, "locat": [192, 197], "machin": [192, 195], "authent": 192, "dataset_download_fil": 192, "fedesoriano": 192, "unzip": 192, "df": 192, "reset_index": [192, 198], "715": 192, "chestpaintyp": 192, "restingbp": 192, "cholesterol": 192, "fastingb": 192, "restingecg": 192, "40": [192, 198], "ata": 192, "140": 192, "289": 192, "49": [192, 198], "nap": 192, "160": 192, "180": 192, "37": [192, 194, 197, 198], "130": 192, "283": 192, "st": 192, "48": [192, 198], "asi": 192, "138": 192, "214": 192, "54": [192, 193], "150": 192, "195": 192, "913": 192, "ta": 192, "110": 192, "264": 192, "914": 192, "68": [192, 198], "144": 192, "193": 192, "915": 192, "57": [192, 194], "131": 192, "916": 192, "236": 192, "lvh": 192, "917": 192, "38": [192, 198], "175": 192, "maxhr": 192, "exerciseangina": 192, "oldpeak": 192, "st_slope": 192, "heartdiseas": 192, "172": 192, "156": 192, "flat": 192, "98": [192, 195], "108": 192, "122": 192, "132": 192, "141": 192, "115": 192, "174": 192, "173": 192, "918": 192, "pie": [192, 195, 198], "update_layout": [192, 195, 198], "histogram": [192, 195, 198], "xaxis_titl": [192, 195, 198], "yaxis_titl": [192, 195, 198], "bargap": [192, 195, 198], "astyp": [192, 198], "11": [192, 195, 198, 201], "update_trac": [192, 195, 198], "textinfo": [192, 198], "percent": [192, 198], "title_text": [192, 198], "hovertempl": [192, 198], "br": [192, 198], "class_count": [192, 198], "value_count": [192, 197, 198], "class_ratio": [192, 198], "8070866141732284": 192, "14": [192, 194, 195, 197, 198, 201], "wa": [192, 195, 198], "li": 192, "et": 192, "al": 192, "features_list": [192, 198], "help": [192, 195, 198], "essenti": [192, 198], "step": [192, 198], "understand": [192, 198], "u": [192, 198], "16": [192, 197, 198], "tab_featur": [192, 198], "ordin": 192, "might": [192, 198], "numeric_transform": [192, 198], "scaler": [192, 198], "binary_transform": [192, 198], "most_frequ": [192, 198], "18": [192, 193, 196, 198], "numeric_featur": [192, 198], "features_by_typ": [192, 198], "numeric_indic": [192, 198], "get_loc": [192, 198], "binary_featur": [192, 198], "ordinal_featur": 192, "binary_indic": [192, 198], "ordinal_indic": 192, "num": [192, 198], "onehot": [192, 198], "handle_unknown": [192, 198], "ignor": [192, 198], "remaind": [192, 198], "passthrough": [192, 198], "let": [192, 198], "done": [192, 198], "independ": 192, "everi": 192, "uci": 192, "archiv": 192, "ic": 192, "edu": 192, "cleandoc": 192, "misc": 192, "cc0": 192, "demograph": [192, 195], "often": 192, "strong": 192, "correl": 192, "older": [192, 198], "higher": 192, "power": [192, 198], "easi": [192, 198], "compat": [192, 198], "22": [192, 198], "from_panda": [192, 198], "cleanup_cache_fil": [192, 198], "num_row": 192, "cast_column": [192, 198], "stratify_by_column": [192, 198], "seed": [192, 198], "lt": [192, 194, 195, 196, 198], "189514": 192, "74": [192, 196], "straightforward": [192, 198], "maintain": [192, 198], "sgd": [192, 198], "logisit": [192, 198], "regress": [192, 198], "sgdclassif": [192, 198], "24": [192, 198], "sgd_classifi": 192, "123": [192, 198], "verbos": [192, 198], "class_weight": 192, "mortalitypredict": [192, 198], "encapsul": [192, 198], "cohes": [192, 198], "structur": [192, 198], "smooth": [192, 198], "manag": [192, 198], "mortality_task": 192, "best": [192, 198], "hyperparamet": [192, 198], "grid": [192, 198], "27": [192, 198], "alpha": 192, "0001": 192, "001": 192, "learning_r": [192, 198], "invscal": 192, "adapt": 192, "eta0": 192, "roc_auc": 192, "59": 192, "629": 192, "wrapper": [192, 195, 198, 200], "sk_model": [192, 198], "630": 192, "631": 192, "sgdclassifi": 192, "x27": [192, 198], "early_stop": 192, "loss": 192, "log_loss": 192, "rerun": [192, 198], "cell": [192, 198], "trust": [192, 198], "On": [192, 195, 198], "github": [192, 195, 198], "unabl": [192, 198], "render": [192, 198], "try": [192, 198], "page": [192, 198], "nbviewer": [192, 198], "sgdclassifiersgdclassifi": 192, "28": [192, 193, 198], "model_param": [192, 198], "epsilon": 192, "fit_intercept": 192, "l1_ratio": 192, "max_it": 192, "n_iter_no_chang": 192, "n_job": [192, 198], "penalti": 192, "l2": 192, "power_t": 192, "tol": 192, "validation_fract": 192, "warm_start": 192, "29": [192, 197, 198], "30": [192, 195, 197, 198, 201], "y_pred": [192, 198], "only_predict": [192, 198], "184": 192, "8212": 192, "variou": [192, 198], "perspect": [192, 198], "metric_collect": [192, 198], "70": [192, 195], "33": [192, 194, 198], "fnr": [192, 195, 198], "ber": [192, 198], "fairness_metric_collect": [192, 198], "34": [192, 198], "dataset_with_pr": [192, 198], "7406": 192, "7557": 192, "51687": 192, "gt": [192, 194, 195, 198], "21716": 192, "21801": 192, "23761": 192, "22031": 192, "22130": 192, "99": 192, "22182": 192, "right": [192, 198], "36": [192, 194, 198], "results_flat": [192, 195, 198], "remove_metr": [192, 198], "796875": 192, "8260869565217391": 192, "6785714285714286": 192, "7450980392156863": 192, "8819444444444444": 192, "8623853211009175": 192, "8676470588235294": 192, "9076923076923077": 192, "8872180451127819": 192, "927972027972028": 192, "842391304347826": 192, "8686868686868687": 192, "8431372549019608": 192, "8557213930348259": 192, "9152319464371114": 192, "plw2901": [192, 195, 198], "plotter": [192, 195, 196, 198], "class_nam": [192, 198], "set_templ": [192, 195, 198], "plotly_whit": [192, 195, 198], "slice_result": [192, 195, 198], "dict_kei": [192, 198], "roc_plot": [192, 198], "roc_curve_comparison": [192, 198], "41": [192, 198], "overall_perform": [192, 198], "metric_valu": [192, 198], "overall_performance_plot": [192, 198], "metrics_valu": [192, 198], "slice_metr": [192, 198], "slice_metrics_plot": [192, 198], "metrics_comparison_bar": [192, 198], "comparison": [192, 198], "reform": [192, 198], "fairness_result": [192, 198], "deepcopi": [192, 198], "fairness_metr": [192, 198], "group_siz": [192, 198], "46": [192, 198], "fairness_plot": [192, 198], "metrics_comparison_scatt": [192, 198], "leverag": [192, 195, 198], "histor": [192, 195, 198], "gather": [192, 195, 198], "merg": [192, 195, 198], "wish": [192, 195, 198], "metrics_trend": [192, 195, 198], "integr": [192, 195, 198], "purpos": [192, 195, 198], "three": [192, 195, 198], "dummi": [192, 195, 198], "demonstr": [192, 195, 198, 201], "trend": [192, 195, 198], "47": [192, 198], "dummy_report_num": [192, 195, 198], "dummy_report_dir": [192, 195, 198], "getcwd": [192, 195, 198], "dummy_report": [192, 195, 198], "simul": [192, 195, 198], "uniform": [192, 195, 198], "dummy_result": [192, 195, 198], "max": [192, 195, 198], "folder": [192, 195, 198], "dummy_report_path": [192, 195, 198], "date_dir": [192, 195, 198], "dummy_d": [192, 195, 198], "todai": [192, 195, 198], "new_dir": [192, 195, 198], "rmtree": [192, 195, 198], "previou": [192, 195, 198], "report_directori": [192, 195, 198], "flat_result": [192, 195, 198], "trends_plot": [192, 195, 198], "audienc": [192, 198], "organ": [192, 198], "store": [192, 198], "regulatory_requir": [192, 198], "releas": [192, 197, 198], "team": [192, 198], "vectorinstitut": [192, 198], "linear_model": 192, "next": [192, 198], "use_cas": [192, 198], "These": [192, 198], "fairness_assess": [192, 198], "well": [192, 195, 198], "taken": [192, 198], "ethical_consider": [192, 198], "clinician": [192, 198], "engin": [192, 198], "improv": [192, 198], "bias": [192, 195, 198], "lead": [192, 198], "wors": [192, 198], "retrain": [192, 198], "below": [192, 198], "By": [192, 198], "report_path": [192, 195, 198], "view": [192, 195, 198, 201], "092": 193, "expire_flag": 193, "932": 193, "934": 193, "032659": 193, "patient_admiss": [193, 194], "long_titl": [193, 194], "patient_admissions_diagnos": [193, 194], "hadm_id": [193, 194], "079": 193, "080": 193, "106374": 193, "154": 193, "155": 193, "035972": 193, "chartevents_op": 193, "dbsourc": 193, "chart_ev": [193, 194], "patient_chart_ev": 193, "55": [193, 194, 195], "127": 193, "128": 193, "69": [193, 196], "928861": 193, "v2": [194, 197], "975": 194, "fhir_etl": 194, "fhir_trm": 194, "information_schema": [194, 197], "mimic_fhir": 194, "mimiciv_deriv": 194, "mimiciv_": 194, "mimiciv_hosp": 194, "mimiciv_icu": 194, "mimiciv_not": 194, "admittim": 194, "dischtim": 194, "anchor_year_differ": 194, "941": 194, "942": 194, "191435": 194, "diagnoses_op": 194, "icd_vers": 194, "813": 194, "825588": 194, "r": 194, "349": 194, "350": 194, "488212": 194, "82": [194, 195], "categori": [194, 198], "patient_admissions_vit": 194, "574": 194, "576": 194, "185425": 194, "patient_admissions_lab": 194, "58": [194, 196, 198], "841": 194, "842": 194, "63": [194, 195, 196], "230410": 194, "radiology_not": 194, "radiology_notes_op": 194, "patient_admissions_radiology_not": 194, "804": 194, "805": [194, 195, 201], "924855": 194, "npartit": 194, "268": 194, "434427": 194, "35639": 194, "core": 194, "056": 194, "057": 194, "009834": 194, "torchxrayvis": [195, 196], "functool": 195, "graph_object": [195, 198], "lambdad": [195, 196], "resiz": [195, 196], "densenet": [195, 196], "loader": [195, 196], "load_nihcxr": [195, 196], "apply_transform": 195, "get_devic": 195, "devic": 195, "clinical_dataset": [195, 196], "nih_d": [195, 196], "4000": 195, "spatial_s": [195, 196], "224": [195, 196], "allow_missing_kei": [195, 196], "1024": [195, 196], "newaxi": [195, 196], "densenet121": [195, 196], "res224": [195, 196], "231652": 195, "71": 195, "2511": 195, "3710": 195, "int64": [195, 197], "originalimag": 195, "width": [195, 198], "height": [195, 198], "originalimagepixelspac": 195, "unnam": 195, "float32": 195, "__index_level_0__": 195, "arang": 195, "nih_eval_results_gend": 195, "scatter": 195, "mode": 195, "marker": 195, "perf_metric_gend": 195, "title_x": 195, "title_font_s": 195, "768": 195, "selector": 195, "58764": 195, "86": 195, "62441": 195, "96": [195, 196], "63952": 195, "65": [195, 196], "nih_eval_results_ag": 195, "perf_metric_ag": 195, "62132": 195, "62755": 195, "62632": 195, "63971": 195, "showlegend": 195, "bar": [195, 198], "balanced_error_r": 195, "nih_fairness_result_ag": 195, "balancederrorr": 195, "fairness_ag": 195, "63042": 195, "54849": 195, "62289": 195, "fairness_age_par": 195, "slice_": 195, "itr": 195, "enumer": 195, "dummy_reports_cxr": 195, "112": [195, 201], "120": [195, 201], "frontal": [195, 201], "fourteen": 195, "mine": 195, "radiolog": 195, "pleural": 195, "thicken": 195, "80": [195, 198], "remain": 195, "arxiv": 195, "ab": 195, "2111": 195, "00595": 195, "inproceed": 195, "cohen2022xrv": 195, "cohen": 195, "joseph": 195, "paul": 195, "viviano": 195, "bertin": 195, "morrison": 195, "torabian": 195, "parsa": 195, "guarrera": 195, "matteo": 195, "lungren": 195, "matthew": 195, "chaudhari": 195, "akshai": 195, "brook": 195, "rupert": 195, "hashir": 195, "mohammad": 195, "bertrand": 195, "hadrien": 195, "booktitl": 195, "deep": 195, "mlmed": 195, "arxivid": 195, "cohen2020limit": 195, "cross": 195, "domain": [195, 197], "autom": [195, 198], "2002": 195, "02497": 195, "medicin": 195, "radiologist": 195, "scientist": 195, "inabl": 195, "addition": 195, "poor": 195, "qualiti": 195, "artifact": 195, "geograph": 195, "region": 195, "ethic": 195, "ensur": 195, "divers": 195, "regularli": 195, "human": 195, "expertis": 195, "address": 195, "rare": 195, "qualit": 195, "detector": 196, "reductor": 196, "tstester": 196, "plot_drift_experi": 196, "plot_drift_timeseri": 196, "shifter": 196, "source_d": 196, "target_d": 196, "25596": 196, "67311": 196, "dr_method": 196, "bbse": 196, "soft": 196, "txrv": 196, "ae": 196, "sensitivity_test": 196, "tester": 196, "tester_method": 196, "source_sample_s": 196, "target_sample_s": 196, "num_run": 196, "detect_shift": 196, "chexpert": 196, "chex": 196, "padchest": 196, "pc": 196, "source_slic": 196, "target_slic": 196, "50791": 196, "49247": 196, "44759": 196, "50134": 196, "46152": 196, "47213": 196, "46946": 196, "46966": 196, "92": 196, "rolling_window_drift": 196, "timestamp_column": 196, "window_s": 196, "4w": 196, "etl": [197, 198], "hous": 197, "synthea_integration_test": 197, "cdm_synthea10": 197, "observation_period": 197, "condition_occurr": 197, "drug_exposur": 197, "procedure_occurr": 197, "device_exposur": 197, "death": 197, "note_nlp": 197, "specimen": 197, "fact_relationship": 197, "care_sit": 197, "payer_plan_period": 197, "cost": 197, "drug_era": 197, "dose_era": 197, "condition_era": 197, "episod": 197, "episode_ev": 197, "cdm_sourc": 197, "vocabulari": 197, "concept_class": 197, "concept_relationship": 197, "relationship": 197, "concept_synonym": 197, "concept_ancestor": 197, "source_to_concept_map": 197, "drug_strength": 197, "cohort": [197, 198], "cohort_definit": 197, "source_to_standard_vocab_map": 197, "source_to_source_vocab_map": 197, "all_visit": 197, "assign_all_visit_id": 197, "final_visit_id": 197, "visit_start_d": 197, "to_datetim": 197, "dt": 197, "sort_index": 197, "605": 197, "607": 197, "077730": 197, "2011": 197, "2012": 197, "2013": 197, "2017": 197, "2018": 197, "visits_measur": 197, "visit_occurrence_id": 197, "733": 197, "734": 197, "066410": 197, "repo": 197, "437": 197, "visits_concept_map": 197, "discharge_to_concept_id": 197, "admitting_concept_id": 197, "visits_concept_mapped_di": 197, "discharge_to_concept_nam": 197, "di": 197, "407": 197, "408": 197, "023836": 197, "5815": 197, "gender_concept_nam": 197, "person_visit": 197, "person_visits_condit": 197, "person_visits_conditions_measur": 197, "condition_concept_id": 197, "condition_concept_nam": 197, "904": 197, "425851": 197, "measurement_concept_nam": 197, "bodi": 197, "temperatur": 197, "longer": 198, "v3": 198, "num_dai": 198, "synthea_demo": 198, "def": 198, "get_encount": 198, "nativ": 198, "patient_id": 198, "birthdat": 198, "race": 198, "ethnic": 198, "patient_encount": 198, "encounter_id": 198, "start_year": 198, "birthdate_year": 198, "lo": 198, "get_observ": 198, "groupby_op": 198, "n_ob": 198, "observations_count": 198, "observations_stat": 198, "pivot_t": 198, "add_prefix": 198, "obs_": 198, "get_med": 198, "n_med": 198, "get_procedur": 198, "procedur": [198, 201], "n_procedur": 198, "cohort_queri": 198, "to_merg": 198, "to_merge_df": 198, "509": 198, "563": 198, "564": 198, "709101": 198, "366": 198, "367": 198, "802094": 198, "935": 198, "936": 198, "389443": 198, "432": 198, "434": 198, "492748": 198, "537": 198, "538": 198, "102891": 198, "payer": 198, "encounterclass": 198, "base_encounter_cost": 198, "total_claim_cost": 198, "payer_coverag": 198, "reasoncod": 198, "reasondescript": 198, "null_count": 198, "isnul": 198, "600": 198, "respect": 198, "larger": 198, "thresh_nan": 198, "dropna": 198, "thresh": 198, "length_of_stai": 198, "length_of_stay_count": 198, "length_of_stay_kei": 198, "5573997233748271": 198, "obs_alanin": 198, "aminotransferas": 198, "enzymat": 198, "volum": 198, "serum": 198, "plasma": 198, "obs_albumin": 198, "obs_alkalin": 198, "phosphatas": 198, "obs_aspart": 198, "obs_bilirubin": 198, "obs_bodi": 198, "obs_calcium": 198, "obs_carbon": 198, "dioxid": 198, "mole": 198, "obs_chlorid": 198, "obs_creatinin": 198, "obs_diastol": 198, "blood": 198, "pressur": 198, "obs_erythrocyt": 198, "obs_ferritin": 198, "obs_glomerular": 198, "filtrat": 198, "73": 198, "sq": 198, "obs_glucos": 198, "obs_hematocrit": 198, "obs_hemoglobin": 198, "obs_leukocyt": 198, "obs_mch": 198, "entit": 198, "obs_mchc": 198, "obs_mcv": 198, "obs_oxygen": 198, "satur": 198, "arteri": 198, "obs_platelet": 198, "obs_potassium": 198, "obs_protein": 198, "obs_sodium": 198, "obs_systol": 198, "obs_troponin": 198, "cardiac": 198, "obs_urea": 198, "nitrogen": 198, "1126": 198, "160628": 198, "sllearn": 198, "xgb_classifi": 198, "los_task": 198, "n_estim": 198, "250": 198, "500": 198, "max_depth": 198, "reg_lambda": 198, "colsample_bytre": 198, "gamma": 198, "203": 198, "204": 198, "205": 198, "xgbclassifi": 198, "base_scor": 198, "booster": 198, "callback": 198, "colsample_bylevel": 198, "colsample_bynod": 198, "early_stopping_round": 198, "enable_categor": 198, "eval_metr": 198, "logloss": 198, "feature_typ": 198, "gpu_id": 198, "grow_polici": 198, "importance_typ": 198, "interaction_constraint": 198, "max_bin": 198, "max_cat_threshold": 198, "max_cat_to_onehot": 198, "max_delta_step": 198, "max_leav": 198, "min_child_weight": 198, "miss": 198, "monotone_constraint": 198, "num_parallel_tre": 198, "predictor": 198, "xgbclassifierxgbclassifi": 198, "logist": 198, "use_label_encod": 198, "reg_alpha": 198, "sampling_method": 198, "scale_pos_weight": 198, "subsampl": 198, "tree_method": 198, "validate_paramet": 198, "226": 198, "4383": 198, "07": 198, "4137": 198, "3842": 198, "95526": 198, "83": 198, "8741": 198, "9604": 198, "9680": 198, "9627": 198, "9968": 198, "amp": 198, "9141": 198, "79": 198, "9374": 198, "9294": 198, "81": 198, "9357": 198, "76": 198, "9201": 198, "9033": 198, "8648648648648649": 198, "9354838709677419": 198, "8405797101449275": 198, "8854961832061069": 198, "9565217391304348": 198, "7222222222222222": 198, "7037037037037037": 198, "7307692307692307": 198, "7169811320754716": 198, "8784340659340659": 198, "8547008547008547": 198, "9285714285714286": 198, "8441558441558441": 198, "8843537414965986": 198, "949512987012987": 198, "8532110091743119": 198, "8823529411764706": 198, "947274031563845": 198, "8539823008849557": 198, "9057971014492754": 198, "8620689655172413": 198, "8833922261484098": 198, "9478501489995743": 198, "xgboost": 198, "python_api": 198, "statist": 199, "commun": 200, "around": 200, "goal": 201}, "objects": {"cyclops": [[183, 0, 0, "-", "data"], [184, 0, 0, "-", "evaluate"], [185, 0, 0, "-", "monitor"], [186, 0, 0, "-", "query"], [187, 0, 0, "-", "report"], [188, 0, 0, "-", "tasks"]], "cyclops.data": [[183, 0, 0, "-", "features"], [6, 0, 0, "-", "slicer"]], "cyclops.data.features": [[4, 0, 0, "-", "medical_image"]], "cyclops.data.features.medical_image": [[5, 1, 1, "", "MedicalImage"]], "cyclops.data.features.medical_image.MedicalImage": [[5, 2, 1, "", "__call__"], [5, 2, 1, "", "cast_storage"], [5, 2, 1, "", "decode_example"], [5, 2, 1, "", "embed_storage"], [5, 2, 1, "", "encode_example"], [5, 2, 1, "", "flatten"]], "cyclops.data.slicer": [[7, 1, 1, "", "SliceSpec"], [8, 4, 1, "", "compound_filter"], [9, 4, 1, "", "filter_datetime"], [10, 4, 1, "", "filter_non_null"], [11, 4, 1, "", "filter_range"], [12, 4, 1, "", "filter_string_contains"], [13, 4, 1, "", "filter_value"], [14, 4, 1, "", "is_datetime"], [15, 4, 1, "", "overall"]], "cyclops.data.slicer.SliceSpec": [[7, 3, 1, "", "_registry"], [7, 2, 1, "", "add_slice_spec"], [7, 3, 1, "", "column_names"], [7, 2, 1, "", "get_slices"], [7, 3, 1, "", "include_overall"], [7, 2, 1, "", "slices"], [7, 3, 1, "", "spec_list"], [7, 3, 1, "", "validate"]], "cyclops.evaluate": [[16, 0, 0, "-", "evaluator"], [184, 0, 0, "-", "fairness"], [184, 0, 0, "-", "metrics"]], "cyclops.evaluate.evaluator": [[17, 4, 1, "", "evaluate"]], "cyclops.evaluate.fairness": [[18, 0, 0, "-", "config"], [20, 0, 0, "-", "evaluator"]], "cyclops.evaluate.fairness.config": [[19, 1, 1, "", "FairnessConfig"]], "cyclops.evaluate.fairness.evaluator": [[21, 4, 1, "", "evaluate_fairness"], [22, 4, 1, "", "warn_too_many_unique_values"]], "cyclops.evaluate.metrics": [[23, 0, 0, "-", "accuracy"], [28, 0, 0, "-", "auroc"], [33, 0, 0, "-", "f_beta"], [42, 0, 0, "-", "factory"], [184, 0, 0, "-", "functional"], [73, 0, 0, "-", "metric"], [77, 0, 0, "-", "precision_recall"], [86, 0, 0, "-", "precision_recall_curve"], [91, 0, 0, "-", "roc"], [96, 0, 0, "-", "sensitivity"], [101, 0, 0, "-", "specificity"], [106, 0, 0, "-", "stat_scores"]], "cyclops.evaluate.metrics.accuracy": [[24, 1, 1, "", "Accuracy"], [25, 1, 1, "", "BinaryAccuracy"], [26, 1, 1, "", "MulticlassAccuracy"], [27, 1, 1, "", "MultilabelAccuracy"]], "cyclops.evaluate.metrics.accuracy.Accuracy": [[24, 2, 1, "", "__add__"], [24, 2, 1, "", "__call__"], [24, 2, 1, "", "__init__"], [24, 2, 1, "", "__mul__"], [24, 2, 1, "", "add_state"], [24, 2, 1, "", "clone"], [24, 2, 1, "", "compute"], [24, 2, 1, "", "reset_state"], [24, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.BinaryAccuracy": [[25, 2, 1, "", "__add__"], [25, 2, 1, "", "__call__"], [25, 2, 1, "", "__init__"], [25, 2, 1, "", "__mul__"], [25, 2, 1, "", "add_state"], [25, 2, 1, "", "clone"], [25, 2, 1, "", "compute"], [25, 2, 1, "", "reset_state"], [25, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy": [[26, 2, 1, "", "__add__"], [26, 2, 1, "", "__call__"], [26, 2, 1, "", "__init__"], [26, 2, 1, "", "__mul__"], [26, 2, 1, "", "add_state"], [26, 2, 1, "", "clone"], [26, 2, 1, "", "compute"], [26, 2, 1, "", "reset_state"], [26, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy": [[27, 2, 1, "", "__add__"], [27, 2, 1, "", "__call__"], [27, 2, 1, "", "__init__"], [27, 2, 1, "", "__mul__"], [27, 2, 1, "", "add_state"], [27, 2, 1, "", "clone"], [27, 2, 1, "", "compute"], [27, 2, 1, "", "reset_state"], [27, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc": [[29, 1, 1, "", "AUROC"], [30, 1, 1, "", "BinaryAUROC"], [31, 1, 1, "", "MulticlassAUROC"], [32, 1, 1, "", "MultilabelAUROC"]], "cyclops.evaluate.metrics.auroc.AUROC": [[29, 2, 1, "", "__add__"], [29, 2, 1, "", "__call__"], [29, 2, 1, "", "__init__"], [29, 2, 1, "", "__mul__"], [29, 2, 1, "", "add_state"], [29, 2, 1, "", "clone"], [29, 2, 1, "", "compute"], [29, 2, 1, "", "reset_state"], [29, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.BinaryAUROC": [[30, 2, 1, "", "__add__"], [30, 2, 1, "", "__call__"], [30, 2, 1, "", "__init__"], [30, 2, 1, "", "__mul__"], [30, 2, 1, "", "add_state"], [30, 2, 1, "", "clone"], [30, 2, 1, "", "compute"], [30, 2, 1, "", "reset_state"], [30, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.MulticlassAUROC": [[31, 2, 1, "", "__add__"], [31, 2, 1, "", "__call__"], [31, 2, 1, "", "__init__"], [31, 2, 1, "", "__mul__"], [31, 2, 1, "", "add_state"], [31, 2, 1, "", "clone"], [31, 2, 1, "", "compute"], [31, 2, 1, "", "reset_state"], [31, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.MultilabelAUROC": [[32, 2, 1, "", "__add__"], [32, 2, 1, "", "__call__"], [32, 2, 1, "", "__init__"], [32, 2, 1, "", "__mul__"], [32, 2, 1, "", "add_state"], [32, 2, 1, "", "clone"], [32, 2, 1, "", "compute"], [32, 2, 1, "", "reset_state"], [32, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta": [[34, 1, 1, "", "BinaryF1Score"], [35, 1, 1, "", "BinaryFbetaScore"], [36, 1, 1, "", "F1Score"], [37, 1, 1, "", "FbetaScore"], [38, 1, 1, "", "MulticlassF1Score"], [39, 1, 1, "", "MulticlassFbetaScore"], [40, 1, 1, "", "MultilabelF1Score"], [41, 1, 1, "", "MultilabelFbetaScore"]], "cyclops.evaluate.metrics.f_beta.BinaryF1Score": [[34, 2, 1, "", "__add__"], [34, 2, 1, "", "__call__"], [34, 2, 1, "", "__init__"], [34, 2, 1, "", "__mul__"], [34, 2, 1, "", "add_state"], [34, 2, 1, "", "clone"], [34, 2, 1, "", "compute"], [34, 2, 1, "", "reset_state"], [34, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore": [[35, 2, 1, "", "__add__"], [35, 2, 1, "", "__call__"], [35, 2, 1, "", "__init__"], [35, 2, 1, "", "__mul__"], [35, 2, 1, "", "add_state"], [35, 2, 1, "", "clone"], [35, 2, 1, "", "compute"], [35, 2, 1, "", "reset_state"], [35, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.F1Score": [[36, 2, 1, "", "__add__"], [36, 2, 1, "", "__call__"], [36, 2, 1, "", "__init__"], [36, 2, 1, "", "__mul__"], [36, 2, 1, "", "add_state"], [36, 2, 1, "", "clone"], [36, 2, 1, "", "compute"], [36, 2, 1, "", "reset_state"], [36, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.FbetaScore": [[37, 2, 1, "", "__add__"], [37, 2, 1, "", "__call__"], [37, 2, 1, "", "__init__"], [37, 2, 1, "", "__mul__"], [37, 2, 1, "", "add_state"], [37, 2, 1, "", "clone"], [37, 2, 1, "", "compute"], [37, 2, 1, "", "reset_state"], [37, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MulticlassF1Score": [[38, 2, 1, "", "__add__"], [38, 2, 1, "", "__call__"], [38, 2, 1, "", "__init__"], [38, 2, 1, "", "__mul__"], [38, 2, 1, "", "add_state"], [38, 2, 1, "", "clone"], [38, 2, 1, "", "compute"], [38, 2, 1, "", "reset_state"], [38, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore": [[39, 2, 1, "", "__add__"], [39, 2, 1, "", "__call__"], [39, 2, 1, "", "__init__"], [39, 2, 1, "", "__mul__"], [39, 2, 1, "", "add_state"], [39, 2, 1, "", "clone"], [39, 2, 1, "", "compute"], [39, 2, 1, "", "reset_state"], [39, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MultilabelF1Score": [[40, 2, 1, "", "__add__"], [40, 2, 1, "", "__call__"], [40, 2, 1, "", "__init__"], [40, 2, 1, "", "__mul__"], [40, 2, 1, "", "add_state"], [40, 2, 1, "", "clone"], [40, 2, 1, "", "compute"], [40, 2, 1, "", "reset_state"], [40, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore": [[41, 2, 1, "", "__add__"], [41, 2, 1, "", "__call__"], [41, 2, 1, "", "__init__"], [41, 2, 1, "", "__mul__"], [41, 2, 1, "", "add_state"], [41, 2, 1, "", "clone"], [41, 2, 1, "", "compute"], [41, 2, 1, "", "reset_state"], [41, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.factory": [[43, 4, 1, "", "create_metric"]], "cyclops.evaluate.metrics.functional": [[44, 0, 0, "-", "accuracy"], [45, 0, 0, "-", "auroc"], [46, 0, 0, "-", "f_beta"], [55, 0, 0, "-", "precision_recall"], [64, 0, 0, "-", "precision_recall_curve"], [65, 0, 0, "-", "roc"], [70, 0, 0, "-", "sensitivity"], [71, 0, 0, "-", "specificity"], [72, 0, 0, "-", "stat_scores"]], "cyclops.evaluate.metrics.functional.f_beta": [[47, 4, 1, "", "binary_f1_score"], [48, 4, 1, "", "binary_fbeta_score"], [49, 4, 1, "", "f1_score"], [50, 4, 1, "", "fbeta_score"], [51, 4, 1, "", "multiclass_f1_score"], [52, 4, 1, "", "multiclass_fbeta_score"], [53, 4, 1, "", "multilabel_f1_score"], [54, 4, 1, "", "multilabel_fbeta_score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[56, 4, 1, "", "binary_precision"], [57, 4, 1, "", "binary_recall"], [58, 4, 1, "", "multiclass_precision"], [59, 4, 1, "", "multiclass_recall"], [60, 4, 1, "", "multilabel_precision"], [61, 4, 1, "", "multilabel_recall"], [62, 4, 1, "", "precision"], [63, 4, 1, "", "recall"]], "cyclops.evaluate.metrics.functional.roc": [[66, 4, 1, "", "binary_roc_curve"], [67, 4, 1, "", "multiclass_roc_curve"], [68, 4, 1, "", "multilabel_roc_curve"], [69, 4, 1, "", "roc_curve"]], "cyclops.evaluate.metrics.metric": [[74, 1, 1, "", "Metric"], [75, 1, 1, "", "MetricCollection"], [76, 1, 1, "", "OperatorMetric"]], "cyclops.evaluate.metrics.metric.Metric": [[74, 2, 1, "", "__add__"], [74, 2, 1, "", "__call__"], [74, 2, 1, "", "__init__"], [74, 2, 1, "", "__mul__"], [74, 2, 1, "", "add_state"], [74, 2, 1, "", "clone"], [74, 2, 1, "", "compute"], [74, 2, 1, "", "reset_state"], [74, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.metric.MetricCollection": [[75, 2, 1, "", "__call__"], [75, 2, 1, "", "__init__"], [75, 2, 1, "", "add_metrics"], [75, 2, 1, "", "clear"], [75, 2, 1, "", "clone"], [75, 2, 1, "", "compute"], [75, 2, 1, "", "get"], [75, 2, 1, "", "items"], [75, 2, 1, "", "keys"], [75, 2, 1, "", "pop"], [75, 2, 1, "", "popitem"], [75, 2, 1, "", "reset_state"], [75, 2, 1, "", "setdefault"], [75, 2, 1, "", "update"], [75, 2, 1, "", "update_state"], [75, 2, 1, "", "values"]], "cyclops.evaluate.metrics.metric.OperatorMetric": [[76, 2, 1, "", "__add__"], [76, 2, 1, "", "__call__"], [76, 2, 1, "", "__init__"], [76, 2, 1, "", "__mul__"], [76, 2, 1, "", "add_state"], [76, 2, 1, "", "clone"], [76, 2, 1, "", "compute"], [76, 2, 1, "", "reset_state"], [76, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall": [[78, 1, 1, "", "BinaryPrecision"], [79, 1, 1, "", "BinaryRecall"], [80, 1, 1, "", "MulticlassPrecision"], [81, 1, 1, "", "MulticlassRecall"], [82, 1, 1, "", "MultilabelPrecision"], [83, 1, 1, "", "MultilabelRecall"], [84, 1, 1, "", "Precision"], [85, 1, 1, "", "Recall"]], "cyclops.evaluate.metrics.precision_recall.BinaryPrecision": [[78, 2, 1, "", "__add__"], [78, 2, 1, "", "__call__"], [78, 2, 1, "", "__init__"], [78, 2, 1, "", "__mul__"], [78, 2, 1, "", "add_state"], [78, 2, 1, "", "clone"], [78, 2, 1, "", "compute"], [78, 2, 1, "", "reset_state"], [78, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.BinaryRecall": [[79, 2, 1, "", "__add__"], [79, 2, 1, "", "__call__"], [79, 2, 1, "", "__init__"], [79, 2, 1, "", "__mul__"], [79, 2, 1, "", "add_state"], [79, 2, 1, "", "clone"], [79, 2, 1, "", "compute"], [79, 2, 1, "", "reset_state"], [79, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision": [[80, 2, 1, "", "__add__"], [80, 2, 1, "", "__call__"], [80, 2, 1, "", "__init__"], [80, 2, 1, "", "__mul__"], [80, 2, 1, "", "add_state"], [80, 2, 1, "", "clone"], [80, 2, 1, "", "compute"], [80, 2, 1, "", "reset_state"], [80, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MulticlassRecall": [[81, 2, 1, "", "__add__"], [81, 2, 1, "", "__call__"], [81, 2, 1, "", "__init__"], [81, 2, 1, "", "__mul__"], [81, 2, 1, "", "add_state"], [81, 2, 1, "", "clone"], [81, 2, 1, "", "compute"], [81, 2, 1, "", "reset_state"], [81, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision": [[82, 2, 1, "", "__add__"], [82, 2, 1, "", "__call__"], [82, 2, 1, "", "__init__"], [82, 2, 1, "", "__mul__"], [82, 2, 1, "", "add_state"], [82, 2, 1, "", "clone"], [82, 2, 1, "", "compute"], [82, 2, 1, "", "reset_state"], [82, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MultilabelRecall": [[83, 2, 1, "", "__add__"], [83, 2, 1, "", "__call__"], [83, 2, 1, "", "__init__"], [83, 2, 1, "", "__mul__"], [83, 2, 1, "", "add_state"], [83, 2, 1, "", "clone"], [83, 2, 1, "", "compute"], [83, 2, 1, "", "reset_state"], [83, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.Precision": [[84, 2, 1, "", "__add__"], [84, 2, 1, "", "__call__"], [84, 2, 1, "", "__init__"], [84, 2, 1, "", "__mul__"], [84, 2, 1, "", "add_state"], [84, 2, 1, "", "clone"], [84, 2, 1, "", "compute"], [84, 2, 1, "", "reset_state"], [84, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.Recall": [[85, 2, 1, "", "__add__"], [85, 2, 1, "", "__call__"], [85, 2, 1, "", "__init__"], [85, 2, 1, "", "__mul__"], [85, 2, 1, "", "add_state"], [85, 2, 1, "", "clone"], [85, 2, 1, "", "compute"], [85, 2, 1, "", "reset_state"], [85, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve": [[87, 1, 1, "", "BinaryPrecisionRecallCurve"], [88, 1, 1, "", "MulticlassPrecisionRecallCurve"], [89, 1, 1, "", "MultilabelPrecisionRecallCurve"], [90, 1, 1, "", "PrecisionRecallCurve"]], "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve": [[87, 2, 1, "", "__add__"], [87, 2, 1, "", "__call__"], [87, 2, 1, "", "__init__"], [87, 2, 1, "", "__mul__"], [87, 2, 1, "", "add_state"], [87, 2, 1, "", "clone"], [87, 2, 1, "", "compute"], [87, 2, 1, "", "reset_state"], [87, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve": [[88, 2, 1, "", "__add__"], [88, 2, 1, "", "__call__"], [88, 2, 1, "", "__init__"], [88, 2, 1, "", "__mul__"], [88, 2, 1, "", "add_state"], [88, 2, 1, "", "clone"], [88, 2, 1, "", "compute"], [88, 2, 1, "", "reset_state"], [88, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve": [[89, 2, 1, "", "__add__"], [89, 2, 1, "", "__call__"], [89, 2, 1, "", "__init__"], [89, 2, 1, "", "__mul__"], [89, 2, 1, "", "add_state"], [89, 2, 1, "", "clone"], [89, 2, 1, "", "compute"], [89, 2, 1, "", "reset_state"], [89, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve": [[90, 2, 1, "", "__add__"], [90, 2, 1, "", "__call__"], [90, 2, 1, "", "__init__"], [90, 2, 1, "", "__mul__"], [90, 2, 1, "", "add_state"], [90, 2, 1, "", "clone"], [90, 2, 1, "", "compute"], [90, 2, 1, "", "reset_state"], [90, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc": [[92, 1, 1, "", "BinaryROCCurve"], [93, 1, 1, "", "MulticlassROCCurve"], [94, 1, 1, "", "MultilabelROCCurve"], [95, 1, 1, "", "ROCCurve"]], "cyclops.evaluate.metrics.roc.BinaryROCCurve": [[92, 2, 1, "", "__add__"], [92, 2, 1, "", "__call__"], [92, 2, 1, "", "__init__"], [92, 2, 1, "", "__mul__"], [92, 2, 1, "", "add_state"], [92, 2, 1, "", "clone"], [92, 2, 1, "", "compute"], [92, 2, 1, "", "reset_state"], [92, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.MulticlassROCCurve": [[93, 2, 1, "", "__add__"], [93, 2, 1, "", "__call__"], [93, 2, 1, "", "__init__"], [93, 2, 1, "", "__mul__"], [93, 2, 1, "", "add_state"], [93, 2, 1, "", "clone"], [93, 2, 1, "", "compute"], [93, 2, 1, "", "reset_state"], [93, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.MultilabelROCCurve": [[94, 2, 1, "", "__add__"], [94, 2, 1, "", "__call__"], [94, 2, 1, "", "__init__"], [94, 2, 1, "", "__mul__"], [94, 2, 1, "", "add_state"], [94, 2, 1, "", "clone"], [94, 2, 1, "", "compute"], [94, 2, 1, "", "reset_state"], [94, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.ROCCurve": [[95, 2, 1, "", "__add__"], [95, 2, 1, "", "__call__"], [95, 2, 1, "", "__init__"], [95, 2, 1, "", "__mul__"], [95, 2, 1, "", "add_state"], [95, 2, 1, "", "clone"], [95, 2, 1, "", "compute"], [95, 2, 1, "", "reset_state"], [95, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity": [[97, 1, 1, "", "BinarySensitivity"], [98, 1, 1, "", "MulticlassSensitivity"], [99, 1, 1, "", "MultilabelSensitivity"], [100, 1, 1, "", "Sensitivity"]], "cyclops.evaluate.metrics.sensitivity.BinarySensitivity": [[97, 2, 1, "", "__add__"], [97, 2, 1, "", "__call__"], [97, 2, 1, "", "__init__"], [97, 2, 1, "", "__mul__"], [97, 2, 1, "", "add_state"], [97, 2, 1, "", "clone"], [97, 2, 1, "", "compute"], [97, 2, 1, "", "reset_state"], [97, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity": [[98, 2, 1, "", "__add__"], [98, 2, 1, "", "__call__"], [98, 2, 1, "", "__init__"], [98, 2, 1, "", "__mul__"], [98, 2, 1, "", "add_state"], [98, 2, 1, "", "clone"], [98, 2, 1, "", "compute"], [98, 2, 1, "", "reset_state"], [98, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity": [[99, 2, 1, "", "__add__"], [99, 2, 1, "", "__call__"], [99, 2, 1, "", "__init__"], [99, 2, 1, "", "__mul__"], [99, 2, 1, "", "add_state"], [99, 2, 1, "", "clone"], [99, 2, 1, "", "compute"], [99, 2, 1, "", "reset_state"], [99, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.Sensitivity": [[100, 2, 1, "", "__add__"], [100, 2, 1, "", "__call__"], [100, 2, 1, "", "__init__"], [100, 2, 1, "", "__mul__"], [100, 2, 1, "", "add_state"], [100, 2, 1, "", "clone"], [100, 2, 1, "", "compute"], [100, 2, 1, "", "reset_state"], [100, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity": [[102, 1, 1, "", "BinarySpecificity"], [103, 1, 1, "", "MulticlassSpecificity"], [104, 1, 1, "", "MultilabelSpecificity"], [105, 1, 1, "", "Specificity"]], "cyclops.evaluate.metrics.specificity.BinarySpecificity": [[102, 2, 1, "", "__add__"], [102, 2, 1, "", "__call__"], [102, 2, 1, "", "__init__"], [102, 2, 1, "", "__mul__"], [102, 2, 1, "", "add_state"], [102, 2, 1, "", "clone"], [102, 2, 1, "", "compute"], [102, 2, 1, "", "reset_state"], [102, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.MulticlassSpecificity": [[103, 2, 1, "", "__add__"], [103, 2, 1, "", "__call__"], [103, 2, 1, "", "__init__"], [103, 2, 1, "", "__mul__"], [103, 2, 1, "", "add_state"], [103, 2, 1, "", "clone"], [103, 2, 1, "", "compute"], [103, 2, 1, "", "reset_state"], [103, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.MultilabelSpecificity": [[104, 2, 1, "", "__add__"], [104, 2, 1, "", "__call__"], [104, 2, 1, "", "__init__"], [104, 2, 1, "", "__mul__"], [104, 2, 1, "", "add_state"], [104, 2, 1, "", "clone"], [104, 2, 1, "", "compute"], [104, 2, 1, "", "reset_state"], [104, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.Specificity": [[105, 2, 1, "", "__add__"], [105, 2, 1, "", "__call__"], [105, 2, 1, "", "__init__"], [105, 2, 1, "", "__mul__"], [105, 2, 1, "", "add_state"], [105, 2, 1, "", "clone"], [105, 2, 1, "", "compute"], [105, 2, 1, "", "reset_state"], [105, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores": [[107, 1, 1, "", "BinaryStatScores"], [108, 1, 1, "", "MulticlassStatScores"], [109, 1, 1, "", "MultilabelStatScores"], [110, 1, 1, "", "StatScores"]], "cyclops.evaluate.metrics.stat_scores.BinaryStatScores": [[107, 2, 1, "", "__add__"], [107, 2, 1, "", "__call__"], [107, 2, 1, "", "__init__"], [107, 2, 1, "", "__mul__"], [107, 2, 1, "", "add_state"], [107, 2, 1, "", "clone"], [107, 2, 1, "", "compute"], [107, 2, 1, "", "reset_state"], [107, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores": [[108, 2, 1, "", "__add__"], [108, 2, 1, "", "__call__"], [108, 2, 1, "", "__init__"], [108, 2, 1, "", "__mul__"], [108, 2, 1, "", "add_state"], [108, 2, 1, "", "clone"], [108, 2, 1, "", "compute"], [108, 2, 1, "", "reset_state"], [108, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores": [[109, 2, 1, "", "__add__"], [109, 2, 1, "", "__call__"], [109, 2, 1, "", "__init__"], [109, 2, 1, "", "__mul__"], [109, 2, 1, "", "add_state"], [109, 2, 1, "", "clone"], [109, 2, 1, "", "compute"], [109, 2, 1, "", "reset_state"], [109, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.StatScores": [[110, 2, 1, "", "__add__"], [110, 2, 1, "", "__call__"], [110, 2, 1, "", "__init__"], [110, 2, 1, "", "__mul__"], [110, 2, 1, "", "add_state"], [110, 2, 1, "", "clone"], [110, 2, 1, "", "compute"], [110, 2, 1, "", "reset_state"], [110, 2, 1, "", "update_state"]], "cyclops.monitor": [[111, 0, 0, "-", "clinical_applicator"], [113, 0, 0, "-", "synthetic_applicator"]], "cyclops.monitor.clinical_applicator": [[112, 1, 1, "", "ClinicalShiftApplicator"]], "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator": [[112, 2, 1, "", "age"], [112, 2, 1, "", "apply_shift"], [112, 2, 1, "", "custom"], [112, 2, 1, "", "hospital_type"], [112, 2, 1, "", "month"], [112, 2, 1, "", "sex"], [112, 2, 1, "", "time"]], "cyclops.monitor.synthetic_applicator": [[114, 1, 1, "", "SyntheticShiftApplicator"], [115, 4, 1, "", "binary_noise_shift"], [116, 4, 1, "", "feature_association_shift"], [117, 4, 1, "", "feature_swap_shift"], [118, 4, 1, "", "gaussian_noise_shift"], [119, 4, 1, "", "knockout_shift"]], "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator": [[114, 2, 1, "", "apply_shift"]], "cyclops.query": [[120, 0, 0, "-", "base"], [122, 0, 0, "-", "eicu"], [124, 0, 0, "-", "gemini"], [126, 0, 0, "-", "interface"], [128, 0, 0, "-", "mimiciii"], [130, 0, 0, "-", "mimiciv"], [132, 0, 0, "-", "omop"], [134, 0, 0, "-", "ops"]], "cyclops.query.base": [[121, 1, 1, "", "DatasetQuerier"]], "cyclops.query.base.DatasetQuerier": [[121, 3, 1, "", "db"], [121, 2, 1, "", "get_table"], [121, 2, 1, "", "list_columns"], [121, 2, 1, "", "list_custom_tables"], [121, 2, 1, "", "list_schemas"], [121, 2, 1, "", "list_tables"]], "cyclops.query.eicu": [[123, 1, 1, "", "EICUQuerier"]], "cyclops.query.eicu.EICUQuerier": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "get_table"], [123, 2, 1, "", "list_columns"], [123, 2, 1, "", "list_custom_tables"], [123, 2, 1, "", "list_schemas"], [123, 2, 1, "", "list_tables"]], "cyclops.query.gemini": [[125, 1, 1, "", "GEMINIQuerier"]], "cyclops.query.gemini.GEMINIQuerier": [[125, 2, 1, "", "__init__"], [125, 2, 1, "", "care_units"], [125, 2, 1, "", "diagnoses"], [125, 2, 1, "", "get_table"], [125, 2, 1, "", "imaging"], [125, 2, 1, "", "ip_admin"], [125, 2, 1, "", "list_columns"], [125, 2, 1, "", "list_custom_tables"], [125, 2, 1, "", "list_schemas"], [125, 2, 1, "", "list_tables"], [125, 2, 1, "", "room_transfer"]], "cyclops.query.interface": [[127, 1, 1, "", "QueryInterface"]], "cyclops.query.interface.QueryInterface": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "clear_data"], [127, 5, 1, "", "data"], [127, 2, 1, "", "join"], [127, 2, 1, "", "ops"], [127, 2, 1, "", "run"], [127, 2, 1, "", "save"], [127, 2, 1, "", "union"], [127, 2, 1, "", "union_all"]], "cyclops.query.mimiciii": [[129, 1, 1, "", "MIMICIIIQuerier"]], "cyclops.query.mimiciii.MIMICIIIQuerier": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "chartevents"], [129, 2, 1, "", "diagnoses"], [129, 2, 1, "", "get_table"], [129, 2, 1, "", "labevents"], [129, 2, 1, "", "list_columns"], [129, 2, 1, "", "list_custom_tables"], [129, 2, 1, "", "list_schemas"], [129, 2, 1, "", "list_tables"]], "cyclops.query.mimiciv": [[131, 1, 1, "", "MIMICIVQuerier"]], "cyclops.query.mimiciv.MIMICIVQuerier": [[131, 2, 1, "", "__init__"], [131, 2, 1, "", "chartevents"], [131, 2, 1, "", "diagnoses"], [131, 2, 1, "", "get_table"], [131, 2, 1, "", "labevents"], [131, 2, 1, "", "list_columns"], [131, 2, 1, "", "list_custom_tables"], [131, 2, 1, "", "list_schemas"], [131, 2, 1, "", "list_tables"], [131, 2, 1, "", "patients"]], "cyclops.query.omop": [[133, 1, 1, "", "OMOPQuerier"]], "cyclops.query.omop.OMOPQuerier": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "get_table"], [133, 2, 1, "", "list_columns"], [133, 2, 1, "", "list_custom_tables"], [133, 2, 1, "", "list_schemas"], [133, 2, 1, "", "list_tables"], [133, 2, 1, "", "map_concept_ids_to_name"], [133, 2, 1, "", "measurement"], [133, 2, 1, "", "observation"], [133, 2, 1, "", "person"], [133, 2, 1, "", "visit_detail"], [133, 2, 1, "", "visit_occurrence"]], "cyclops.query.ops": [[135, 1, 1, "", "AddColumn"], [136, 1, 1, "", "AddDeltaColumn"], [137, 1, 1, "", "AddDeltaConstant"], [138, 1, 1, "", "AddNumeric"], [139, 1, 1, "", "And"], [140, 1, 1, "", "Apply"], [141, 1, 1, "", "Cast"], [142, 1, 1, "", "ConditionAfterDate"], [143, 1, 1, "", "ConditionBeforeDate"], [144, 1, 1, "", "ConditionEndsWith"], [145, 1, 1, "", "ConditionEquals"], [146, 1, 1, "", "ConditionGreaterThan"], [147, 1, 1, "", "ConditionIn"], [148, 1, 1, "", "ConditionInMonths"], [149, 1, 1, "", "ConditionInYears"], [150, 1, 1, "", "ConditionLessThan"], [151, 1, 1, "", "ConditionLike"], [152, 1, 1, "", "ConditionRegexMatch"], [153, 1, 1, "", "ConditionStartsWith"], [154, 1, 1, "", "ConditionSubstring"], [155, 1, 1, "", "Distinct"], [156, 1, 1, "", "Drop"], [157, 1, 1, "", "DropEmpty"], [158, 1, 1, "", "DropNulls"], [159, 1, 1, "", "ExtractTimestampComponent"], [160, 1, 1, "", "FillNull"], [161, 1, 1, "", "GroupByAggregate"], [162, 1, 1, "", "Join"], [163, 1, 1, "", "Keep"], [164, 1, 1, "", "Limit"], [165, 1, 1, "", "Literal"], [166, 1, 1, "", "Or"], [167, 1, 1, "", "OrderBy"], [168, 1, 1, "", "QueryOp"], [169, 1, 1, "", "RandomizeOrder"], [170, 1, 1, "", "Rename"], [171, 1, 1, "", "Reorder"], [172, 1, 1, "", "ReorderAfter"], [173, 1, 1, "", "Sequential"], [174, 1, 1, "", "Substring"], [175, 1, 1, "", "Trim"], [176, 1, 1, "", "Union"]], "cyclops.query.ops.AddColumn": [[135, 2, 1, "", "__call__"]], "cyclops.query.ops.AddDeltaColumn": [[136, 2, 1, "", "__call__"]], "cyclops.query.ops.AddDeltaConstant": [[137, 2, 1, "", "__call__"]], "cyclops.query.ops.AddNumeric": [[138, 2, 1, "", "__call__"]], "cyclops.query.ops.And": [[139, 2, 1, "", "__call__"]], "cyclops.query.ops.Apply": [[140, 2, 1, "", "__call__"]], "cyclops.query.ops.Cast": [[141, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionAfterDate": [[142, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionBeforeDate": [[143, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionEndsWith": [[144, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionEquals": [[145, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionGreaterThan": [[146, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionIn": [[147, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionInMonths": [[148, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionInYears": [[149, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionLessThan": [[150, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionLike": [[151, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionRegexMatch": [[152, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionStartsWith": [[153, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionSubstring": [[154, 2, 1, "", "__call__"]], "cyclops.query.ops.Distinct": [[155, 2, 1, "", "__call__"]], "cyclops.query.ops.Drop": [[156, 2, 1, "", "__call__"]], "cyclops.query.ops.DropEmpty": [[157, 2, 1, "", "__call__"]], "cyclops.query.ops.DropNulls": [[158, 2, 1, "", "__call__"]], "cyclops.query.ops.ExtractTimestampComponent": [[159, 2, 1, "", "__call__"]], "cyclops.query.ops.FillNull": [[160, 2, 1, "", "__call__"]], "cyclops.query.ops.GroupByAggregate": [[161, 2, 1, "", "__call__"]], "cyclops.query.ops.Join": [[162, 2, 1, "", "__call__"]], "cyclops.query.ops.Keep": [[163, 2, 1, "", "__call__"]], "cyclops.query.ops.Limit": [[164, 2, 1, "", "__call__"]], "cyclops.query.ops.Literal": [[165, 2, 1, "", "__call__"]], "cyclops.query.ops.Or": [[166, 2, 1, "", "__call__"]], "cyclops.query.ops.OrderBy": [[167, 2, 1, "", "__call__"]], "cyclops.query.ops.QueryOp": [[168, 2, 1, "", "__call__"]], "cyclops.query.ops.RandomizeOrder": [[169, 2, 1, "", "__call__"]], "cyclops.query.ops.Rename": [[170, 2, 1, "", "__call__"]], "cyclops.query.ops.Reorder": [[171, 2, 1, "", "__call__"]], "cyclops.query.ops.ReorderAfter": [[172, 2, 1, "", "__call__"]], "cyclops.query.ops.Sequential": [[173, 2, 1, "", "__add__"], [173, 2, 1, "", "__call__"], [173, 2, 1, "", "__init__"], [173, 2, 1, "", "append"], [173, 2, 1, "", "extend"], [173, 2, 1, "", "insert"], [173, 2, 1, "", "pop"]], "cyclops.query.ops.Substring": [[174, 2, 1, "", "__call__"]], "cyclops.query.ops.Trim": [[175, 2, 1, "", "__call__"]], "cyclops.query.ops.Union": [[176, 2, 1, "", "__call__"]], "cyclops.report": [[177, 0, 0, "-", "report"]], "cyclops.report.report": [[178, 1, 1, "", "ModelCardReport"]], "cyclops.report.report.ModelCardReport": [[178, 2, 1, "", "export"], [178, 2, 1, "", "from_json_file"], [178, 2, 1, "", "log_citation"], [178, 2, 1, "", "log_dataset"], [178, 2, 1, "", "log_descriptor"], [178, 2, 1, "", "log_fairness_assessment"], [178, 2, 1, "", "log_from_dict"], [178, 2, 1, "", "log_image"], [178, 2, 1, "", "log_license"], [178, 2, 1, "", "log_model_parameters"], [178, 2, 1, "", "log_owner"], [178, 2, 1, "", "log_performance_metrics"], [178, 2, 1, "", "log_plotly_figure"], [178, 2, 1, "", "log_quantitative_analysis"], [178, 2, 1, "", "log_reference"], [178, 2, 1, "", "log_regulation"], [178, 2, 1, "", "log_risk"], [178, 2, 1, "", "log_use_case"], [178, 2, 1, "", "log_user"], [178, 2, 1, "", "log_version"]], "cyclops.tasks": [[179, 0, 0, "-", "cxr_classification"], [181, 0, 0, "-", "mortality_prediction"]], "cyclops.tasks.cxr_classification": [[180, 1, 1, "", "CXRClassificationTask"]], "cyclops.tasks.cxr_classification.CXRClassificationTask": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "add_model"], [180, 5, 1, "", "data_type"], [180, 2, 1, "", "evaluate"], [180, 2, 1, "", "get_model"], [180, 2, 1, "", "list_models"], [180, 5, 1, "", "models_count"], [180, 2, 1, "", "predict"], [180, 5, 1, "", "task_type"]], "cyclops.tasks.mortality_prediction": [[182, 1, 1, "", "MortalityPredictionTask"]], "cyclops.tasks.mortality_prediction.MortalityPredictionTask": [[182, 2, 1, "", "__init__"], [182, 2, 1, "", "add_model"], [182, 5, 1, "", "data_type"], [182, 2, 1, "", "evaluate"], [182, 2, 1, "", "get_model"], [182, 2, 1, "", "list_models"], [182, 2, 1, "", "list_models_params"], [182, 2, 1, "", "load_model"], [182, 5, 1, "", "models_count"], [182, 2, 1, "", "predict"], [182, 2, 1, "", "save_model"], [182, 5, 1, "", "task_type"], [182, 2, 1, "", "train"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"api": [0, 186, 190, 191, 193, 194, 197, 199, 200], "refer": 0, "contribut": [1, 3], "cyclop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 194], "pre": 1, "commit": 1, "hook": 1, "code": 1, "guidelin": 1, "welcom": 2, "": 2, "document": [2, 3], "content": 2, "get": [3, 190, 191, 193, 194, 195, 197], "start": 3, "instal": 3, "us": [3, 194, 196, 201], "pip": 3, "develop": 3, "poetri": 3, "conda": 3, "notebook": 3, "citat": 3, "data": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 183, 192, 198, 201], "featur": [4, 5, 183, 192, 198], "medical_imag": [4, 5], "medicalimag": 5, "slicer": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "slicespec": 7, "compound_filt": 8, "filter_datetim": 9, "filter_non_nul": 10, "filter_rang": 11, "filter_string_contain": 12, "filter_valu": 13, "is_datetim": 14, "overal": 15, "evalu": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 184, 192, 194, 198], "fair": [18, 19, 20, 21, 22, 184], "config": [18, 19], "fairnessconfig": 19, "evaluate_fair": 21, "warn_too_many_unique_valu": 22, "metric": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 184, 195], "accuraci": [23, 24, 25, 26, 27, 44], "binaryaccuraci": 25, "multiclassaccuraci": 26, "multilabelaccuraci": 27, "auroc": [28, 29, 30, 31, 32, 45, 195], "binaryauroc": 30, "multiclassauroc": 31, "multilabelauroc": 32, "f_beta": [33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54], "binaryf1scor": 34, "binaryfbetascor": 35, "f1score": 36, "fbetascor": 37, "multiclassf1scor": 38, "multiclassfbetascor": 39, "multilabelf1scor": 40, "multilabelfbetascor": 41, "factori": [42, 43], "create_metr": 43, "function": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 184], "binary_f1_scor": 47, "binary_fbeta_scor": 48, "f1_score": 49, "fbeta_scor": 50, "multiclass_f1_scor": 51, "multiclass_fbeta_scor": 52, "multilabel_f1_scor": 53, "multilabel_fbeta_scor": 54, "precision_recal": [55, 56, 57, 58, 59, 60, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 84, 85], "binary_precis": 56, "binary_recal": 57, "multiclass_precis": 58, "multiclass_recal": 59, "multilabel_precis": 60, "multilabel_recal": 61, "precis": [62, 84], "recal": [63, 85], "precision_recall_curv": [64, 86, 87, 88, 89, 90], "roc": [65, 66, 67, 68, 69, 91, 92, 93, 94, 95], "binary_roc_curv": 66, "multiclass_roc_curv": 67, "multilabel_roc_curv": 68, "roc_curv": 69, "sensit": [70, 96, 97, 98, 99, 100, 196], "specif": [71, 101, 102, 103, 104, 105], "stat_scor": [72, 106, 107, 108, 109, 110], "metriccollect": 75, "operatormetr": 76, "binaryprecis": 78, "binaryrecal": 79, "multiclassprecis": 80, "multiclassrecal": 81, "multilabelprecis": 82, "multilabelrecal": 83, "binaryprecisionrecallcurv": 87, "multiclassprecisionrecallcurv": 88, "multilabelprecisionrecallcurv": 89, "precisionrecallcurv": 90, "binaryroccurv": 92, "multiclassroccurv": 93, "multilabelroccurv": 94, "roccurv": 95, "binarysensit": 97, "multiclasssensit": 98, "multilabelsensit": 99, "binaryspecif": 102, "multiclassspecif": 103, "multilabelspecif": 104, "binarystatscor": 107, "multiclassstatscor": 108, "multilabelstatscor": 109, "statscor": 110, "monitor": [111, 112, 113, 114, 115, 116, 117, 118, 119, 185, 199], "clinical_appl": [111, 112], "clinicalshiftappl": 112, "synthetic_appl": [113, 114, 115, 116, 117, 118, 119], "syntheticshiftappl": 114, "binary_noise_shift": 115, "feature_association_shift": 116, "feature_swap_shift": 117, "gaussian_noise_shift": 118, "knockout_shift": 119, "queri": [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 186, 190, 191, 193, 194, 197, 198, 200], "base": [120, 121, 194, 198], "datasetqueri": 121, "eicu": [122, 123, 190], "eicuqueri": [123, 190], "gemini": [124, 125, 191], "geminiqueri": [125, 191], "interfac": [126, 127], "queryinterfac": 127, "mimiciii": [128, 129], "mimiciiiqueri": [129, 193], "mimiciv": [130, 131], "mimicivqueri": [131, 194], "omop": [132, 133, 197], "omopqueri": [133, 197], "op": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 194], "addcolumn": 135, "adddeltacolumn": 136, "adddeltaconst": 137, "addnumer": 138, "And": 139, "appli": 140, "cast": 141, "conditionafterd": 142, "conditionbefored": 143, "conditionendswith": 144, "conditionequ": 145, "conditiongreaterthan": 146, "conditionin": 147, "conditioninmonth": 148, "conditioninyear": 149, "conditionlessthan": 150, "conditionlik": 151, "conditionregexmatch": [152, 194], "conditionstartswith": 153, "conditionsubstr": 154, "distinct": 155, "drop": [156, 198], "dropempti": 157, "dropnul": 158, "extracttimestampcompon": 159, "fillnul": 160, "groupbyaggreg": 161, "join": 162, "keep": [163, 191], "limit": [164, 190], "liter": 165, "Or": 166, "orderbi": 167, "queryop": 168, "randomizeord": 169, "renam": 170, "reorder": 171, "reorderaft": 172, "sequenti": 173, "substr": [174, 190], "trim": 175, "union": 176, "report": [177, 178, 187, 192, 194, 198], "modelcardreport": 178, "task": [179, 180, 181, 182, 188, 192, 198], "cxr_classif": [179, 180], "cxrclassificationtask": 180, "mortality_predict": [181, 182], "mortalitypredictiontask": 182, "dataset": [186, 191, 192, 195, 196, 198], "tutori": [189, 190, 191, 193, 194, 196, 197], "crd": 190, "import": [190, 191, 192, 193, 194, 195, 196, 197, 198], "instanti": [190, 191, 193, 194, 197], "exampl": [190, 191, 193, 194, 196, 197, 201], "1": [190, 191, 193, 194, 196, 197], "all": [190, 193, 194, 197], "femal": [190, 193, 194, 197], "patient": [190, 191, 193, 194, 197], "discharg": [190, 191], "2014": 190, "100": 190, "row": 190, "2": [190, 193, 194, 196, 197], "encount": [190, 191, 193, 194], "diagnos": [190, 193, 194, 197], "schizophrenia": [190, 194], "diagnosisstr": 190, "year": [190, 194], "2015": [190, 191, 194], "3": [190, 193, 194, 196], "potassium": [190, 193], "lab": [190, 193, 194], "test": [190, 191, 193, 194, 195, 196], "teach": 190, "hospit": [190, 191], "4": [190, 193, 194, 196], "glucos": 190, "medic": 190, "search": 190, "1a": 191, "creat": [191, 192, 198], "tabl": 191, "onli": 191, "one": 191, "per": 191, "most": 191, "recent": 191, "each": 191, "sort": 191, "patient_id_hash": 191, "discharge_date_tim": 191, "record": 191, "1b": 191, "from": [191, 194], "abov": 191, "set": 191, "take": 191, "subset": 191, "who": 191, "were": 191, "between": 191, "april": 191, "march": 191, "31": 191, "2016": 191, "1c": 191, "total": 191, "number": 191, "admiss": [191, 194], "2a": 191, "how": 191, "mani": 191, "sodium": 191, "place": 191, "apr": 191, "mai": 191, "101": 191, "heart": [192, 201], "failur": [192, 201], "predict": [192, 195, 198, 201], "librari": [192, 195, 196, 198], "constant": [192, 198], "load": [192, 195, 196], "sex": [192, 195], "valu": 192, "ag": [192, 195, 198], "distribut": [192, 198], "outcom": [192, 193, 197, 198], "identifi": [192, 198], "type": [192, 198], "preprocessor": [192, 198], "hug": [192, 198], "face": [192, 198], "model": [192, 195, 196, 198], "creation": [192, 198], "train": [192, 196, 198], "perform": [192, 195, 198], "over": [192, 195, 198], "time": [192, 195, 198], "gener": [192, 196, 198], "mimic": [193, 194], "iii": 193, "male": 193, "mortal": [193, 197], "gastroenter": 193, "icd": [193, 194], "9": [193, 194], "long": [193, 194], "titl": [193, 194], "aado2": 193, "carevu": 193, "chart": 193, "event": 193, "have": 193, "valuenum": 193, "less": 193, "than": 193, "20": 193, "iv": 194, "2021": 194, "later": 194, "approx": 194, "10": 194, "advanc": 194, "contain": 194, "chronic": 194, "routin": 194, "vital": 194, "sign": 194, "5": [194, 196], "hemoglobin": 194, "2009": 194, "6": 194, "radiologi": 194, "filter": 194, "keyword": 194, "lymphadenopathi": 194, "infecti": 194, "occur": 194, "togeth": 194, "7": 194, "return": 194, "dask": 194, "datafram": 194, "lazi": 194, "partit": 194, "batch": 194, "aggreg": 194, "subject_id": 194, "8": 194, "run": 194, "raw": 194, "sql": 194, "string": 194, "chest": [195, 201], "x": [195, 201], "rai": [195, 201], "diseas": 195, "classif": [195, 201], "multilabel": 195, "pathologi": 195, "balanc": 195, "error": 195, "rate": 195, "pariti": 195, "log": 195, "w": 195, "threshold": 195, "popul": 195, "card": 195, "field": 195, "nihcxr": 196, "clinic": 196, "drift": 196, "experi": 196, "sourc": 196, "target": 196, "dimension": 196, "reduct": 196, "techniqu": 196, "differ": 196, "shift": 196, "roll": 196, "window": 196, "synthet": 196, "timestamp": 196, "biweekli": 196, "visit": 197, "after": 197, "2010": 197, "measur": 197, "2020": 197, "end": 197, "sepsi": 197, "prolong": [198, 201], "length": [198, 201], "stai": [198, 201], "comput": 198, "label": 198, "inspect": 198, "preprocess": 198, "nan": 198, "nan_threshold": 198, "gender": 198, "case": 201, "tabular": 201, "kaggl": 201, "synthea": 201, "imag": 201, "nih": 201}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Contributing to cyclops": [[1, "contributing-to-cyclops"]], "Pre-commit hooks": [[1, "pre-commit-hooks"]], "Coding guidelines": [[1, "coding-guidelines"]], "Welcome to cyclops\u2019s documentation!": [[2, "welcome-to-cyclops-s-documentation"]], "Contents:": [[2, null]], "\ud83d\udc23 Getting Started": [[3, "getting-started"]], "Installing cyclops using pip": [[3, "installing-cyclops-using-pip"]], "\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udcbb Developing": [[3, "developing"]], "Using poetry": [[3, "using-poetry"]], "Using Conda": [[3, "using-conda"]], "Contributing": [[3, "contributing"]], "\ud83d\udcda Documentation": [[3, "documentation"]], "\ud83d\udcd3 Notebooks": [[3, "notebooks"]], "\ud83c\udf93 Citation": [[3, "citation"]], "cyclops.data.features.medical_image": [[4, "module-cyclops.data.features.medical_image"]], "cyclops.data.features.medical_image.MedicalImage": [[5, "cyclops-data-features-medical-image-medicalimage"]], "cyclops.data.slicer": [[6, "module-cyclops.data.slicer"]], "cyclops.data.slicer.SliceSpec": [[7, "cyclops-data-slicer-slicespec"]], "cyclops.data.slicer.compound_filter": [[8, "cyclops-data-slicer-compound-filter"]], "cyclops.data.slicer.filter_datetime": [[9, "cyclops-data-slicer-filter-datetime"]], "cyclops.data.slicer.filter_non_null": [[10, "cyclops-data-slicer-filter-non-null"]], "cyclops.data.slicer.filter_range": [[11, "cyclops-data-slicer-filter-range"]], "cyclops.data.slicer.filter_string_contains": [[12, "cyclops-data-slicer-filter-string-contains"]], "cyclops.data.slicer.filter_value": [[13, "cyclops-data-slicer-filter-value"]], "cyclops.data.slicer.is_datetime": [[14, "cyclops-data-slicer-is-datetime"]], "cyclops.data.slicer.overall": [[15, "cyclops-data-slicer-overall"]], "cyclops.evaluate.evaluator": [[16, "module-cyclops.evaluate.evaluator"]], "cyclops.evaluate.evaluator.evaluate": [[17, "cyclops-evaluate-evaluator-evaluate"]], "cyclops.evaluate.fairness.config": [[18, "module-cyclops.evaluate.fairness.config"]], "cyclops.evaluate.fairness.config.FairnessConfig": [[19, "cyclops-evaluate-fairness-config-fairnessconfig"]], "cyclops.evaluate.fairness.evaluator": [[20, "module-cyclops.evaluate.fairness.evaluator"]], "cyclops.evaluate.fairness.evaluator.evaluate_fairness": [[21, "cyclops-evaluate-fairness-evaluator-evaluate-fairness"]], "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values": [[22, "cyclops-evaluate-fairness-evaluator-warn-too-many-unique-values"]], "cyclops.evaluate.metrics.accuracy": [[23, "module-cyclops.evaluate.metrics.accuracy"]], "cyclops.evaluate.metrics.accuracy.Accuracy": [[24, "cyclops-evaluate-metrics-accuracy-accuracy"]], "cyclops.evaluate.metrics.accuracy.BinaryAccuracy": [[25, "cyclops-evaluate-metrics-accuracy-binaryaccuracy"]], "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy": [[26, "cyclops-evaluate-metrics-accuracy-multiclassaccuracy"]], "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy": [[27, "cyclops-evaluate-metrics-accuracy-multilabelaccuracy"]], "cyclops.evaluate.metrics.auroc": [[28, "module-cyclops.evaluate.metrics.auroc"]], "cyclops.evaluate.metrics.auroc.AUROC": [[29, "cyclops-evaluate-metrics-auroc-auroc"]], "cyclops.evaluate.metrics.auroc.BinaryAUROC": [[30, "cyclops-evaluate-metrics-auroc-binaryauroc"]], "cyclops.evaluate.metrics.auroc.MulticlassAUROC": [[31, "cyclops-evaluate-metrics-auroc-multiclassauroc"]], "cyclops.evaluate.metrics.auroc.MultilabelAUROC": [[32, "cyclops-evaluate-metrics-auroc-multilabelauroc"]], "cyclops.evaluate.metrics.f_beta": [[33, "module-cyclops.evaluate.metrics.f_beta"]], "cyclops.evaluate.metrics.f_beta.BinaryF1Score": [[34, "cyclops-evaluate-metrics-f-beta-binaryf1score"]], "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore": [[35, "cyclops-evaluate-metrics-f-beta-binaryfbetascore"]], "cyclops.evaluate.metrics.f_beta.F1Score": [[36, "cyclops-evaluate-metrics-f-beta-f1score"]], "cyclops.evaluate.metrics.f_beta.FbetaScore": [[37, "cyclops-evaluate-metrics-f-beta-fbetascore"]], "cyclops.evaluate.metrics.f_beta.MulticlassF1Score": [[38, "cyclops-evaluate-metrics-f-beta-multiclassf1score"]], "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore": [[39, "cyclops-evaluate-metrics-f-beta-multiclassfbetascore"]], "cyclops.evaluate.metrics.f_beta.MultilabelF1Score": [[40, "cyclops-evaluate-metrics-f-beta-multilabelf1score"]], "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore": [[41, "cyclops-evaluate-metrics-f-beta-multilabelfbetascore"]], "cyclops.evaluate.metrics.factory": [[42, "module-cyclops.evaluate.metrics.factory"]], "cyclops.evaluate.metrics.factory.create_metric": [[43, "cyclops-evaluate-metrics-factory-create-metric"]], "cyclops.evaluate.metrics.functional.accuracy": [[44, "module-cyclops.evaluate.metrics.functional.accuracy"]], "cyclops.evaluate.metrics.functional.auroc": [[45, "module-cyclops.evaluate.metrics.functional.auroc"]], "cyclops.evaluate.metrics.functional.f_beta": [[46, "module-cyclops.evaluate.metrics.functional.f_beta"]], "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score": [[47, "cyclops-evaluate-metrics-functional-f-beta-binary-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score": [[48, "cyclops-evaluate-metrics-functional-f-beta-binary-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.f1_score": [[49, "cyclops-evaluate-metrics-functional-f-beta-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.fbeta_score": [[50, "cyclops-evaluate-metrics-functional-f-beta-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score": [[51, "cyclops-evaluate-metrics-functional-f-beta-multiclass-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score": [[52, "cyclops-evaluate-metrics-functional-f-beta-multiclass-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score": [[53, "cyclops-evaluate-metrics-functional-f-beta-multilabel-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score": [[54, "cyclops-evaluate-metrics-functional-f-beta-multilabel-fbeta-score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[55, "module-cyclops.evaluate.metrics.functional.precision_recall"]], "cyclops.evaluate.metrics.functional.precision_recall.binary_precision": [[56, "cyclops-evaluate-metrics-functional-precision-recall-binary-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.binary_recall": [[57, "cyclops-evaluate-metrics-functional-precision-recall-binary-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision": [[58, "cyclops-evaluate-metrics-functional-precision-recall-multiclass-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall": [[59, "cyclops-evaluate-metrics-functional-precision-recall-multiclass-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision": [[60, "cyclops-evaluate-metrics-functional-precision-recall-multilabel-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall": [[61, "cyclops-evaluate-metrics-functional-precision-recall-multilabel-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.precision": [[62, "cyclops-evaluate-metrics-functional-precision-recall-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.recall": [[63, "cyclops-evaluate-metrics-functional-precision-recall-recall"]], "cyclops.evaluate.metrics.functional.precision_recall_curve": [[64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"]], "cyclops.evaluate.metrics.functional.roc": [[65, "module-cyclops.evaluate.metrics.functional.roc"]], "cyclops.evaluate.metrics.functional.roc.binary_roc_curve": [[66, "cyclops-evaluate-metrics-functional-roc-binary-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve": [[67, "cyclops-evaluate-metrics-functional-roc-multiclass-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve": [[68, "cyclops-evaluate-metrics-functional-roc-multilabel-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.roc_curve": [[69, "cyclops-evaluate-metrics-functional-roc-roc-curve"]], "cyclops.evaluate.metrics.functional.sensitivity": [[70, "module-cyclops.evaluate.metrics.functional.sensitivity"]], "cyclops.evaluate.metrics.functional.specificity": [[71, "module-cyclops.evaluate.metrics.functional.specificity"]], "cyclops.evaluate.metrics.functional.stat_scores": [[72, "module-cyclops.evaluate.metrics.functional.stat_scores"]], "cyclops.evaluate.metrics.metric": [[73, "module-cyclops.evaluate.metrics.metric"]], "cyclops.evaluate.metrics.metric.Metric": [[74, "cyclops-evaluate-metrics-metric-metric"]], "cyclops.evaluate.metrics.metric.MetricCollection": [[75, "cyclops-evaluate-metrics-metric-metriccollection"]], "cyclops.evaluate.metrics.metric.OperatorMetric": [[76, "cyclops-evaluate-metrics-metric-operatormetric"]], "cyclops.evaluate.metrics.precision_recall": [[77, "module-cyclops.evaluate.metrics.precision_recall"]], "cyclops.evaluate.metrics.precision_recall.BinaryPrecision": [[78, "cyclops-evaluate-metrics-precision-recall-binaryprecision"]], "cyclops.evaluate.metrics.precision_recall.BinaryRecall": [[79, "cyclops-evaluate-metrics-precision-recall-binaryrecall"]], "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision": [[80, "cyclops-evaluate-metrics-precision-recall-multiclassprecision"]], "cyclops.evaluate.metrics.precision_recall.MulticlassRecall": [[81, "cyclops-evaluate-metrics-precision-recall-multiclassrecall"]], "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision": [[82, "cyclops-evaluate-metrics-precision-recall-multilabelprecision"]], "cyclops.evaluate.metrics.precision_recall.MultilabelRecall": [[83, "cyclops-evaluate-metrics-precision-recall-multilabelrecall"]], "cyclops.evaluate.metrics.precision_recall.Precision": [[84, "cyclops-evaluate-metrics-precision-recall-precision"]], "cyclops.evaluate.metrics.precision_recall.Recall": [[85, "cyclops-evaluate-metrics-precision-recall-recall"]], "cyclops.evaluate.metrics.precision_recall_curve": [[86, "module-cyclops.evaluate.metrics.precision_recall_curve"]], "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve": [[87, "cyclops-evaluate-metrics-precision-recall-curve-binaryprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve": [[88, "cyclops-evaluate-metrics-precision-recall-curve-multiclassprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve": [[89, "cyclops-evaluate-metrics-precision-recall-curve-multilabelprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve": [[90, "cyclops-evaluate-metrics-precision-recall-curve-precisionrecallcurve"]], "cyclops.evaluate.metrics.roc": [[91, "module-cyclops.evaluate.metrics.roc"]], "cyclops.evaluate.metrics.roc.BinaryROCCurve": [[92, "cyclops-evaluate-metrics-roc-binaryroccurve"]], "cyclops.evaluate.metrics.roc.MulticlassROCCurve": [[93, "cyclops-evaluate-metrics-roc-multiclassroccurve"]], "cyclops.evaluate.metrics.roc.MultilabelROCCurve": [[94, "cyclops-evaluate-metrics-roc-multilabelroccurve"]], "cyclops.evaluate.metrics.roc.ROCCurve": [[95, "cyclops-evaluate-metrics-roc-roccurve"]], "cyclops.evaluate.metrics.sensitivity": [[96, "module-cyclops.evaluate.metrics.sensitivity"]], "cyclops.evaluate.metrics.sensitivity.BinarySensitivity": [[97, "cyclops-evaluate-metrics-sensitivity-binarysensitivity"]], "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity": [[98, "cyclops-evaluate-metrics-sensitivity-multiclasssensitivity"]], "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity": [[99, "cyclops-evaluate-metrics-sensitivity-multilabelsensitivity"]], "cyclops.evaluate.metrics.sensitivity.Sensitivity": [[100, "cyclops-evaluate-metrics-sensitivity-sensitivity"]], "cyclops.evaluate.metrics.specificity": [[101, "module-cyclops.evaluate.metrics.specificity"]], "cyclops.evaluate.metrics.specificity.BinarySpecificity": [[102, "cyclops-evaluate-metrics-specificity-binaryspecificity"]], "cyclops.evaluate.metrics.specificity.MulticlassSpecificity": [[103, "cyclops-evaluate-metrics-specificity-multiclassspecificity"]], "cyclops.evaluate.metrics.specificity.MultilabelSpecificity": [[104, "cyclops-evaluate-metrics-specificity-multilabelspecificity"]], "cyclops.evaluate.metrics.specificity.Specificity": [[105, "cyclops-evaluate-metrics-specificity-specificity"]], "cyclops.evaluate.metrics.stat_scores": [[106, "module-cyclops.evaluate.metrics.stat_scores"]], "cyclops.evaluate.metrics.stat_scores.BinaryStatScores": [[107, "cyclops-evaluate-metrics-stat-scores-binarystatscores"]], "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores": [[108, "cyclops-evaluate-metrics-stat-scores-multiclassstatscores"]], "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores": [[109, "cyclops-evaluate-metrics-stat-scores-multilabelstatscores"]], "cyclops.evaluate.metrics.stat_scores.StatScores": [[110, "cyclops-evaluate-metrics-stat-scores-statscores"]], "cyclops.monitor.clinical_applicator": [[111, "module-cyclops.monitor.clinical_applicator"]], "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator": [[112, "cyclops-monitor-clinical-applicator-clinicalshiftapplicator"]], "cyclops.monitor.synthetic_applicator": [[113, "module-cyclops.monitor.synthetic_applicator"]], "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator": [[114, "cyclops-monitor-synthetic-applicator-syntheticshiftapplicator"]], "cyclops.monitor.synthetic_applicator.binary_noise_shift": [[115, "cyclops-monitor-synthetic-applicator-binary-noise-shift"]], "cyclops.monitor.synthetic_applicator.feature_association_shift": [[116, "cyclops-monitor-synthetic-applicator-feature-association-shift"]], "cyclops.monitor.synthetic_applicator.feature_swap_shift": [[117, "cyclops-monitor-synthetic-applicator-feature-swap-shift"]], "cyclops.monitor.synthetic_applicator.gaussian_noise_shift": [[118, "cyclops-monitor-synthetic-applicator-gaussian-noise-shift"]], "cyclops.monitor.synthetic_applicator.knockout_shift": [[119, "cyclops-monitor-synthetic-applicator-knockout-shift"]], "cyclops.query.base": [[120, "module-cyclops.query.base"]], "cyclops.query.base.DatasetQuerier": [[121, "cyclops-query-base-datasetquerier"]], "cyclops.query.eicu": [[122, "module-cyclops.query.eicu"]], "cyclops.query.eicu.EICUQuerier": [[123, "cyclops-query-eicu-eicuquerier"]], "cyclops.query.gemini": [[124, "module-cyclops.query.gemini"]], "cyclops.query.gemini.GEMINIQuerier": [[125, "cyclops-query-gemini-geminiquerier"]], "cyclops.query.interface": [[126, "module-cyclops.query.interface"]], "cyclops.query.interface.QueryInterface": [[127, "cyclops-query-interface-queryinterface"]], "cyclops.query.mimiciii": [[128, "module-cyclops.query.mimiciii"]], "cyclops.query.mimiciii.MIMICIIIQuerier": [[129, "cyclops-query-mimiciii-mimiciiiquerier"]], "cyclops.query.mimiciv": [[130, "module-cyclops.query.mimiciv"]], "cyclops.query.mimiciv.MIMICIVQuerier": [[131, "cyclops-query-mimiciv-mimicivquerier"]], "cyclops.query.omop": [[132, "module-cyclops.query.omop"]], "cyclops.query.omop.OMOPQuerier": [[133, "cyclops-query-omop-omopquerier"]], "cyclops.query.ops": [[134, "module-cyclops.query.ops"]], "cyclops.query.ops.AddColumn": [[135, "cyclops-query-ops-addcolumn"]], "cyclops.query.ops.AddDeltaColumn": [[136, "cyclops-query-ops-adddeltacolumn"]], "cyclops.query.ops.AddDeltaConstant": [[137, "cyclops-query-ops-adddeltaconstant"]], "cyclops.query.ops.AddNumeric": [[138, "cyclops-query-ops-addnumeric"]], "cyclops.query.ops.And": [[139, "cyclops-query-ops-and"]], "cyclops.query.ops.Apply": [[140, "cyclops-query-ops-apply"]], "cyclops.query.ops.Cast": [[141, "cyclops-query-ops-cast"]], "cyclops.query.ops.ConditionAfterDate": [[142, "cyclops-query-ops-conditionafterdate"]], "cyclops.query.ops.ConditionBeforeDate": [[143, "cyclops-query-ops-conditionbeforedate"]], "cyclops.query.ops.ConditionEndsWith": [[144, "cyclops-query-ops-conditionendswith"]], "cyclops.query.ops.ConditionEquals": [[145, "cyclops-query-ops-conditionequals"]], "cyclops.query.ops.ConditionGreaterThan": [[146, "cyclops-query-ops-conditiongreaterthan"]], "cyclops.query.ops.ConditionIn": [[147, "cyclops-query-ops-conditionin"]], "cyclops.query.ops.ConditionInMonths": [[148, "cyclops-query-ops-conditioninmonths"]], "cyclops.query.ops.ConditionInYears": [[149, "cyclops-query-ops-conditioninyears"]], "cyclops.query.ops.ConditionLessThan": [[150, "cyclops-query-ops-conditionlessthan"]], "cyclops.query.ops.ConditionLike": [[151, "cyclops-query-ops-conditionlike"]], "cyclops.query.ops.ConditionRegexMatch": [[152, "cyclops-query-ops-conditionregexmatch"]], "cyclops.query.ops.ConditionStartsWith": [[153, "cyclops-query-ops-conditionstartswith"]], "cyclops.query.ops.ConditionSubstring": [[154, "cyclops-query-ops-conditionsubstring"]], "cyclops.query.ops.Distinct": [[155, "cyclops-query-ops-distinct"]], "cyclops.query.ops.Drop": [[156, "cyclops-query-ops-drop"]], "cyclops.query.ops.DropEmpty": [[157, "cyclops-query-ops-dropempty"]], "cyclops.query.ops.DropNulls": [[158, "cyclops-query-ops-dropnulls"]], "cyclops.query.ops.ExtractTimestampComponent": [[159, "cyclops-query-ops-extracttimestampcomponent"]], "cyclops.query.ops.FillNull": [[160, "cyclops-query-ops-fillnull"]], "cyclops.query.ops.GroupByAggregate": [[161, "cyclops-query-ops-groupbyaggregate"]], "cyclops.query.ops.Join": [[162, "cyclops-query-ops-join"]], "cyclops.query.ops.Keep": [[163, "cyclops-query-ops-keep"]], "cyclops.query.ops.Limit": [[164, "cyclops-query-ops-limit"]], "cyclops.query.ops.Literal": [[165, "cyclops-query-ops-literal"]], "cyclops.query.ops.Or": [[166, "cyclops-query-ops-or"]], "cyclops.query.ops.OrderBy": [[167, "cyclops-query-ops-orderby"]], "cyclops.query.ops.QueryOp": [[168, "cyclops-query-ops-queryop"]], "cyclops.query.ops.RandomizeOrder": [[169, "cyclops-query-ops-randomizeorder"]], "cyclops.query.ops.Rename": [[170, "cyclops-query-ops-rename"]], "cyclops.query.ops.Reorder": [[171, "cyclops-query-ops-reorder"]], "cyclops.query.ops.ReorderAfter": [[172, "cyclops-query-ops-reorderafter"]], "cyclops.query.ops.Sequential": [[173, "cyclops-query-ops-sequential"]], "cyclops.query.ops.Substring": [[174, "cyclops-query-ops-substring"]], "cyclops.query.ops.Trim": [[175, "cyclops-query-ops-trim"]], "cyclops.query.ops.Union": [[176, "cyclops-query-ops-union"]], "cyclops.report.report": [[177, "module-cyclops.report.report"]], "cyclops.report.report.ModelCardReport": [[178, "cyclops-report-report-modelcardreport"]], "cyclops.tasks.cxr_classification": [[179, "module-cyclops.tasks.cxr_classification"]], "cyclops.tasks.cxr_classification.CXRClassificationTask": [[180, "cyclops-tasks-cxr-classification-cxrclassificationtask"]], "cyclops.tasks.mortality_prediction": [[181, "module-cyclops.tasks.mortality_prediction"]], "cyclops.tasks.mortality_prediction.MortalityPredictionTask": [[182, "cyclops-tasks-mortality-prediction-mortalitypredictiontask"]], "cyclops.data": [[183, "module-cyclops.data"]], "cyclops.data.features": [[183, "module-cyclops.data.features"]], "cyclops.evaluate": [[184, "module-cyclops.evaluate"]], "cyclops.evaluate.metrics": [[184, "module-cyclops.evaluate.metrics"]], "cyclops.evaluate.metrics.functional": [[184, "module-cyclops.evaluate.metrics.functional"]], "cyclops.evaluate.fairness": [[184, "module-cyclops.evaluate.fairness"]], "cyclops.monitor": [[185, "module-cyclops.monitor"]], "cyclops.query": [[186, "module-cyclops.query"]], "dataset APIs": [[186, "dataset-apis"]], "cyclops.report": [[187, "module-cyclops.report"]], "cyclops.tasks": [[188, "module-cyclops.tasks"]], "Tutorials": [[189, "tutorials"]], "eICU-CRD query API tutorial": [[190, "eICU-CRD-query-API-tutorial"]], "Imports and instantiate EICUQuerier": [[190, "Imports-and-instantiate-EICUQuerier"]], "Example 1. Get all female patients discharged in 2014 (limit to 100 rows).": [[190, "Example-1.-Get-all-female-patients-discharged-in-2014-(limit-to-100-rows)."]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in diagnosisstring), discharged in the year 2015.": [[190, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-diagnosisstring),-discharged-in-the-year-2015."]], "Example 3. Get potassium lab tests for patients discharged in the year 2014, for all teaching hospitals.": [[190, "Example-3.-Get-potassium-lab-tests-for-patients-discharged-in-the-year-2014,-for-all-teaching-hospitals."]], "Example 4. Get glucose medications (substring search) for female patients discharged in 2014.": [[190, "Example-4.-Get-glucose-medications-(substring-search)-for-female-patients-discharged-in-2014."]], "GEMINI query API tutorial": [[191, "GEMINI-query-API-tutorial"]], "Imports and instantiate GEMINIQuerier.": [[191, "Imports-and-instantiate-GEMINIQuerier."]], "Example 1a. Create a table with only one hospitalization per patient, keeping the most recent encounter for each patient. Sort the dataset by patient_id_hashed and discharge_date_time, and then keep the recent record.": [[191, "Example-1a.-Create-a-table-with-only-one-hospitalization-per-patient,-keeping-the-most-recent-encounter-for-each-patient.-Sort-the-dataset-by-patient_id_hashed-and-discharge_date_time,-and-then-keep-the-recent-record."]], "Example 1b. From the above set of encounters, take a subset of patients who were discharged between April 1, 2015 and March 31, 2016.": [[191, "Example-1b.-From-the-above-set-of-encounters,-take-a-subset-of-patients-who-were-discharged-between-April-1,-2015-and-March-31,-2016."]], "Example 1c. From the above set of encounters, get the total number of admissions for each hospital.": [[191, "Example-1c.-From-the-above-set-of-encounters,-get-the-total-number-of-admissions-for-each-hospital."]], "Example 2a. How many sodium tests were placed between Apr 1, 2015 and May 31, 2015 at hospital 101?": [[191, "Example-2a.-How-many-sodium-tests-were-placed-between-Apr-1,-2015-and-May-31,-2015-at-hospital-101?"]], "Heart Failure Prediction": [[192, "Heart-Failure-Prediction"]], "Import Libraries": [[192, "Import-Libraries"], [195, "Import-Libraries"], [198, "Import-Libraries"]], "Constants": [[192, "Constants"], [198, "Constants"]], "Data Loading": [[192, "Data-Loading"]], "Sex values": [[192, "Sex-values"]], "Age distribution": [[192, "Age-distribution"], [198, "Age-distribution"]], "Outcome distribution": [[192, "Outcome-distribution"], [198, "Outcome-distribution"]], "Identifying feature types": [[192, "Identifying-feature-types"], [198, "Identifying-feature-types"]], "Creating data preprocessors": [[192, "Creating-data-preprocessors"], [198, "Creating-data-preprocessors"]], "Creating Hugging Face Dataset": [[192, "Creating-Hugging-Face-Dataset"], [198, "Creating-Hugging-Face-Dataset"]], "Model Creation": [[192, "Model-Creation"], [198, "Model-Creation"]], "Task Creation": [[192, "Task-Creation"], [198, "Task-Creation"]], "Training": [[192, "Training"], [198, "Training"]], "Prediction": [[192, "Prediction"], [198, "Prediction"]], "Evaluation": [[192, "Evaluation"], [198, "Evaluation"]], "Performance over time": [[192, "Performance-over-time"], [195, "Performance-over-time"], [198, "Performance-over-time"]], "Report Generation": [[192, "Report-Generation"], [198, "Report-Generation"]], "MIMIC-III query API tutorial": [[193, "MIMIC-III-query-API-tutorial"]], "Imports and instantiate MIMICIIIQuerier": [[193, "Imports-and-instantiate-MIMICIIIQuerier"]], "Example 1. Get all male patients with a mortality outcome.": [[193, "Example-1.-Get-all-male-patients-with-a-mortality-outcome."]], "Example 2. Get all female patient encounters with diagnoses (gastroenteritis in ICD-9 long title).": [[193, "Example-2.-Get-all-female-patient-encounters-with-diagnoses-(gastroenteritis-in-ICD-9-long-title)."]], "Example 3. Get potassium lab tests for female patients.": [[193, "Example-3.-Get-potassium-lab-tests-for-female-patients."]], "Example 4. Get AaDO2 carevue chart events for male patients that have a valuenum of less than 20.": [[193, "Example-4.-Get-AaDO2-carevue-chart-events-for-male-patients-that-have-a-valuenum-of-less-than-20."]], "MIMIC-IV query API tutorial": [[194, "MIMIC-IV-query-API-tutorial"]], "Imports and instantiate MIMICIVQuerier": [[194, "Imports-and-instantiate-MIMICIVQuerier"]], "Example 1. Get all patient admissions from 2021 or later (approx year of admission)": [[194, "Example-1.-Get-all-patient-admissions-from-2021-or-later-(approx-year-of-admission)"]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in ICD-10 long title), in the year 2015.": [[194, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-ICD-10-long-title),-in-the-year-2015."]], "Example 3. Advanced - uses ConditionRegexMatch from cyclops.query.ops. Get all patient encounters with diagnoses (ICD-9 long title contains schizophrenia and chronic ), in the year 2015.": [[194, "Example-3.-Advanced---uses-ConditionRegexMatch-from-cyclops.query.ops.-Get-all-patient-encounters-with-diagnoses-(ICD-9-long-title-contains-schizophrenia-and-chronic-),-in-the-year-2015."]], "Example 4. Get routine vital signs for patients from year 2015.": [[194, "Example-4.-Get-routine-vital-signs-for-patients-from-year-2015."]], "Example 5. Get hemoglobin lab tests for patients from year 2009.": [[194, "Example-5.-Get-hemoglobin-lab-tests-for-patients-from-year-2009."]], "Example 6. Get radiology reports and filter on keywords lymphadenopathy and infectious occurring together from year 2009.": [[194, "Example-6.-Get-radiology-reports-and-filter-on-keywords-lymphadenopathy-and-infectious-occurring-together-from-year-2009."]], "Example 7. Get all female patient encounters from year 2015, and return as dask dataframe (lazy evaluation) with 4 partitions (batches) aggregated based on subject_id.": [[194, "Example-7.-Get-all-female-patient-encounters-from-year-2015,-and-return-as-dask-dataframe-(lazy-evaluation)-with-4-partitions-(batches)-aggregated-based-on-subject_id."]], "Example 8. Running a raw SQL string.": [[194, "Example-8.-Running-a-raw-SQL-string."]], "Chest X-Ray Disease Classification": [[195, "Chest-X-Ray-Disease-Classification"]], "Load Dataset": [[195, "Load-Dataset"]], "Load Model and get Predictions": [[195, "Load-Model-and-get-Predictions"]], "Multilabel AUROC by Pathology and Sex": [[195, "Multilabel-AUROC-by-Pathology-and-Sex"]], "Multilabel AUROC by Pathology and Age": [[195, "Multilabel-AUROC-by-Pathology-and-Age"]], "Balanced Error Rate by Pathology and Age": [[195, "Balanced-Error-Rate-by-Pathology-and-Age"]], "Balanced Error Rate Parity by Pathology and Age": [[195, "Balanced-Error-Rate-Parity-by-Pathology-and-Age"]], "Log Performance Metrics as Tests w/ Thresholds": [[195, "Log-Performance-Metrics-as-Tests-w/-Thresholds"]], "Populate Model Card Fields": [[195, "Populate-Model-Card-Fields"]], "NIHCXR Clinical Drift Experiments Tutorial": [[196, "NIHCXR-Clinical-Drift-Experiments-Tutorial"]], "Import Libraries and Load NIHCXR Dataset": [[196, "Import-Libraries-and-Load-NIHCXR-Dataset"]], "Example 1. Generate Source/Target Dataset for Experiments (1-2)": [[196, "Example-1.-Generate-Source/Target-Dataset-for-Experiments-(1-2)"]], "Example 2. Sensitivity test experiment with 3 dimensionality reduction techniques": [[196, "Example-2.-Sensitivity-test-experiment-with-3-dimensionality-reduction-techniques"]], "Example 3. Sensitivity test experiment with models trained on different datasets": [[196, "Example-3.-Sensitivity-test-experiment-with-models-trained-on-different-datasets"]], "Example 4. Sensitivity test experiment with different clinical shifts": [[196, "Example-4.-Sensitivity-test-experiment-with-different-clinical-shifts"]], "Example 5. Rolling window experiment with synthetic timestamps using biweekly window": [[196, "Example-5.-Rolling-window-experiment-with-synthetic-timestamps-using-biweekly-window"]], "OMOP query API tutorial": [[197, "OMOP-query-API-tutorial"]], "Imports and instantiate OMOPQuerier.": [[197, "Imports-and-instantiate-OMOPQuerier."], [197, "id1"]], "Example 1. Get all patient visits in or after 2010.": [[197, "Example-1.-Get-all-patient-visits-in-or-after-2010."]], "Example 2. Get measurements for all visits in or after 2020.": [[197, "Example-2.-Get-measurements-for-all-visits-in-or-after-2020."]], "Example 1. Get all patient visits that ended in a mortality outcome in or after 2010.": [[197, "Example-1.-Get-all-patient-visits-that-ended-in-a-mortality-outcome-in-or-after-2010."]], "Example 2. Get all measurements for female patient visits with sepsis diagnoses, that ended in a mortality outcome.": [[197, "Example-2.-Get-all-measurements-for-female-patient-visits-with-sepsis-diagnoses,-that-ended-in-a-mortality-outcome."]], "Prolonged Length of Stay Prediction": [[198, "Prolonged-Length-of-Stay-Prediction"]], "Data Querying": [[198, "Data-Querying"]], "Compute length of stay (labels)": [[198, "Compute-length-of-stay-(labels)"]], "Data Inspection and Preprocessing": [[198, "Data-Inspection-and-Preprocessing"]], "Drop NaNs based on the NAN_THRESHOLD": [[198, "Drop-NaNs-based-on-the-NAN_THRESHOLD"]], "Length of stay distribution": [[198, "Length-of-stay-distribution"]], "Gender distribution": [[198, "Gender-distribution"]], "monitor API": [[199, "monitor-api"]], "query API": [[200, "query-api"]], "Example use cases": [[201, "example-use-cases"]], "Tabular data": [[201, "tabular-data"]], "Kaggle Heart Failure Prediction": [[201, "kaggle-heart-failure-prediction"]], "Synthea Prolonged Length of Stay Prediction": [[201, "synthea-prolonged-length-of-stay-prediction"]], "Image data": [[201, "image-data"]], "NIH Chest X-ray classification": [[201, "nih-chest-x-ray-classification"]]}, "indexentries": {"cyclops.data.features.medical_image": [[4, "module-cyclops.data.features.medical_image"]], "module": [[4, "module-cyclops.data.features.medical_image"], [6, "module-cyclops.data.slicer"], [16, "module-cyclops.evaluate.evaluator"], [18, "module-cyclops.evaluate.fairness.config"], [20, "module-cyclops.evaluate.fairness.evaluator"], [23, "module-cyclops.evaluate.metrics.accuracy"], [28, "module-cyclops.evaluate.metrics.auroc"], [33, "module-cyclops.evaluate.metrics.f_beta"], [42, "module-cyclops.evaluate.metrics.factory"], [44, "module-cyclops.evaluate.metrics.functional.accuracy"], [45, "module-cyclops.evaluate.metrics.functional.auroc"], [46, "module-cyclops.evaluate.metrics.functional.f_beta"], [55, "module-cyclops.evaluate.metrics.functional.precision_recall"], [64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"], [65, "module-cyclops.evaluate.metrics.functional.roc"], [70, "module-cyclops.evaluate.metrics.functional.sensitivity"], [71, "module-cyclops.evaluate.metrics.functional.specificity"], [72, "module-cyclops.evaluate.metrics.functional.stat_scores"], [73, "module-cyclops.evaluate.metrics.metric"], [77, "module-cyclops.evaluate.metrics.precision_recall"], [86, "module-cyclops.evaluate.metrics.precision_recall_curve"], [91, "module-cyclops.evaluate.metrics.roc"], [96, "module-cyclops.evaluate.metrics.sensitivity"], [101, "module-cyclops.evaluate.metrics.specificity"], [106, "module-cyclops.evaluate.metrics.stat_scores"], [111, "module-cyclops.monitor.clinical_applicator"], [113, "module-cyclops.monitor.synthetic_applicator"], [120, "module-cyclops.query.base"], [122, "module-cyclops.query.eicu"], [124, "module-cyclops.query.gemini"], [126, "module-cyclops.query.interface"], [128, "module-cyclops.query.mimiciii"], [130, "module-cyclops.query.mimiciv"], [132, "module-cyclops.query.omop"], [134, "module-cyclops.query.ops"], [177, "module-cyclops.report.report"], [179, "module-cyclops.tasks.cxr_classification"], [181, "module-cyclops.tasks.mortality_prediction"], [183, "module-cyclops.data"], [183, "module-cyclops.data.features"], [184, "module-cyclops.evaluate"], [184, "module-cyclops.evaluate.fairness"], [184, "module-cyclops.evaluate.metrics"], [184, "module-cyclops.evaluate.metrics.functional"], [185, "module-cyclops.monitor"], [186, "module-cyclops.query"], [187, "module-cyclops.report"], [188, "module-cyclops.tasks"]], "medicalimage (class in cyclops.data.features.medical_image)": [[5, "cyclops.data.features.medical_image.MedicalImage"]], "__call__() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.__call__"]], "cast_storage() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.cast_storage"]], "decode_example() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.decode_example"]], "embed_storage() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.embed_storage"]], "encode_example() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.encode_example"]], "flatten() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.flatten"]], "cyclops.data.slicer": [[6, "module-cyclops.data.slicer"]], "slicespec (class in cyclops.data.slicer)": [[7, "cyclops.data.slicer.SliceSpec"]], "_registry (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec._registry"]], "add_slice_spec() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.add_slice_spec"]], "column_names (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.column_names"]], "get_slices() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.get_slices"]], "include_overall (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.include_overall"]], "slices() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.slices"]], "spec_list (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.spec_list"]], "validate (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.validate"]], "compound_filter() (in module cyclops.data.slicer)": [[8, "cyclops.data.slicer.compound_filter"]], "filter_datetime() (in module cyclops.data.slicer)": [[9, "cyclops.data.slicer.filter_datetime"]], "filter_non_null() (in module cyclops.data.slicer)": [[10, "cyclops.data.slicer.filter_non_null"]], "filter_range() (in module cyclops.data.slicer)": [[11, "cyclops.data.slicer.filter_range"]], "filter_string_contains() (in module cyclops.data.slicer)": [[12, "cyclops.data.slicer.filter_string_contains"]], "filter_value() (in module cyclops.data.slicer)": [[13, "cyclops.data.slicer.filter_value"]], "is_datetime() (in module cyclops.data.slicer)": [[14, "cyclops.data.slicer.is_datetime"]], "overall() (in module cyclops.data.slicer)": [[15, "cyclops.data.slicer.overall"]], "cyclops.evaluate.evaluator": [[16, "module-cyclops.evaluate.evaluator"]], "evaluate() (in module cyclops.evaluate.evaluator)": [[17, "cyclops.evaluate.evaluator.evaluate"]], "cyclops.evaluate.fairness.config": [[18, "module-cyclops.evaluate.fairness.config"]], "fairnessconfig (class in cyclops.evaluate.fairness.config)": [[19, "cyclops.evaluate.fairness.config.FairnessConfig"]], "cyclops.evaluate.fairness.evaluator": [[20, "module-cyclops.evaluate.fairness.evaluator"]], "evaluate_fairness() (in module cyclops.evaluate.fairness.evaluator)": [[21, "cyclops.evaluate.fairness.evaluator.evaluate_fairness"]], "warn_too_many_unique_values() (in module cyclops.evaluate.fairness.evaluator)": [[22, "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values"]], "cyclops.evaluate.metrics.accuracy": [[23, "module-cyclops.evaluate.metrics.accuracy"]], "accuracy (class in cyclops.evaluate.metrics.accuracy)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy"]], "__add__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__add__"]], "__call__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__call__"]], "__init__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__init__"]], "__mul__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__mul__"]], "add_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.add_state"]], "clone() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.clone"]], "compute() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.compute"]], "reset_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.reset_state"]], "update_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.update_state"]], "binaryaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy"]], "__add__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__add__"]], "__call__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__call__"]], "__init__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__init__"]], "__mul__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__mul__"]], "add_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.add_state"]], "clone() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.clone"]], "compute() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.compute"]], "reset_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.reset_state"]], "update_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.update_state"]], "multiclassaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy"]], "__add__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__add__"]], "__call__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__call__"]], "__init__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__init__"]], "__mul__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__mul__"]], "add_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.add_state"]], "clone() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.clone"]], "compute() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.compute"]], "reset_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.reset_state"]], "update_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.update_state"]], "multilabelaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy"]], "__add__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__add__"]], "__call__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__call__"]], "__init__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__init__"]], "__mul__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__mul__"]], "add_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.add_state"]], "clone() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.clone"]], "compute() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.compute"]], "reset_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.reset_state"]], "update_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.update_state"]], "cyclops.evaluate.metrics.auroc": [[28, "module-cyclops.evaluate.metrics.auroc"]], "auroc (class in cyclops.evaluate.metrics.auroc)": [[29, "cyclops.evaluate.metrics.auroc.AUROC"]], "__add__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__add__"]], "__call__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__call__"]], "__init__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__init__"]], "__mul__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__mul__"]], "add_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.add_state"]], "clone() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.clone"]], "compute() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.compute"]], "reset_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.reset_state"]], "update_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.update_state"]], "binaryauroc (class in cyclops.evaluate.metrics.auroc)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC"]], "__add__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__add__"]], "__call__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__call__"]], "__init__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__init__"]], "__mul__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__mul__"]], "add_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.add_state"]], "clone() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.clone"]], "compute() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.compute"]], "reset_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.reset_state"]], "update_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.update_state"]], "multiclassauroc (class in cyclops.evaluate.metrics.auroc)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC"]], "__add__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__add__"]], "__call__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__call__"]], "__init__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__init__"]], "__mul__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__mul__"]], "add_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.add_state"]], "clone() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.clone"]], "compute() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.compute"]], "reset_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.reset_state"]], "update_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.update_state"]], "multilabelauroc (class in cyclops.evaluate.metrics.auroc)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC"]], "__add__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__add__"]], "__call__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__call__"]], "__init__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__init__"]], "__mul__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__mul__"]], "add_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.add_state"]], "clone() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.clone"]], "compute() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.compute"]], "reset_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.reset_state"]], "update_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.update_state"]], "cyclops.evaluate.metrics.f_beta": [[33, "module-cyclops.evaluate.metrics.f_beta"]], "binaryf1score (class in cyclops.evaluate.metrics.f_beta)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score"]], "__add__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__add__"]], "__call__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__call__"]], "__init__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__init__"]], "__mul__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__mul__"]], "add_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.add_state"]], "clone() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.clone"]], "compute() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.compute"]], "reset_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.reset_state"]], "update_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.update_state"]], "binaryfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore"]], "__add__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__add__"]], "__call__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__call__"]], "__init__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__init__"]], "__mul__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__mul__"]], "add_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.add_state"]], "clone() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.clone"]], "compute() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.compute"]], "reset_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.reset_state"]], "update_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.update_state"]], "f1score (class in cyclops.evaluate.metrics.f_beta)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score"]], "__add__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__add__"]], "__call__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__call__"]], "__init__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__init__"]], "__mul__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__mul__"]], "add_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.add_state"]], "clone() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.clone"]], "compute() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.compute"]], "reset_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.reset_state"]], "update_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.update_state"]], "fbetascore (class in cyclops.evaluate.metrics.f_beta)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore"]], "__add__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__add__"]], "__call__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__call__"]], "__init__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__init__"]], "__mul__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__mul__"]], "add_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.add_state"]], "clone() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.clone"]], "compute() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.compute"]], "reset_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.reset_state"]], "update_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.update_state"]], "multiclassf1score (class in cyclops.evaluate.metrics.f_beta)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score"]], "__add__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__add__"]], "__call__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__call__"]], "__init__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__init__"]], "__mul__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__mul__"]], "add_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.add_state"]], "clone() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.clone"]], "compute() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.compute"]], "reset_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.reset_state"]], "update_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.update_state"]], "multiclassfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore"]], "__add__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__add__"]], "__call__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__call__"]], "__init__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__init__"]], "__mul__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__mul__"]], "add_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.add_state"]], "clone() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.clone"]], "compute() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.compute"]], "reset_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.reset_state"]], "update_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.update_state"]], "multilabelf1score (class in cyclops.evaluate.metrics.f_beta)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score"]], "__add__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__add__"]], "__call__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__call__"]], "__init__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__init__"]], "__mul__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__mul__"]], "add_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.add_state"]], "clone() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.clone"]], "compute() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.compute"]], "reset_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.reset_state"]], "update_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.update_state"]], "multilabelfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore"]], "__add__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__add__"]], "__call__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__call__"]], "__init__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__init__"]], "__mul__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__mul__"]], "add_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.add_state"]], "clone() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.clone"]], "compute() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.compute"]], "reset_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.reset_state"]], "update_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.update_state"]], "cyclops.evaluate.metrics.factory": [[42, "module-cyclops.evaluate.metrics.factory"]], "create_metric() (in module cyclops.evaluate.metrics.factory)": [[43, "cyclops.evaluate.metrics.factory.create_metric"]], "cyclops.evaluate.metrics.functional.accuracy": [[44, "module-cyclops.evaluate.metrics.functional.accuracy"]], "cyclops.evaluate.metrics.functional.auroc": [[45, "module-cyclops.evaluate.metrics.functional.auroc"]], "cyclops.evaluate.metrics.functional.f_beta": [[46, "module-cyclops.evaluate.metrics.functional.f_beta"]], "binary_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[47, "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score"]], "binary_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[48, "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score"]], "f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[49, "cyclops.evaluate.metrics.functional.f_beta.f1_score"]], "fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[50, "cyclops.evaluate.metrics.functional.f_beta.fbeta_score"]], "multiclass_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[51, "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score"]], "multiclass_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[52, "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score"]], "multilabel_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[53, "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score"]], "multilabel_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[54, "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[55, "module-cyclops.evaluate.metrics.functional.precision_recall"]], "binary_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[56, "cyclops.evaluate.metrics.functional.precision_recall.binary_precision"]], "binary_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[57, "cyclops.evaluate.metrics.functional.precision_recall.binary_recall"]], "multiclass_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[58, "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision"]], "multiclass_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[59, "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall"]], "multilabel_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[60, "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision"]], "multilabel_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[61, "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall"]], "precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[62, "cyclops.evaluate.metrics.functional.precision_recall.precision"]], "recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[63, "cyclops.evaluate.metrics.functional.precision_recall.recall"]], "cyclops.evaluate.metrics.functional.precision_recall_curve": [[64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"]], "cyclops.evaluate.metrics.functional.roc": [[65, "module-cyclops.evaluate.metrics.functional.roc"]], "binary_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[66, "cyclops.evaluate.metrics.functional.roc.binary_roc_curve"]], "multiclass_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[67, "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve"]], "multilabel_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[68, "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve"]], "roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[69, "cyclops.evaluate.metrics.functional.roc.roc_curve"]], "cyclops.evaluate.metrics.functional.sensitivity": [[70, "module-cyclops.evaluate.metrics.functional.sensitivity"]], "cyclops.evaluate.metrics.functional.specificity": [[71, "module-cyclops.evaluate.metrics.functional.specificity"]], "cyclops.evaluate.metrics.functional.stat_scores": [[72, "module-cyclops.evaluate.metrics.functional.stat_scores"]], "cyclops.evaluate.metrics.metric": [[73, "module-cyclops.evaluate.metrics.metric"]], "metric (class in cyclops.evaluate.metrics.metric)": [[74, "cyclops.evaluate.metrics.metric.Metric"]], "__add__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__add__"]], "__call__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__call__"]], "__init__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__init__"]], "__mul__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__mul__"]], "add_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.add_state"]], "clone() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.clone"]], "compute() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.compute"]], "reset_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.reset_state"]], "update_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.update_state"]], "metriccollection (class in cyclops.evaluate.metrics.metric)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection"]], "__call__() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.__call__"]], "__init__() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.__init__"]], "add_metrics() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.add_metrics"]], "clear() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.clear"]], "clone() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.clone"]], "compute() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.compute"]], "get() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.get"]], "items() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.items"]], "keys() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.keys"]], "pop() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.pop"]], "popitem() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.popitem"]], "reset_state() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.reset_state"]], "setdefault() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.setdefault"]], "update() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.update"]], "update_state() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.update_state"]], "values() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.values"]], "operatormetric (class in cyclops.evaluate.metrics.metric)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric"]], "__add__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__add__"]], "__call__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__call__"]], "__init__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__init__"]], "__mul__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__mul__"]], "add_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.add_state"]], "clone() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.clone"]], "compute() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.compute"]], "reset_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.reset_state"]], "update_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.update_state"]], "cyclops.evaluate.metrics.precision_recall": [[77, "module-cyclops.evaluate.metrics.precision_recall"]], "binaryprecision (class in cyclops.evaluate.metrics.precision_recall)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision"]], "__add__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__add__"]], "__call__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__call__"]], "__init__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__init__"]], "__mul__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__mul__"]], "add_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.add_state"]], "clone() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.clone"]], "compute() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.compute"]], "reset_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.reset_state"]], "update_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.update_state"]], "binaryrecall (class in cyclops.evaluate.metrics.precision_recall)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall"]], "__add__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__add__"]], "__call__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__call__"]], "__init__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__init__"]], "__mul__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__mul__"]], "add_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.add_state"]], "clone() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.clone"]], "compute() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.compute"]], "reset_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.reset_state"]], "update_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.update_state"]], "multiclassprecision (class in cyclops.evaluate.metrics.precision_recall)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision"]], "__add__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__add__"]], "__call__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__call__"]], "__init__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__init__"]], "__mul__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__mul__"]], "add_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.add_state"]], "clone() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.clone"]], "compute() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.compute"]], "reset_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.reset_state"]], "update_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.update_state"]], "multiclassrecall (class in cyclops.evaluate.metrics.precision_recall)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall"]], "__add__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__add__"]], "__call__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__call__"]], "__init__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__init__"]], "__mul__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__mul__"]], "add_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.add_state"]], "clone() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.clone"]], "compute() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.compute"]], "reset_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.reset_state"]], "update_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.update_state"]], "multilabelprecision (class in cyclops.evaluate.metrics.precision_recall)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision"]], "__add__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__add__"]], "__call__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__call__"]], "__init__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__init__"]], "__mul__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__mul__"]], "add_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.add_state"]], "clone() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.clone"]], "compute() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.compute"]], "reset_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.reset_state"]], "update_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.update_state"]], "multilabelrecall (class in cyclops.evaluate.metrics.precision_recall)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall"]], "__add__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__add__"]], "__call__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__call__"]], "__init__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__init__"]], "__mul__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__mul__"]], "add_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.add_state"]], "clone() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.clone"]], "compute() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.compute"]], "reset_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.reset_state"]], "update_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.update_state"]], "precision (class in cyclops.evaluate.metrics.precision_recall)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision"]], "__add__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__add__"]], "__call__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__call__"]], "__init__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__init__"]], "__mul__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__mul__"]], "add_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.add_state"]], "clone() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.clone"]], "compute() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.compute"]], "reset_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.reset_state"]], "update_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.update_state"]], "recall (class in cyclops.evaluate.metrics.precision_recall)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall"]], "__add__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__add__"]], "__call__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__call__"]], "__init__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__init__"]], "__mul__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__mul__"]], "add_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.add_state"]], "clone() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.clone"]], "compute() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.compute"]], "reset_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.reset_state"]], "update_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.update_state"]], "cyclops.evaluate.metrics.precision_recall_curve": [[86, "module-cyclops.evaluate.metrics.precision_recall_curve"]], "binaryprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve"]], "__add__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__add__"]], "__call__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__call__"]], "__init__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__init__"]], "__mul__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__mul__"]], "add_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.add_state"]], "clone() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.clone"]], "compute() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.compute"]], "reset_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.reset_state"]], "update_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.update_state"]], "multiclassprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve"]], "__add__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__add__"]], "__call__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__call__"]], "__init__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__init__"]], "__mul__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__mul__"]], "add_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.add_state"]], "clone() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.clone"]], "compute() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.compute"]], "reset_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.reset_state"]], "update_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.update_state"]], "multilabelprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve"]], "__add__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__add__"]], "__call__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__call__"]], "__init__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__init__"]], "__mul__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__mul__"]], "add_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.add_state"]], "clone() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.clone"]], "compute() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.compute"]], "reset_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.reset_state"]], "update_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.update_state"]], "precisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve"]], "__add__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__add__"]], "__call__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__call__"]], "__init__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__init__"]], "__mul__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__mul__"]], "add_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.add_state"]], "clone() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.clone"]], "compute() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.compute"]], "reset_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.reset_state"]], "update_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.update_state"]], "cyclops.evaluate.metrics.roc": [[91, "module-cyclops.evaluate.metrics.roc"]], "binaryroccurve (class in cyclops.evaluate.metrics.roc)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve"]], "__add__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__add__"]], "__call__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__call__"]], "__init__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__init__"]], "__mul__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__mul__"]], "add_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.add_state"]], "clone() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.clone"]], "compute() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.compute"]], "reset_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.reset_state"]], "update_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.update_state"]], "multiclassroccurve (class in cyclops.evaluate.metrics.roc)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve"]], "__add__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__add__"]], "__call__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__call__"]], "__init__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__init__"]], "__mul__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__mul__"]], "add_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.add_state"]], "clone() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.clone"]], "compute() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.compute"]], "reset_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.reset_state"]], "update_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.update_state"]], "multilabelroccurve (class in cyclops.evaluate.metrics.roc)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve"]], "__add__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__add__"]], "__call__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__call__"]], "__init__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__init__"]], "__mul__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__mul__"]], "add_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.add_state"]], "clone() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.clone"]], "compute() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.compute"]], "reset_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.reset_state"]], "update_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.update_state"]], "roccurve (class in cyclops.evaluate.metrics.roc)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve"]], "__add__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__add__"]], "__call__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__call__"]], "__init__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__init__"]], "__mul__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__mul__"]], "add_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.add_state"]], "clone() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.clone"]], "compute() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.compute"]], "reset_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.reset_state"]], "update_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.update_state"]], "cyclops.evaluate.metrics.sensitivity": [[96, "module-cyclops.evaluate.metrics.sensitivity"]], "binarysensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity"]], "__add__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__add__"]], "__call__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__call__"]], "__init__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__init__"]], "__mul__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__mul__"]], "add_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.add_state"]], "clone() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.clone"]], "compute() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.compute"]], "reset_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.reset_state"]], "update_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.update_state"]], "multiclasssensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity"]], "__add__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__add__"]], "__call__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__call__"]], "__init__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__init__"]], "__mul__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__mul__"]], "add_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.add_state"]], "clone() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.clone"]], "compute() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.compute"]], "reset_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.reset_state"]], "update_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.update_state"]], "multilabelsensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity"]], "__add__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__add__"]], "__call__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__call__"]], "__init__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__init__"]], "__mul__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__mul__"]], "add_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.add_state"]], "clone() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.clone"]], "compute() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.compute"]], "reset_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.reset_state"]], "update_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.update_state"]], "sensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity"]], "__add__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__add__"]], "__call__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__call__"]], "__init__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__init__"]], "__mul__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__mul__"]], "add_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.add_state"]], "clone() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.clone"]], "compute() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.compute"]], "reset_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.reset_state"]], "update_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.update_state"]], "cyclops.evaluate.metrics.specificity": [[101, "module-cyclops.evaluate.metrics.specificity"]], "binaryspecificity (class in cyclops.evaluate.metrics.specificity)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity"]], "__add__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__add__"]], "__call__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__call__"]], "__init__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__init__"]], "__mul__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__mul__"]], "add_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.add_state"]], "clone() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.clone"]], "compute() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.compute"]], "reset_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.reset_state"]], "update_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.update_state"]], "multiclassspecificity (class in cyclops.evaluate.metrics.specificity)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity"]], "__add__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__add__"]], "__call__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__call__"]], "__init__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__init__"]], "__mul__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__mul__"]], "add_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.add_state"]], "clone() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.clone"]], "compute() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.compute"]], "reset_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.reset_state"]], "update_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.update_state"]], "multilabelspecificity (class in cyclops.evaluate.metrics.specificity)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity"]], "__add__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__add__"]], "__call__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__call__"]], "__init__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__init__"]], "__mul__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__mul__"]], "add_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.add_state"]], "clone() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.clone"]], "compute() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.compute"]], "reset_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.reset_state"]], "update_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.update_state"]], "specificity (class in cyclops.evaluate.metrics.specificity)": [[105, "cyclops.evaluate.metrics.specificity.Specificity"]], "__add__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__add__"]], "__call__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__call__"]], "__init__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__init__"]], "__mul__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__mul__"]], "add_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.add_state"]], "clone() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.clone"]], "compute() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.compute"]], "reset_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.reset_state"]], "update_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.update_state"]], "cyclops.evaluate.metrics.stat_scores": [[106, "module-cyclops.evaluate.metrics.stat_scores"]], "binarystatscores (class in cyclops.evaluate.metrics.stat_scores)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores"]], "__add__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__add__"]], "__call__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__call__"]], "__init__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__init__"]], "__mul__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__mul__"]], "add_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.add_state"]], "clone() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.clone"]], "compute() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.compute"]], "reset_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.reset_state"]], "update_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.update_state"]], "multiclassstatscores (class in cyclops.evaluate.metrics.stat_scores)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores"]], "__add__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__add__"]], "__call__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__call__"]], "__init__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__init__"]], "__mul__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__mul__"]], "add_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.add_state"]], "clone() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.clone"]], "compute() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.compute"]], "reset_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.reset_state"]], "update_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.update_state"]], "multilabelstatscores (class in cyclops.evaluate.metrics.stat_scores)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores"]], "__add__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__add__"]], "__call__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__call__"]], "__init__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__init__"]], "__mul__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__mul__"]], "add_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.add_state"]], "clone() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.clone"]], "compute() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.compute"]], "reset_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.reset_state"]], "update_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.update_state"]], "statscores (class in cyclops.evaluate.metrics.stat_scores)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores"]], "__add__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__add__"]], "__call__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__call__"]], "__init__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__init__"]], "__mul__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__mul__"]], "add_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.add_state"]], "clone() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.clone"]], "compute() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.compute"]], "reset_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.reset_state"]], "update_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.update_state"]], "cyclops.monitor.clinical_applicator": [[111, "module-cyclops.monitor.clinical_applicator"]], "clinicalshiftapplicator (class in cyclops.monitor.clinical_applicator)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator"]], "age() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.age"]], "apply_shift() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.apply_shift"]], "custom() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.custom"]], "hospital_type() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.hospital_type"]], "month() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.month"]], "sex() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.sex"]], "time() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.time"]], "cyclops.monitor.synthetic_applicator": [[113, "module-cyclops.monitor.synthetic_applicator"]], "syntheticshiftapplicator (class in cyclops.monitor.synthetic_applicator)": [[114, "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator"]], "apply_shift() (syntheticshiftapplicator method)": [[114, "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator.apply_shift"]], "binary_noise_shift() (in module cyclops.monitor.synthetic_applicator)": [[115, "cyclops.monitor.synthetic_applicator.binary_noise_shift"]], "feature_association_shift() (in module cyclops.monitor.synthetic_applicator)": [[116, "cyclops.monitor.synthetic_applicator.feature_association_shift"]], "feature_swap_shift() (in module cyclops.monitor.synthetic_applicator)": [[117, "cyclops.monitor.synthetic_applicator.feature_swap_shift"]], "gaussian_noise_shift() (in module cyclops.monitor.synthetic_applicator)": [[118, "cyclops.monitor.synthetic_applicator.gaussian_noise_shift"]], "knockout_shift() (in module cyclops.monitor.synthetic_applicator)": [[119, "cyclops.monitor.synthetic_applicator.knockout_shift"]], "cyclops.query.base": [[120, "module-cyclops.query.base"]], "datasetquerier (class in cyclops.query.base)": [[121, "cyclops.query.base.DatasetQuerier"]], "db (datasetquerier attribute)": [[121, "cyclops.query.base.DatasetQuerier.db"]], "get_table() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.get_table"]], "list_columns() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_columns"]], "list_custom_tables() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_custom_tables"]], "list_schemas() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_schemas"]], "list_tables() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_tables"]], "cyclops.query.eicu": [[122, "module-cyclops.query.eicu"]], "eicuquerier (class in cyclops.query.eicu)": [[123, "cyclops.query.eicu.EICUQuerier"]], "__init__() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.__init__"]], "get_table() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.get_table"]], "list_columns() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_columns"]], "list_custom_tables() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_custom_tables"]], "list_schemas() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_schemas"]], "list_tables() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_tables"]], "cyclops.query.gemini": [[124, "module-cyclops.query.gemini"]], "geminiquerier (class in cyclops.query.gemini)": [[125, "cyclops.query.gemini.GEMINIQuerier"]], "__init__() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.__init__"]], "care_units() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.care_units"]], "diagnoses() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.diagnoses"]], "get_table() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.get_table"]], "imaging() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.imaging"]], "ip_admin() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.ip_admin"]], "list_columns() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_columns"]], "list_custom_tables() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_custom_tables"]], "list_schemas() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_schemas"]], "list_tables() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_tables"]], "room_transfer() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.room_transfer"]], "cyclops.query.interface": [[126, "module-cyclops.query.interface"]], "queryinterface (class in cyclops.query.interface)": [[127, "cyclops.query.interface.QueryInterface"]], "__init__() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.__init__"]], "clear_data() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.clear_data"]], "data (queryinterface property)": [[127, "cyclops.query.interface.QueryInterface.data"]], "join() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.join"]], "ops() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.ops"]], "run() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.run"]], "save() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.save"]], "union() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.union"]], "union_all() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.union_all"]], "cyclops.query.mimiciii": [[128, "module-cyclops.query.mimiciii"]], "mimiciiiquerier (class in cyclops.query.mimiciii)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier"]], "__init__() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.__init__"]], "chartevents() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.chartevents"]], "diagnoses() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.diagnoses"]], "get_table() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.get_table"]], "labevents() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.labevents"]], "list_columns() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_columns"]], "list_custom_tables() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_custom_tables"]], "list_schemas() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_schemas"]], "list_tables() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_tables"]], "cyclops.query.mimiciv": [[130, "module-cyclops.query.mimiciv"]], "mimicivquerier (class in cyclops.query.mimiciv)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier"]], "__init__() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.__init__"]], "chartevents() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.chartevents"]], "diagnoses() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.diagnoses"]], "get_table() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.get_table"]], "labevents() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.labevents"]], "list_columns() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_columns"]], "list_custom_tables() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_custom_tables"]], "list_schemas() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_schemas"]], "list_tables() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_tables"]], "patients() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.patients"]], "cyclops.query.omop": [[132, "module-cyclops.query.omop"]], "omopquerier (class in cyclops.query.omop)": [[133, "cyclops.query.omop.OMOPQuerier"]], "__init__() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.__init__"]], "get_table() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.get_table"]], "list_columns() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_columns"]], "list_custom_tables() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_custom_tables"]], "list_schemas() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_schemas"]], "list_tables() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_tables"]], "map_concept_ids_to_name() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.map_concept_ids_to_name"]], "measurement() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.measurement"]], "observation() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.observation"]], "person() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.person"]], "visit_detail() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.visit_detail"]], "visit_occurrence() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.visit_occurrence"]], "cyclops.query.ops": [[134, "module-cyclops.query.ops"]], "addcolumn (class in cyclops.query.ops)": [[135, "cyclops.query.ops.AddColumn"]], "__call__() (addcolumn method)": [[135, "cyclops.query.ops.AddColumn.__call__"]], "adddeltacolumn (class in cyclops.query.ops)": [[136, "cyclops.query.ops.AddDeltaColumn"]], "__call__() (adddeltacolumn method)": [[136, "cyclops.query.ops.AddDeltaColumn.__call__"]], "adddeltaconstant (class in cyclops.query.ops)": [[137, "cyclops.query.ops.AddDeltaConstant"]], "__call__() (adddeltaconstant method)": [[137, "cyclops.query.ops.AddDeltaConstant.__call__"]], "addnumeric (class in cyclops.query.ops)": [[138, "cyclops.query.ops.AddNumeric"]], "__call__() (addnumeric method)": [[138, "cyclops.query.ops.AddNumeric.__call__"]], "and (class in cyclops.query.ops)": [[139, "cyclops.query.ops.And"]], "__call__() (and method)": [[139, "cyclops.query.ops.And.__call__"]], "apply (class in cyclops.query.ops)": [[140, "cyclops.query.ops.Apply"]], "__call__() (apply method)": [[140, "cyclops.query.ops.Apply.__call__"]], "cast (class in cyclops.query.ops)": [[141, "cyclops.query.ops.Cast"]], "__call__() (cast method)": [[141, "cyclops.query.ops.Cast.__call__"]], "conditionafterdate (class in cyclops.query.ops)": [[142, "cyclops.query.ops.ConditionAfterDate"]], "__call__() (conditionafterdate method)": [[142, "cyclops.query.ops.ConditionAfterDate.__call__"]], "conditionbeforedate (class in cyclops.query.ops)": [[143, "cyclops.query.ops.ConditionBeforeDate"]], "__call__() (conditionbeforedate method)": [[143, "cyclops.query.ops.ConditionBeforeDate.__call__"]], "conditionendswith (class in cyclops.query.ops)": [[144, "cyclops.query.ops.ConditionEndsWith"]], "__call__() (conditionendswith method)": [[144, "cyclops.query.ops.ConditionEndsWith.__call__"]], "conditionequals (class in cyclops.query.ops)": [[145, "cyclops.query.ops.ConditionEquals"]], "__call__() (conditionequals method)": [[145, "cyclops.query.ops.ConditionEquals.__call__"]], "conditiongreaterthan (class in cyclops.query.ops)": [[146, "cyclops.query.ops.ConditionGreaterThan"]], "__call__() (conditiongreaterthan method)": [[146, "cyclops.query.ops.ConditionGreaterThan.__call__"]], "conditionin (class in cyclops.query.ops)": [[147, "cyclops.query.ops.ConditionIn"]], "__call__() (conditionin method)": [[147, "cyclops.query.ops.ConditionIn.__call__"]], "conditioninmonths (class in cyclops.query.ops)": [[148, "cyclops.query.ops.ConditionInMonths"]], "__call__() (conditioninmonths method)": [[148, "cyclops.query.ops.ConditionInMonths.__call__"]], "conditioninyears (class in cyclops.query.ops)": [[149, "cyclops.query.ops.ConditionInYears"]], "__call__() (conditioninyears method)": [[149, "cyclops.query.ops.ConditionInYears.__call__"]], "conditionlessthan (class in cyclops.query.ops)": [[150, "cyclops.query.ops.ConditionLessThan"]], "__call__() (conditionlessthan method)": [[150, "cyclops.query.ops.ConditionLessThan.__call__"]], "conditionlike (class in cyclops.query.ops)": [[151, "cyclops.query.ops.ConditionLike"]], "__call__() (conditionlike method)": [[151, "cyclops.query.ops.ConditionLike.__call__"]], "conditionregexmatch (class in cyclops.query.ops)": [[152, "cyclops.query.ops.ConditionRegexMatch"]], "__call__() (conditionregexmatch method)": [[152, "cyclops.query.ops.ConditionRegexMatch.__call__"]], "conditionstartswith (class in cyclops.query.ops)": [[153, "cyclops.query.ops.ConditionStartsWith"]], "__call__() (conditionstartswith method)": [[153, "cyclops.query.ops.ConditionStartsWith.__call__"]], "conditionsubstring (class in cyclops.query.ops)": [[154, "cyclops.query.ops.ConditionSubstring"]], "__call__() (conditionsubstring method)": [[154, "cyclops.query.ops.ConditionSubstring.__call__"]], "distinct (class in cyclops.query.ops)": [[155, "cyclops.query.ops.Distinct"]], "__call__() (distinct method)": [[155, "cyclops.query.ops.Distinct.__call__"]], "drop (class in cyclops.query.ops)": [[156, "cyclops.query.ops.Drop"]], "__call__() (drop method)": [[156, "cyclops.query.ops.Drop.__call__"]], "dropempty (class in cyclops.query.ops)": [[157, "cyclops.query.ops.DropEmpty"]], "__call__() (dropempty method)": [[157, "cyclops.query.ops.DropEmpty.__call__"]], "dropnulls (class in cyclops.query.ops)": [[158, "cyclops.query.ops.DropNulls"]], "__call__() (dropnulls method)": [[158, "cyclops.query.ops.DropNulls.__call__"]], "extracttimestampcomponent (class in cyclops.query.ops)": [[159, "cyclops.query.ops.ExtractTimestampComponent"]], "__call__() (extracttimestampcomponent method)": [[159, "cyclops.query.ops.ExtractTimestampComponent.__call__"]], "fillnull (class in cyclops.query.ops)": [[160, "cyclops.query.ops.FillNull"]], "__call__() (fillnull method)": [[160, "cyclops.query.ops.FillNull.__call__"]], "groupbyaggregate (class in cyclops.query.ops)": [[161, "cyclops.query.ops.GroupByAggregate"]], "__call__() (groupbyaggregate method)": [[161, "cyclops.query.ops.GroupByAggregate.__call__"]], "join (class in cyclops.query.ops)": [[162, "cyclops.query.ops.Join"]], "__call__() (join method)": [[162, "cyclops.query.ops.Join.__call__"]], "keep (class in cyclops.query.ops)": [[163, "cyclops.query.ops.Keep"]], "__call__() (keep method)": [[163, "cyclops.query.ops.Keep.__call__"]], "limit (class in cyclops.query.ops)": [[164, "cyclops.query.ops.Limit"]], "__call__() (limit method)": [[164, "cyclops.query.ops.Limit.__call__"]], "literal (class in cyclops.query.ops)": [[165, "cyclops.query.ops.Literal"]], "__call__() (literal method)": [[165, "cyclops.query.ops.Literal.__call__"]], "or (class in cyclops.query.ops)": [[166, "cyclops.query.ops.Or"]], "__call__() (or method)": [[166, "cyclops.query.ops.Or.__call__"]], "orderby (class in cyclops.query.ops)": [[167, "cyclops.query.ops.OrderBy"]], "__call__() (orderby method)": [[167, "cyclops.query.ops.OrderBy.__call__"]], "queryop (class in cyclops.query.ops)": [[168, "cyclops.query.ops.QueryOp"]], "__call__() (queryop method)": [[168, "cyclops.query.ops.QueryOp.__call__"]], "randomizeorder (class in cyclops.query.ops)": [[169, "cyclops.query.ops.RandomizeOrder"]], "__call__() (randomizeorder method)": [[169, "cyclops.query.ops.RandomizeOrder.__call__"]], "rename (class in cyclops.query.ops)": [[170, "cyclops.query.ops.Rename"]], "__call__() (rename method)": [[170, "cyclops.query.ops.Rename.__call__"]], "reorder (class in cyclops.query.ops)": [[171, "cyclops.query.ops.Reorder"]], "__call__() (reorder method)": [[171, "cyclops.query.ops.Reorder.__call__"]], "reorderafter (class in cyclops.query.ops)": [[172, "cyclops.query.ops.ReorderAfter"]], "__call__() (reorderafter method)": [[172, "cyclops.query.ops.ReorderAfter.__call__"]], "sequential (class in cyclops.query.ops)": [[173, "cyclops.query.ops.Sequential"]], "__add__() (sequential method)": [[173, "cyclops.query.ops.Sequential.__add__"]], "__call__() (sequential method)": [[173, "cyclops.query.ops.Sequential.__call__"]], "__init__() (sequential method)": [[173, "cyclops.query.ops.Sequential.__init__"]], "append() (sequential method)": [[173, "cyclops.query.ops.Sequential.append"]], "extend() (sequential method)": [[173, "cyclops.query.ops.Sequential.extend"]], "insert() (sequential method)": [[173, "cyclops.query.ops.Sequential.insert"]], "pop() (sequential method)": [[173, "cyclops.query.ops.Sequential.pop"]], "substring (class in cyclops.query.ops)": [[174, "cyclops.query.ops.Substring"]], "__call__() (substring method)": [[174, "cyclops.query.ops.Substring.__call__"]], "trim (class in cyclops.query.ops)": [[175, "cyclops.query.ops.Trim"]], "__call__() (trim method)": [[175, "cyclops.query.ops.Trim.__call__"]], "union (class in cyclops.query.ops)": [[176, "cyclops.query.ops.Union"]], "__call__() (union method)": [[176, "cyclops.query.ops.Union.__call__"]], "cyclops.report.report": [[177, "module-cyclops.report.report"]], "modelcardreport (class in cyclops.report.report)": [[178, "cyclops.report.report.ModelCardReport"]], "export() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.export"]], "from_json_file() (modelcardreport class method)": [[178, "cyclops.report.report.ModelCardReport.from_json_file"]], "log_citation() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_citation"]], "log_dataset() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_dataset"]], "log_descriptor() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_descriptor"]], "log_fairness_assessment() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_fairness_assessment"]], "log_from_dict() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_from_dict"]], "log_image() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_image"]], "log_license() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_license"]], "log_model_parameters() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_model_parameters"]], "log_owner() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_owner"]], "log_performance_metrics() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_performance_metrics"]], "log_plotly_figure() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_plotly_figure"]], "log_quantitative_analysis() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_quantitative_analysis"]], "log_reference() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_reference"]], "log_regulation() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_regulation"]], "log_risk() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_risk"]], "log_use_case() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_use_case"]], "log_user() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_user"]], "log_version() (modelcardreport method)": [[178, "cyclops.report.report.ModelCardReport.log_version"]], "cyclops.tasks.cxr_classification": [[179, "module-cyclops.tasks.cxr_classification"]], "cxrclassificationtask (class in cyclops.tasks.cxr_classification)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask"]], "__init__() (cxrclassificationtask method)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.__init__"]], "add_model() (cxrclassificationtask method)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.add_model"]], "data_type (cxrclassificationtask property)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.data_type"]], "evaluate() (cxrclassificationtask method)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.evaluate"]], "get_model() (cxrclassificationtask method)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.get_model"]], "list_models() (cxrclassificationtask method)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.list_models"]], "models_count (cxrclassificationtask property)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.models_count"]], "predict() (cxrclassificationtask method)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.predict"]], "task_type (cxrclassificationtask property)": [[180, "cyclops.tasks.cxr_classification.CXRClassificationTask.task_type"]], "cyclops.tasks.mortality_prediction": [[181, "module-cyclops.tasks.mortality_prediction"]], "mortalitypredictiontask (class in cyclops.tasks.mortality_prediction)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask"]], "__init__() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.__init__"]], "add_model() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.add_model"]], "data_type (mortalitypredictiontask property)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.data_type"]], "evaluate() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.evaluate"]], "get_model() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.get_model"]], "list_models() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.list_models"]], "list_models_params() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.list_models_params"]], "load_model() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.load_model"]], "models_count (mortalitypredictiontask property)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.models_count"]], "predict() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.predict"]], "save_model() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.save_model"]], "task_type (mortalitypredictiontask property)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.task_type"]], "train() (mortalitypredictiontask method)": [[182, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.train"]], "cyclops.data": [[183, "module-cyclops.data"]], "cyclops.data.features": [[183, "module-cyclops.data.features"]], "cyclops.evaluate": [[184, "module-cyclops.evaluate"]], "cyclops.evaluate.fairness": [[184, "module-cyclops.evaluate.fairness"]], "cyclops.evaluate.metrics": [[184, "module-cyclops.evaluate.metrics"]], "cyclops.evaluate.metrics.functional": [[184, "module-cyclops.evaluate.metrics.functional"]], "cyclops.monitor": [[185, "module-cyclops.monitor"]], "cyclops.query": [[186, "module-cyclops.query"]], "cyclops.report": [[187, "module-cyclops.report"]], "cyclops.tasks": [[188, "module-cyclops.tasks"]]}})