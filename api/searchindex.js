Search.setIndex({"docnames": ["api", "contributing", "index", "intro", "reference/api/_autosummary/cyclops.data.features.medical_image", "reference/api/_autosummary/cyclops.data.features.medical_image.MedicalImage", "reference/api/_autosummary/cyclops.data.slicer", "reference/api/_autosummary/cyclops.data.slicer.SliceSpec", "reference/api/_autosummary/cyclops.data.slicer.compound_filter", "reference/api/_autosummary/cyclops.data.slicer.filter_datetime", "reference/api/_autosummary/cyclops.data.slicer.filter_non_null", "reference/api/_autosummary/cyclops.data.slicer.filter_range", "reference/api/_autosummary/cyclops.data.slicer.filter_string_contains", "reference/api/_autosummary/cyclops.data.slicer.filter_value", "reference/api/_autosummary/cyclops.data.slicer.is_datetime", "reference/api/_autosummary/cyclops.data.slicer.overall", "reference/api/_autosummary/cyclops.evaluate.evaluator", "reference/api/_autosummary/cyclops.evaluate.evaluator.evaluate", "reference/api/_autosummary/cyclops.evaluate.fairness.config", "reference/api/_autosummary/cyclops.evaluate.fairness.config.FairnessConfig", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.evaluate_fairness", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.Accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.BinaryAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MulticlassAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MultilabelAccuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.AUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.BinaryAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MulticlassAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MultilabelAUROC", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.F1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.FbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelF1Score", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore", "reference/api/_autosummary/cyclops.evaluate.metrics.factory", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.create_metric", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.accuracy", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.auroc", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.precision", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.recall", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.binary_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.roc_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.stat_scores", "reference/api/_autosummary/cyclops.evaluate.metrics.metric", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.Metric", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.MetricCollection", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.OperatorMetric", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelPrecision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelRecall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Precision", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Recall", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.BinaryROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MulticlassROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MultilabelROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.ROCCurve", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.BinarySensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.Sensitivity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.BinarySpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MulticlassSpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MultilabelSpecificity", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.Specificity", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.BinaryStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MulticlassStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MultilabelStatScores", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.StatScores", "reference/api/_autosummary/cyclops.monitor.clinical_applicator", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.ClinicalShiftApplicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.binary_noise_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_association_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_swap_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.gaussian_noise_shift", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.knockout_shift", "reference/api/_autosummary/cyclops.query.base", "reference/api/_autosummary/cyclops.query.base.DatasetQuerier", "reference/api/_autosummary/cyclops.query.eicu", "reference/api/_autosummary/cyclops.query.eicu.EICUQuerier", "reference/api/_autosummary/cyclops.query.gemini", "reference/api/_autosummary/cyclops.query.gemini.GEMINIQuerier", "reference/api/_autosummary/cyclops.query.interface", "reference/api/_autosummary/cyclops.query.interface.QueryInterface", "reference/api/_autosummary/cyclops.query.mimiciii", "reference/api/_autosummary/cyclops.query.mimiciii.MIMICIIIQuerier", "reference/api/_autosummary/cyclops.query.mimiciv", "reference/api/_autosummary/cyclops.query.mimiciv.MIMICIVQuerier", "reference/api/_autosummary/cyclops.query.omop", "reference/api/_autosummary/cyclops.query.omop.OMOPQuerier", "reference/api/_autosummary/cyclops.query.ops", "reference/api/_autosummary/cyclops.query.ops.AddColumn", "reference/api/_autosummary/cyclops.query.ops.AddDeltaColumn", "reference/api/_autosummary/cyclops.query.ops.AddDeltaConstant", "reference/api/_autosummary/cyclops.query.ops.AddNumeric", "reference/api/_autosummary/cyclops.query.ops.And", "reference/api/_autosummary/cyclops.query.ops.Apply", "reference/api/_autosummary/cyclops.query.ops.Cast", "reference/api/_autosummary/cyclops.query.ops.ConditionAfterDate", "reference/api/_autosummary/cyclops.query.ops.ConditionBeforeDate", "reference/api/_autosummary/cyclops.query.ops.ConditionEndsWith", "reference/api/_autosummary/cyclops.query.ops.ConditionEquals", "reference/api/_autosummary/cyclops.query.ops.ConditionGreaterThan", "reference/api/_autosummary/cyclops.query.ops.ConditionIn", "reference/api/_autosummary/cyclops.query.ops.ConditionInMonths", "reference/api/_autosummary/cyclops.query.ops.ConditionInYears", "reference/api/_autosummary/cyclops.query.ops.ConditionLessThan", "reference/api/_autosummary/cyclops.query.ops.ConditionLike", "reference/api/_autosummary/cyclops.query.ops.ConditionRegexMatch", "reference/api/_autosummary/cyclops.query.ops.ConditionStartsWith", "reference/api/_autosummary/cyclops.query.ops.ConditionSubstring", "reference/api/_autosummary/cyclops.query.ops.Distinct", "reference/api/_autosummary/cyclops.query.ops.Drop", "reference/api/_autosummary/cyclops.query.ops.DropNulls", "reference/api/_autosummary/cyclops.query.ops.ExtractTimestampComponent", "reference/api/_autosummary/cyclops.query.ops.FillNull", "reference/api/_autosummary/cyclops.query.ops.GroupByAggregate", "reference/api/_autosummary/cyclops.query.ops.Join", "reference/api/_autosummary/cyclops.query.ops.Keep", "reference/api/_autosummary/cyclops.query.ops.Limit", "reference/api/_autosummary/cyclops.query.ops.Literal", "reference/api/_autosummary/cyclops.query.ops.Or", "reference/api/_autosummary/cyclops.query.ops.OrderBy", "reference/api/_autosummary/cyclops.query.ops.QueryOp", "reference/api/_autosummary/cyclops.query.ops.RandomizeOrder", "reference/api/_autosummary/cyclops.query.ops.Rename", "reference/api/_autosummary/cyclops.query.ops.Reorder", "reference/api/_autosummary/cyclops.query.ops.ReorderAfter", "reference/api/_autosummary/cyclops.query.ops.Sequential", "reference/api/_autosummary/cyclops.query.ops.Substring", "reference/api/_autosummary/cyclops.query.ops.Trim", "reference/api/_autosummary/cyclops.query.ops.Union", "reference/api/_autosummary/cyclops.report.report", "reference/api/_autosummary/cyclops.report.report.ModelCardReport", "reference/api/_autosummary/cyclops.tasks.cxr_classification", "reference/api/_autosummary/cyclops.tasks.cxr_classification.CXRClassificationTask", "reference/api/_autosummary/cyclops.tasks.mortality_prediction", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.MortalityPredictionTask", "reference/api/cyclops.data", "reference/api/cyclops.evaluate", "reference/api/cyclops.monitor", "reference/api/cyclops.query", "reference/api/cyclops.report", "reference/api/cyclops.tasks", "tutorials", "tutorials/eicu/query_api", "tutorials/gemini/query_api", "tutorials/kaggle/heart_failure_prediction", "tutorials/mimiciii/query_api", "tutorials/mimiciv/query_api", "tutorials/nihcxr/cxr_classification", "tutorials/nihcxr/monitor_api", "tutorials/omop/query_api", "tutorials/synthea/los_prediction", "tutorials_monitor", "tutorials_query", "tutorials_use_cases"], "filenames": ["api.rst", "contributing.rst", "index.rst", "intro.rst", "reference/api/_autosummary/cyclops.data.features.medical_image.rst", "reference/api/_autosummary/cyclops.data.features.medical_image.MedicalImage.rst", "reference/api/_autosummary/cyclops.data.slicer.rst", "reference/api/_autosummary/cyclops.data.slicer.SliceSpec.rst", "reference/api/_autosummary/cyclops.data.slicer.compound_filter.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_datetime.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_non_null.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_range.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_string_contains.rst", "reference/api/_autosummary/cyclops.data.slicer.filter_value.rst", "reference/api/_autosummary/cyclops.data.slicer.is_datetime.rst", "reference/api/_autosummary/cyclops.data.slicer.overall.rst", "reference/api/_autosummary/cyclops.evaluate.evaluator.rst", "reference/api/_autosummary/cyclops.evaluate.evaluator.evaluate.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.config.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.config.FairnessConfig.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.evaluate_fairness.rst", "reference/api/_autosummary/cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.Accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.BinaryAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.AUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.BinaryAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MulticlassAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.auroc.MultilabelAUROC.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.F1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.FbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelF1Score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.factory.create_metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.accuracy.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.auroc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.binary_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall.recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.precision_recall_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.binary_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.roc.roc_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.functional.stat_scores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.Metric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.MetricCollection.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.metric.OperatorMetric.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.BinaryRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MulticlassRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.MultilabelRecall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Precision.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall.Recall.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.BinaryROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MulticlassROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.MultilabelROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.roc.ROCCurve.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.BinarySensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.sensitivity.Sensitivity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.BinarySpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MulticlassSpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.MultilabelSpecificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.specificity.Specificity.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.BinaryStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.rst", "reference/api/_autosummary/cyclops.evaluate.metrics.stat_scores.StatScores.rst", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.rst", "reference/api/_autosummary/cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.binary_noise_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_association_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.feature_swap_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.gaussian_noise_shift.rst", "reference/api/_autosummary/cyclops.monitor.synthetic_applicator.knockout_shift.rst", "reference/api/_autosummary/cyclops.query.base.rst", "reference/api/_autosummary/cyclops.query.base.DatasetQuerier.rst", "reference/api/_autosummary/cyclops.query.eicu.rst", "reference/api/_autosummary/cyclops.query.eicu.EICUQuerier.rst", "reference/api/_autosummary/cyclops.query.gemini.rst", "reference/api/_autosummary/cyclops.query.gemini.GEMINIQuerier.rst", "reference/api/_autosummary/cyclops.query.interface.rst", "reference/api/_autosummary/cyclops.query.interface.QueryInterface.rst", "reference/api/_autosummary/cyclops.query.mimiciii.rst", "reference/api/_autosummary/cyclops.query.mimiciii.MIMICIIIQuerier.rst", "reference/api/_autosummary/cyclops.query.mimiciv.rst", "reference/api/_autosummary/cyclops.query.mimiciv.MIMICIVQuerier.rst", "reference/api/_autosummary/cyclops.query.omop.rst", "reference/api/_autosummary/cyclops.query.omop.OMOPQuerier.rst", "reference/api/_autosummary/cyclops.query.ops.rst", "reference/api/_autosummary/cyclops.query.ops.AddColumn.rst", "reference/api/_autosummary/cyclops.query.ops.AddDeltaColumn.rst", "reference/api/_autosummary/cyclops.query.ops.AddDeltaConstant.rst", "reference/api/_autosummary/cyclops.query.ops.AddNumeric.rst", "reference/api/_autosummary/cyclops.query.ops.And.rst", "reference/api/_autosummary/cyclops.query.ops.Apply.rst", "reference/api/_autosummary/cyclops.query.ops.Cast.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionAfterDate.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionBeforeDate.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionEndsWith.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionEquals.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionGreaterThan.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionIn.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionInMonths.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionInYears.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionLessThan.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionLike.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionRegexMatch.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionStartsWith.rst", "reference/api/_autosummary/cyclops.query.ops.ConditionSubstring.rst", "reference/api/_autosummary/cyclops.query.ops.Distinct.rst", "reference/api/_autosummary/cyclops.query.ops.Drop.rst", "reference/api/_autosummary/cyclops.query.ops.DropNulls.rst", "reference/api/_autosummary/cyclops.query.ops.ExtractTimestampComponent.rst", "reference/api/_autosummary/cyclops.query.ops.FillNull.rst", "reference/api/_autosummary/cyclops.query.ops.GroupByAggregate.rst", "reference/api/_autosummary/cyclops.query.ops.Join.rst", "reference/api/_autosummary/cyclops.query.ops.Keep.rst", "reference/api/_autosummary/cyclops.query.ops.Limit.rst", "reference/api/_autosummary/cyclops.query.ops.Literal.rst", "reference/api/_autosummary/cyclops.query.ops.Or.rst", "reference/api/_autosummary/cyclops.query.ops.OrderBy.rst", "reference/api/_autosummary/cyclops.query.ops.QueryOp.rst", "reference/api/_autosummary/cyclops.query.ops.RandomizeOrder.rst", "reference/api/_autosummary/cyclops.query.ops.Rename.rst", "reference/api/_autosummary/cyclops.query.ops.Reorder.rst", "reference/api/_autosummary/cyclops.query.ops.ReorderAfter.rst", "reference/api/_autosummary/cyclops.query.ops.Sequential.rst", "reference/api/_autosummary/cyclops.query.ops.Substring.rst", "reference/api/_autosummary/cyclops.query.ops.Trim.rst", "reference/api/_autosummary/cyclops.query.ops.Union.rst", "reference/api/_autosummary/cyclops.report.report.rst", "reference/api/_autosummary/cyclops.report.report.ModelCardReport.rst", "reference/api/_autosummary/cyclops.tasks.cxr_classification.rst", "reference/api/_autosummary/cyclops.tasks.cxr_classification.CXRClassificationTask.rst", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.rst", "reference/api/_autosummary/cyclops.tasks.mortality_prediction.MortalityPredictionTask.rst", "reference/api/cyclops.data.rst", "reference/api/cyclops.evaluate.rst", "reference/api/cyclops.monitor.rst", "reference/api/cyclops.query.rst", "reference/api/cyclops.report.rst", "reference/api/cyclops.tasks.rst", "tutorials.rst", "tutorials/eicu/query_api.ipynb", "tutorials/gemini/query_api.ipynb", "tutorials/kaggle/heart_failure_prediction.ipynb", "tutorials/mimiciii/query_api.ipynb", "tutorials/mimiciv/query_api.ipynb", "tutorials/nihcxr/cxr_classification.ipynb", "tutorials/nihcxr/monitor_api.ipynb", "tutorials/omop/query_api.ipynb", "tutorials/synthea/los_prediction.ipynb", "tutorials_monitor.rst", "tutorials_query.rst", "tutorials_use_cases.rst"], "titles": ["API Reference", "Contributing to cyclops", "Welcome to cyclops\u2019s documentation!", "\ud83d\udc23 Getting Started", "cyclops.data.features.medical_image", "cyclops.data.features.medical_image.MedicalImage", "cyclops.data.slicer", "cyclops.data.slicer.SliceSpec", "cyclops.data.slicer.compound_filter", "cyclops.data.slicer.filter_datetime", "cyclops.data.slicer.filter_non_null", "cyclops.data.slicer.filter_range", "cyclops.data.slicer.filter_string_contains", "cyclops.data.slicer.filter_value", "cyclops.data.slicer.is_datetime", "cyclops.data.slicer.overall", "cyclops.evaluate.evaluator", "cyclops.evaluate.evaluator.evaluate", "cyclops.evaluate.fairness.config", "cyclops.evaluate.fairness.config.FairnessConfig", "cyclops.evaluate.fairness.evaluator", "cyclops.evaluate.fairness.evaluator.evaluate_fairness", "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values", "cyclops.evaluate.metrics.accuracy", "cyclops.evaluate.metrics.accuracy.Accuracy", "cyclops.evaluate.metrics.accuracy.BinaryAccuracy", "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy", "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy", "cyclops.evaluate.metrics.auroc", "cyclops.evaluate.metrics.auroc.AUROC", "cyclops.evaluate.metrics.auroc.BinaryAUROC", "cyclops.evaluate.metrics.auroc.MulticlassAUROC", "cyclops.evaluate.metrics.auroc.MultilabelAUROC", "cyclops.evaluate.metrics.f_beta", "cyclops.evaluate.metrics.f_beta.BinaryF1Score", "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore", "cyclops.evaluate.metrics.f_beta.F1Score", "cyclops.evaluate.metrics.f_beta.FbetaScore", "cyclops.evaluate.metrics.f_beta.MulticlassF1Score", "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore", "cyclops.evaluate.metrics.f_beta.MultilabelF1Score", "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore", "cyclops.evaluate.metrics.factory", "cyclops.evaluate.metrics.factory.create_metric", "cyclops.evaluate.metrics.functional.accuracy", "cyclops.evaluate.metrics.functional.auroc", "cyclops.evaluate.metrics.functional.f_beta", "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score", "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.f1_score", "cyclops.evaluate.metrics.functional.f_beta.fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score", "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score", "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score", "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score", "cyclops.evaluate.metrics.functional.precision_recall", "cyclops.evaluate.metrics.functional.precision_recall.binary_precision", "cyclops.evaluate.metrics.functional.precision_recall.binary_recall", "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision", "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall", "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision", "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall", "cyclops.evaluate.metrics.functional.precision_recall.precision", "cyclops.evaluate.metrics.functional.precision_recall.recall", "cyclops.evaluate.metrics.functional.precision_recall_curve", "cyclops.evaluate.metrics.functional.roc", "cyclops.evaluate.metrics.functional.roc.binary_roc_curve", "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve", "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve", "cyclops.evaluate.metrics.functional.roc.roc_curve", "cyclops.evaluate.metrics.functional.sensitivity", "cyclops.evaluate.metrics.functional.specificity", "cyclops.evaluate.metrics.functional.stat_scores", "cyclops.evaluate.metrics.metric", "cyclops.evaluate.metrics.metric.Metric", "cyclops.evaluate.metrics.metric.MetricCollection", "cyclops.evaluate.metrics.metric.OperatorMetric", "cyclops.evaluate.metrics.precision_recall", "cyclops.evaluate.metrics.precision_recall.BinaryPrecision", "cyclops.evaluate.metrics.precision_recall.BinaryRecall", "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision", "cyclops.evaluate.metrics.precision_recall.MulticlassRecall", "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision", "cyclops.evaluate.metrics.precision_recall.MultilabelRecall", "cyclops.evaluate.metrics.precision_recall.Precision", "cyclops.evaluate.metrics.precision_recall.Recall", "cyclops.evaluate.metrics.precision_recall_curve", "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve", "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve", "cyclops.evaluate.metrics.roc", "cyclops.evaluate.metrics.roc.BinaryROCCurve", "cyclops.evaluate.metrics.roc.MulticlassROCCurve", "cyclops.evaluate.metrics.roc.MultilabelROCCurve", "cyclops.evaluate.metrics.roc.ROCCurve", "cyclops.evaluate.metrics.sensitivity", "cyclops.evaluate.metrics.sensitivity.BinarySensitivity", "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity", "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity", "cyclops.evaluate.metrics.sensitivity.Sensitivity", "cyclops.evaluate.metrics.specificity", "cyclops.evaluate.metrics.specificity.BinarySpecificity", "cyclops.evaluate.metrics.specificity.MulticlassSpecificity", "cyclops.evaluate.metrics.specificity.MultilabelSpecificity", "cyclops.evaluate.metrics.specificity.Specificity", "cyclops.evaluate.metrics.stat_scores", "cyclops.evaluate.metrics.stat_scores.BinaryStatScores", "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores", "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores", "cyclops.evaluate.metrics.stat_scores.StatScores", "cyclops.monitor.clinical_applicator", "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator", "cyclops.monitor.synthetic_applicator", "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator", "cyclops.monitor.synthetic_applicator.binary_noise_shift", "cyclops.monitor.synthetic_applicator.feature_association_shift", "cyclops.monitor.synthetic_applicator.feature_swap_shift", "cyclops.monitor.synthetic_applicator.gaussian_noise_shift", "cyclops.monitor.synthetic_applicator.knockout_shift", "cyclops.query.base", "cyclops.query.base.DatasetQuerier", "cyclops.query.eicu", "cyclops.query.eicu.EICUQuerier", "cyclops.query.gemini", "cyclops.query.gemini.GEMINIQuerier", "cyclops.query.interface", "cyclops.query.interface.QueryInterface", "cyclops.query.mimiciii", "cyclops.query.mimiciii.MIMICIIIQuerier", "cyclops.query.mimiciv", "cyclops.query.mimiciv.MIMICIVQuerier", "cyclops.query.omop", "cyclops.query.omop.OMOPQuerier", "cyclops.query.ops", "cyclops.query.ops.AddColumn", "cyclops.query.ops.AddDeltaColumn", "cyclops.query.ops.AddDeltaConstant", "cyclops.query.ops.AddNumeric", "cyclops.query.ops.And", "cyclops.query.ops.Apply", "cyclops.query.ops.Cast", "cyclops.query.ops.ConditionAfterDate", "cyclops.query.ops.ConditionBeforeDate", "cyclops.query.ops.ConditionEndsWith", "cyclops.query.ops.ConditionEquals", "cyclops.query.ops.ConditionGreaterThan", "cyclops.query.ops.ConditionIn", "cyclops.query.ops.ConditionInMonths", "cyclops.query.ops.ConditionInYears", "cyclops.query.ops.ConditionLessThan", "cyclops.query.ops.ConditionLike", "cyclops.query.ops.ConditionRegexMatch", "cyclops.query.ops.ConditionStartsWith", "cyclops.query.ops.ConditionSubstring", "cyclops.query.ops.Distinct", "cyclops.query.ops.Drop", "cyclops.query.ops.DropNulls", "cyclops.query.ops.ExtractTimestampComponent", "cyclops.query.ops.FillNull", "cyclops.query.ops.GroupByAggregate", "cyclops.query.ops.Join", "cyclops.query.ops.Keep", "cyclops.query.ops.Limit", "cyclops.query.ops.Literal", "cyclops.query.ops.Or", "cyclops.query.ops.OrderBy", "cyclops.query.ops.QueryOp", "cyclops.query.ops.RandomizeOrder", "cyclops.query.ops.Rename", "cyclops.query.ops.Reorder", "cyclops.query.ops.ReorderAfter", "cyclops.query.ops.Sequential", "cyclops.query.ops.Substring", "cyclops.query.ops.Trim", "cyclops.query.ops.Union", "cyclops.report.report", "cyclops.report.report.ModelCardReport", "cyclops.tasks.cxr_classification", "cyclops.tasks.cxr_classification.CXRClassificationTask", "cyclops.tasks.mortality_prediction", "cyclops.tasks.mortality_prediction.MortalityPredictionTask", "cyclops.data", "cyclops.evaluate", "cyclops.monitor", "cyclops.query", "cyclops.report", "cyclops.tasks", "Tutorials", "eICU-CRD query API tutorial", "GEMINI query API tutorial", "Heart Failure Prediction", "MIMIC-III query API tutorial", "MIMIC-IV query API tutorial", "Chest X-Ray Disease Classification", "NIHCXR Clinical Drift Experiments Tutorial", "OMOP query API tutorial", "Prolonged Length of Stay Prediction", "monitor API", "query API", "Example use cases"], "terms": {"cyclop": [0, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199], "queri": [0, 2, 3, 188, 200], "interfac": [0, 125, 129, 131, 133, 177], "queryinterfac": [0, 125, 129, 131, 133], "__init__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 123, 125, 127, 129, 131, 133, 172, 179, 181], "clear_data": [0, 127], "data": [0, 2, 3, 24, 26, 27, 49, 50, 52, 54, 69, 72, 89, 95, 112, 114, 115, 116, 117, 118, 119, 125, 127, 129, 131, 168, 177, 179, 181, 188, 193, 194, 195, 196, 198], "join": [0, 127, 131, 189, 190, 191, 192, 193, 194, 196, 197], "op": [0, 127, 131, 188, 189, 190, 192, 196, 197, 199], "run": [0, 1, 3, 121, 127, 188, 189, 190, 191, 192, 196, 197, 199], "save": [0, 127, 177, 181, 191, 197], "union": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 179, 181], "union_al": [0, 127, 175], "addcolumn": [0, 197], "__call__": [0, 5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "adddeltacolumn": [0, 193], "adddeltaconst": 0, "addnumer": 0, "And": [0, 193], "appli": [0, 1, 8, 25, 29, 59, 62, 63, 66, 67, 68, 75, 76, 93, 104, 109, 110, 112, 131, 135, 136, 137, 138, 174, 179, 181, 191, 197], "cast": [0, 5, 121, 123, 125, 127, 129, 131, 133, 191, 193, 197], "conditionafterd": [0, 190, 193, 196], "conditionbefored": [0, 190], "conditionendswith": 0, "conditionequ": [0, 189, 190, 192, 193, 197], "conditiongreaterthan": [0, 197], "conditionin": [0, 139, 165, 197], "conditioninmonth": 0, "conditioninyear": [0, 193], "conditionlessthan": [0, 192, 197], "conditionlik": [0, 139, 165, 193], "conditionregexmatch": [0, 188, 199], "conditionstartswith": 0, "conditionsubstr": [0, 189, 190, 192, 193, 196], "distinct": [0, 190], "drop": [0, 172, 188, 191, 200], "dropnul": 0, "extracttimestampcompon": [0, 197], "fillnul": 0, "groupbyaggreg": [0, 190, 197], "keep": [0, 7, 17, 21, 161, 188, 197, 199], "limit": [0, 21, 127, 168, 188, 191, 192, 193, 194, 196, 197, 199], "liter": [0, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 69, 78, 79, 80, 81, 82, 83, 84, 85, 90, 95, 97, 98, 99, 100, 103, 104, 105, 110, 127, 177], "Or": 0, "orderbi": [0, 190], "queryop": [0, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175], "randomizeord": 0, "renam": [0, 191, 194, 197], "reorder": [0, 171], "reorderaft": 0, "sequenti": [0, 127, 189, 190, 192, 193, 196, 197], "__add__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 172], "append": [0, 172, 194, 197], "extend": [0, 172, 197], "insert": [0, 172], "pop": [0, 75, 172, 191, 197], "substr": [0, 12, 154, 188, 199], "trim": 0, "base": [0, 3, 5, 7, 17, 19, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 188, 191, 199, 200], "datasetqueri": [0, 123, 125, 129, 131, 133, 197], "db": [0, 121, 190, 193], "get_tabl": [0, 121, 123, 125, 129, 131, 133], "list_column": [0, 121, 123, 125, 129, 131, 133, 197], "list_custom_t": [0, 121, 123, 125, 129, 131, 133, 192], "list_schema": [0, 121, 123, 125, 129, 131, 133, 193, 196], "list_tabl": [0, 121, 123, 125, 129, 131, 133, 189, 190, 196], "dataset": [0, 3, 6, 7, 16, 17, 19, 21, 26, 38, 39, 51, 52, 58, 61, 68, 69, 80, 81, 83, 88, 89, 90, 94, 95, 98, 99, 103, 104, 112, 114, 121, 123, 125, 127, 129, 131, 133, 177, 179, 181, 182, 188, 198, 199, 200], "mimiciii": [0, 192, 196], "mimiciiiqueri": [0, 188, 196, 199], "chartev": [0, 129, 131, 192, 193], "diagnos": [0, 125, 129, 131, 188, 199], "labev": [0, 129, 131, 192], "mimiciv": [0, 193], "mimicivqueri": [0, 188, 199], "patient": [0, 125, 131, 188, 191, 194, 195, 197, 199, 200], "eicu": [0, 3, 188, 199], "eicuqueri": [0, 188, 199], "omop": [0, 188, 199], "omopqueri": [0, 188, 199], "map_concept_ids_to_nam": [0, 133, 196], "measur": [0, 133, 188, 199], "observ": [0, 62, 133, 191, 194, 196, 197, 200], "person": [0, 133, 196], "visit_detail": [0, 133, 196], "visit_occurr": [0, 133, 196], "gemini": [0, 121, 123, 129, 131, 133, 188, 199], "geminiqueri": [0, 188, 199], "care_unit": [0, 125], "imag": [0, 4, 5, 17, 21, 118, 125, 177, 179, 182, 188, 190, 194, 195], "ip_admin": [0, 125], "room_transf": [0, 125, 190], "slicer": [0, 191, 194, 195, 197], "compound_filt": 0, "filter_datetim": 0, "filter_non_nul": 0, "filter_rang": 0, "filter_string_contain": 0, "filter_valu": [0, 194], "is_datetim": 0, "overal": [0, 7, 21, 177, 191, 194, 197], "slicespec": [0, 17, 112, 179, 191, 194, 195, 197], "spec_list": [0, 7, 191, 194, 195, 197], "include_overal": [0, 7], "valid": [0, 7, 9, 17, 177, 179, 181, 191], "column_nam": [0, 7, 9, 10, 11, 12, 13, 194], "_registri": [0, 7], "add_slice_spec": [0, 7], "get_slic": [0, 7], "slice": [0, 3, 7, 8, 17, 21, 172, 177, 179, 181, 191, 194, 197], "featur": [0, 7, 9, 10, 11, 12, 13, 15, 17, 112, 116, 117, 177, 179, 181, 188, 194, 200], "medical_imag": 0, "medicalimag": 0, "cast_storag": [0, 5], "decode_exampl": [0, 5], "embed_storag": [0, 5], "encode_exampl": [0, 5], "flatten": [0, 5, 191, 197], "task": [0, 2, 3, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 53, 54, 58, 60, 61, 62, 63, 66, 67, 68, 69, 78, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 98, 99, 100, 102, 103, 104, 105, 110, 188, 194, 200], "cxr_classif": 0, "cxrclassificationtask": 0, "add_model": [0, 179, 181], "data_typ": [0, 179, 181], "evalu": [0, 2, 3, 177, 179, 181, 188, 194, 199, 200], "get_model": [0, 179, 181], "list_model": [0, 179, 181, 191, 197], "models_count": [0, 179, 181], "predict": [0, 3, 17, 19, 21, 24, 26, 27, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 67, 80, 81, 82, 84, 85, 87, 88, 89, 92, 93, 94, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 179, 180, 181, 188], "task_typ": [0, 179, 181, 191, 194, 197], "mortality_predict": [0, 191, 197], "mortalitypredictiontask": [0, 191, 197], "list_models_param": [0, 181, 191, 197], "load_model": [0, 181], "save_model": [0, 181], "train": [0, 3, 17, 177, 179, 181, 188, 194, 198, 200], "metric": [0, 17, 19, 21, 177, 179, 181, 188, 191, 197, 200], "__mul__": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "add_stat": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "clone": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "comput": [0, 17, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 127, 179, 181, 188, 200], "reset_st": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "update_st": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "metriccollect": [0, 17, 21, 179, 181, 191, 197], "add_metr": [0, 75], "clear": [0, 75, 127], "get": [0, 2, 75, 121, 123, 125, 127, 129, 131, 133, 155, 173, 179, 181, 188, 191, 197, 199, 200], "item": [0, 75, 191, 194, 195, 197], "kei": [0, 7, 17, 21, 75, 160, 169, 172, 177, 191, 194, 195, 197], "popitem": [0, 75], "setdefault": [0, 75], "updat": [0, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 189, 191, 192, 193, 194, 195, 196, 197], "valu": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 138, 145, 146, 147, 150, 157, 159, 160, 161, 164, 177, 188, 194, 195, 197, 200], "operatormetr": 0, "factori": [0, 7, 194], "create_metr": [0, 191, 194, 197], "accuraci": [0, 191, 197], "binaryaccuraci": [0, 191, 197], "multiclassaccuraci": 0, "multilabelaccuraci": 0, "auroc": [0, 188, 191, 197, 200], "binaryauroc": [0, 29, 191, 197], "multiclassauroc": [0, 29], "multilabelauroc": [0, 29, 194], "precision_recal": 0, "binaryprecis": [0, 191, 197], "binaryrecal": [0, 97, 191, 197], "multiclassprecis": 0, "multiclassrecal": [0, 98], "multilabelprecis": 0, "multilabelrecal": [0, 99], "precis": [0, 24, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 64, 66, 77, 78, 80, 82, 85, 86, 87, 88, 89, 90, 92, 100, 105, 191, 197], "recal": [0, 24, 38, 51, 55, 57, 59, 61, 64, 66, 77, 79, 81, 83, 86, 87, 88, 89, 90, 92, 97, 98, 99, 105, 191, 197], "precision_recall_curv": [0, 191, 197], "binaryprecisionrecallcurv": [0, 30, 92, 191, 197], "multiclassprecisionrecallcurv": [0, 31, 93], "multilabelprecisionrecallcurv": [0, 32, 94], "precisionrecallcurv": 0, "roc": [0, 28, 29, 30, 31, 32, 45, 191, 197], "binaryroccurv": [0, 191, 197], "multiclassroccurv": 0, "multilabelroccurv": 0, "roccurv": 0, "sensit": [0, 177, 188, 191, 194, 197, 198], "binarysensit": 0, "multiclasssensit": 0, "multilabelsensit": 0, "specif": [0, 7, 17, 115, 118, 179, 181, 191, 194, 197], "binaryspecif": 0, "multiclassspecif": 0, "multilabelspecif": 0, "f_beta": 0, "binaryf1scor": [0, 191, 197], "binaryfbetascor": [0, 34], "f1score": 0, "fbetascor": [0, 36], "multiclassf1scor": 0, "multiclassfbetascor": [0, 38], "multilabelf1scor": 0, "multilabelfbetascor": [0, 40], "stat_scor": 0, "binarystatscor": [0, 25, 35, 78, 79, 102], "multiclassstatscor": [0, 26, 39, 80, 81, 103], "multilabelstatscor": [0, 27, 41, 82, 83, 104], "statscor": 0, "function": [0, 3, 5, 6, 7, 8, 16, 17, 20, 21, 25, 35, 41, 42, 76, 93, 102, 104, 107, 109, 110, 113, 131, 135, 136, 137, 138, 140, 160, 167, 174, 177, 189, 190, 191, 192, 193, 194, 196, 197, 199], "binary_precis": 0, "binary_recal": 0, "multiclass_precis": 0, "multiclass_recal": 0, "multilabel_precis": 0, "multilabel_recal": 0, "binary_roc_curv": 0, "multiclass_roc_curv": 0, "multilabel_roc_curv": 0, "roc_curv": [0, 191, 197], "binary_f1_scor": 0, "binary_fbeta_scor": 0, "f1_score": [0, 191, 197], "fbeta_scor": 0, "multiclass_f1_scor": 0, "multiclass_fbeta_scor": 0, "multilabel_f1_scor": 0, "multilabel_fbeta_scor": 0, "fair": [0, 17, 177, 179, 181, 191, 194, 197], "evaluate_fair": [0, 194], "warn_too_many_unique_valu": 0, "config": [0, 181, 189, 192, 193, 196], "fairnessconfig": [0, 17, 179, 181, 191, 197], "monitor": [0, 2, 3, 188, 191, 194, 195, 197], "clinical_appl": 0, "clinicalshiftappl": [0, 195], "ag": [0, 112, 188, 195, 200], "apply_shift": [0, 112, 114, 195], "custom": [0, 112, 121, 123, 125, 129, 131, 133, 177, 192, 195], "hospital_typ": [0, 112], "month": [0, 7, 9, 112, 148, 158, 191, 194, 197], "sex": [0, 112, 188, 195, 197, 200], "time": [0, 7, 75, 112, 158, 177, 188, 198, 200], "synthetic_appl": 0, "binary_noise_shift": 0, "feature_association_shift": 0, "feature_swap_shift": 0, "gaussian_noise_shift": 0, "knockout_shift": 0, "syntheticshiftappl": [0, 113], "report": [0, 2, 3, 110, 125, 188, 194, 199, 200], "modelcardreport": [0, 191, 194, 197], "export": [0, 177, 191, 194, 197], "from_json_fil": [0, 177], "log_cit": [0, 177, 194], "log_dataset": [0, 177, 191], "log_descriptor": [0, 177, 191, 194, 197], "log_fairness_assess": [0, 177, 191, 194, 197], "log_from_dict": [0, 177, 191, 194, 197], "log_imag": [0, 177], "log_licens": [0, 177, 191, 197], "log_model_paramet": [0, 177, 191, 197], "log_own": [0, 177, 191, 194, 197], "log_performance_metr": [0, 177, 191, 197], "log_plotly_figur": [0, 177, 191, 194, 197], "log_quantitative_analysi": [0, 177, 191, 194, 197], "log_refer": [0, 177, 191, 197], "log_regul": [0, 177], "log_risk": [0, 177, 191, 194, 197], "log_use_cas": [0, 177, 191, 194, 197], "log_us": [0, 177, 191, 194, 197], "log_vers": [0, 177, 191, 197], "thank": 1, "your": [1, 191], "interest": [1, 191, 197], "To": [1, 3, 5, 191, 197], "submit": 1, "pr": 1, "pleas": [1, 189, 191, 192, 193, 194, 195, 196, 197], "fill": [1, 159], "out": [1, 177, 191, 197], "templat": [1, 177], "along": [1, 112, 191, 194, 197], "If": [1, 5, 7, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 166, 174, 177, 179, 181, 191, 197], "fix": 1, "an": [1, 3, 5, 7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 51, 60, 61, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 125, 127, 129, 131, 133, 136, 139, 161, 165, 169, 177, 191, 194, 197], "issu": [1, 21], "don": 1, "t": [1, 5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 177], "forget": 1, "link": [1, 177, 191, 194, 197], "onc": [1, 75, 191, 194, 197], "python": [1, 3, 197, 199], "virtual": [1, 3], "environ": [1, 3, 191, 197], "i": [1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 131, 133, 135, 136, 137, 138, 140, 154, 157, 161, 168, 177, 179, 181, 189, 191, 192, 193, 194, 196, 197, 199, 200], "setup": [1, 189, 190, 192, 193, 196, 197], "you": [1, 3, 5, 75, 191, 194, 197, 198, 199], "can": [1, 3, 5, 7, 21, 25, 38, 51, 69, 75, 84, 85, 95, 100, 110, 121, 123, 125, 129, 131, 133, 140, 154, 177, 181, 191, 194, 197, 198], "us": [1, 2, 5, 7, 8, 17, 21, 24, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 62, 63, 66, 67, 68, 69, 75, 76, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 102, 105, 107, 110, 112, 114, 121, 123, 125, 127, 129, 131, 133, 136, 139, 155, 160, 161, 165, 168, 175, 177, 179, 181, 188, 189, 191, 192, 194, 196, 197, 198, 199], "all": [1, 7, 8, 9, 10, 11, 12, 13, 15, 63, 73, 75, 108, 109, 110, 127, 154, 166, 169, 175, 181, 188, 190, 191, 195, 197, 199], "file": [1, 5, 127, 177, 191, 194, 197], "For": [1, 21, 76, 133, 177, 191, 197], "style": [1, 161], "we": [1, 3, 177, 191, 194, 196, 197], "recommend": [1, 76], "googl": 1, "guid": 1, "black": 1, "format": [1, 5, 7, 89, 127, 142, 143, 161, 177, 191, 196, 197], "docstr": 1, "numpi": [1, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 179, 191, 194, 195, 197], "also": [1, 3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 140, 191, 197, 200], "flake8": 1, "pylint": [1, 140], "further": 1, "static": 1, "analysi": [1, 177, 191, 194, 197], "The": [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 60, 61, 63, 66, 68, 69, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 127, 131, 136, 140, 162, 177, 179, 181, 185, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200], "show": [1, 189, 191, 192, 193, 194, 196, 197], "error": [1, 188, 200], "which": [1, 9, 10, 11, 12, 13, 21, 90, 121, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 191, 194, 196, 197, 200], "need": [1, 17, 21, 173, 191, 197], "befor": [1, 17, 21, 22, 143, 161, 181, 191, 197], "last": 1, "least": 1, "type": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 188, 193, 200], "hint": 1, "our": [1, 191, 197], "check": [1, 14, 89, 127, 169], "mypi": 1, "current": [1, 141, 177, 191, 194, 197], "ar": [1, 5, 7, 11, 12, 17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 97, 98, 99, 100, 103, 104, 105, 108, 109, 110, 112, 116, 121, 131, 140, 161, 177, 191, 194, 197], "strict": 1, "enforc": 1, "more": [1, 7, 16, 17, 179, 181, 191, 200], "api": [1, 2, 3, 121, 122, 123, 124, 125, 128, 129, 130, 131, 132, 133, 188, 191, 200], "becom": [1, 127, 168], "stabl": [1, 189, 191, 192, 193, 194, 195, 196, 197], "start": [2, 17, 153, 173, 191, 197], "instal": [2, 191], "pip": [2, 191], "develop": [2, 191, 194, 197], "poetri": 2, "conda": 2, "contribut": 2, "notebook": [2, 189, 191, 192, 193, 194, 196, 197], "citat": [2, 177, 191, 194, 197], "pre": [2, 191, 197], "commit": 2, "hook": 2, "code": [2, 189, 191, 192, 193, 196, 197], "guidelin": [2, 3], "tutori": [2, 191, 194, 197, 198, 199, 200], "exampl": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 188, 191, 194, 197, 198, 199], "case": [2, 3, 75, 115, 177, 188, 191, 197, 198], "refer": [2, 3, 177, 191, 194, 197], "toolkit": 3, "facilit": 3, "research": 3, "deploy": 3, "ml": [3, 191, 197], "model": [3, 16, 17, 21, 177, 179, 181, 188, 196, 198, 200], "healthcar": 3, "It": [3, 38, 51, 75, 84, 85, 100, 105, 140, 198, 199], "provid": [3, 7, 9, 12, 17, 21, 69, 110, 121, 123, 125, 129, 131, 133, 140, 154, 159, 160, 166, 177, 185, 191, 196, 197], "few": 3, "high": [3, 191, 197], "level": [3, 21, 191, 197], "name": [3, 7, 8, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 121, 123, 125, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 165, 169, 170, 171, 173, 177, 179, 181, 191, 194, 195, 196, 197], "ehr": [3, 121, 185, 196, 199], "databas": [3, 121, 123, 125, 126, 127, 129, 131, 133, 185, 189, 190, 191, 192, 193, 196, 197, 199], "mimic": [3, 128, 129, 130, 131, 188, 196, 199], "iv": [3, 130, 188, 199], "creat": [3, 6, 7, 21, 42, 43, 75, 84, 85, 100, 115, 118, 119, 121, 127, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 174, 177, 179, 181, 188, 194, 199, 200], "infer": [3, 17, 131], "popular": [3, 191], "effici": 3, "load": [3, 17, 177, 181, 188, 196, 197, 198, 200], "differ": [3, 24, 29, 36, 37, 46, 55, 62, 63, 64, 69, 70, 72, 84, 85, 90, 95, 100, 105, 154, 161, 188, 191, 194, 197, 198], "modal": 3, "common": [3, 191, 196], "implement": [3, 167, 200], "scikit": [3, 191], "learn": [3, 191, 194], "pytorch": 3, "canon": 3, "mortal": [3, 180, 181, 188, 199], "chest": [3, 178, 179, 188], "x": [3, 114, 115, 116, 117, 118, 119, 140, 178, 179, 181, 188, 191, 195, 197], "rai": [3, 178, 179, 188], "classif": [3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 48, 49, 50, 51, 53, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 78, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 178, 179, 181, 188, 191, 197], "clinic": [3, 111, 112, 188, 198], "detect": [3, 194, 198], "shift": [3, 111, 112, 114, 116, 117, 188, 198], "relev": [3, 177, 191, 197, 198], "card": [3, 177, 188, 191, 197, 200], "librari": [3, 188, 198, 200], "end": [3, 144, 172, 188, 191, 194, 197, 199], "iii": [3, 128, 129, 188, 196, 199], "crd": [3, 122, 188, 199], "python3": [3, 189, 191, 192, 193, 194, 195, 196, 197], "m": [3, 191, 192, 194, 195, 197], "pycyclop": [3, 189, 191, 192, 193, 194, 195, 196, 197], "packag": [3, 182, 183, 184, 186, 189, 191, 192, 193, 194, 195, 196, 197], "support": [3, 7, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 72, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 107, 108, 109, 122, 128, 130, 141, 198], "process": [3, 112, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 191, 194, 197], "transform": [3, 17, 66, 67, 68, 93, 179, 181, 191, 194, 195, 197], "downstream": [3, 121, 123, 125, 129, 131, 133, 191, 197], "addit": [3, 75, 127, 131, 177, 179, 181, 191, 197], "from": [3, 5, 7, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 119, 125, 127, 131, 133, 158, 161, 169, 174, 177, 179, 181, 188, 189, 191, 192, 194, 195, 196, 197, 199], "other": [3, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 135, 171, 172, 191], "thei": [3, 69], "extra": [3, 177], "multipl": [3, 8, 17, 21, 75, 125, 139, 140, 160, 165, 177], "could": [3, 191, 197], "combin": [3, 8, 135, 139, 165, 191], "both": [3, 161], "set": [3, 7, 17, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 177, 188, 191, 194, 197, 199], "up": [3, 191, 194, 197], "henc": 3, "make": [3, 154, 191, 197], "sure": [3, 191], "sourc": [3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 188, 198], "env": 3, "info": [3, 125, 189, 190, 191, 192, 193, 196, 197], "path": [3, 5, 112, 127, 177, 181, 191, 194, 197], "bin": [3, 21], "activ": [3, 197], "build": [3, 112, 121, 199], "built": 3, "sphinx": 3, "local": 3, "cd": 3, "doc": 3, "html": [3, 177, 189, 191, 192, 193, 194, 195, 196, 197], "sphinxopt": 3, "d": [3, 75, 112, 194], "nbsphinx_allow_error": 3, "true": [3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 24, 26, 27, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 121, 123, 125, 129, 131, 133, 135, 136, 151, 154, 166, 169, 175, 177, 179, 181, 189, 190, 191, 194, 195, 196, 197], "welcom": 3, "see": [3, 7, 177, 189, 191, 192, 193, 194, 195, 196, 197], "jupyt": [3, 189, 191, 192, 193, 194, 195, 196, 197], "insid": 3, "ipython": 3, "kernel": 3, "after": [3, 17, 121, 131, 140, 142, 171, 172, 188, 191, 197, 199], "ipykernel": 3, "user": [3, 177, 189, 190, 191, 192, 193, 196, 197], "name_of_kernel": 3, "now": 3, "navig": 3, "": [3, 7, 10, 14, 17, 21, 75, 127, 133, 140, 159, 177, 179, 181, 189, 190, 191, 192, 193, 194, 195, 196, 197], "tab": [3, 191], "cite": 3, "when": [3, 5, 17, 21, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 75, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105, 121, 154, 161, 168, 179, 181, 191, 197], "project": 3, "paper": 3, "articl": 3, "krishnan2022": 3, "12": [3, 7, 191, 194, 196, 197], "02": [3, 69], "22283021": 3, "author": [3, 191, 194], "krishnan": 3, "amrit": 3, "subasri": 3, "vallijah": 3, "mckeen": 3, "kaden": 3, "kore": 3, "ali": 3, "ogidi": 3, "franklin": 3, "alinoori": 3, "mahshid": 3, "lalani": 3, "nadim": 3, "dhalla": 3, "azra": 3, "verma": 3, "amol": 3, "razak": 3, "fahad": 3, "pandya": 3, "deval": 3, "dolatabadi": 3, "elham": 3, "titl": [3, 188, 191, 194, 197, 199], "cyclic": 3, "toward": 3, "operation": 3, "health": [3, 191, 197], "eloc": 3, "id": [3, 5, 112, 133, 191, 194, 197], "2022": [3, 7, 194, 196], "year": [3, 7, 9, 131, 148, 149, 158, 188, 191, 194, 196, 197, 199], "doi": 3, "10": [3, 163, 188, 191, 194, 195, 197, 199], "1101": 3, "publish": [3, 191], "cold": 3, "spring": 3, "harbor": 3, "laboratori": [3, 197], "press": 3, "url": [3, 194], "http": [3, 177, 189, 191, 192, 193, 194, 195, 196, 197], "www": [3, 191], "medrxiv": 3, "org": [3, 177, 191, 194, 197], "content": [3, 177], "earli": 3, "08": 3, "journal": 3, "medic": [4, 5, 182, 188, 194, 197, 199, 200], "class": [4, 5, 6, 7, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 185, 191, 193, 194, 197], "decod": [5, 194], "none": [5, 7, 9, 17, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 166, 173, 174, 177, 179, 181, 191, 194, 195, 197], "reader": 5, "itkread": 5, "suffix": 5, "jpg": 5, "read": [5, 17], "paramet": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 189, 191, 192, 193, 194, 196, 197], "bool": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 75, 76, 108, 109, 110, 112, 116, 117, 121, 123, 125, 127, 129, 131, 133, 135, 136, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 165, 166, 169, 175, 177, 179, 181, 194], "option": [5, 7, 9, 10, 11, 12, 13, 17, 21, 24, 27, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 69, 75, 80, 81, 82, 83, 84, 85, 90, 95, 98, 99, 100, 103, 104, 105, 108, 112, 114, 121, 123, 125, 127, 129, 131, 133, 135, 136, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 160, 161, 175, 177, 179, 181], "default": [5, 7, 9, 10, 11, 12, 13, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 153, 177, 179, 181, 191, 197], "whether": [5, 7, 21, 75, 108, 109, 110, 112, 121, 123, 125, 127, 129, 131, 133, 154, 166, 169, 175, 177, 197, 200], "fals": [5, 7, 9, 10, 11, 12, 13, 14, 19, 21, 29, 30, 40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105, 107, 108, 109, 110, 117, 118, 127, 135, 136, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 165, 166, 175, 179, 181, 190, 191, 194, 197], "return": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 188, 189, 190, 192, 196, 197, 199], "dictionari": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 75, 160, 177, 179, 181, 191, 197], "image_path": 5, "byte": 5, "image_byt": 5, "str": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 169, 170, 171, 172, 173, 174, 177, 179, 181, 191, 193, 197], "imageread": 5, "monai": [5, 194, 195], "method": [5, 7, 19, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 181, 191, 192, 194, 197], "attribut": [5, 7, 19, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 127, 179, 181, 191, 197], "call": [5, 167, 177], "self": [5, 121], "storag": 5, "arrow": 5, "arrai": [5, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 63, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 119, 179, 194], "convert": [5, 25, 35, 41, 48, 61, 69, 95, 102, 104, 107, 141, 161, 191, 197], "pyarrow": 5, "rtype": 5, "structarrai": 5, "pa": 5, "string": [5, 7, 9, 12, 17, 21, 75, 144, 153, 160, 161, 164, 173, 174, 177, 188, 194, 199], "must": [5, 9, 17, 21, 141, 147, 148, 149, 154, 160, 177], "contain": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 27, 103, 104, 127, 177, 188, 191, 194, 197, 199, 200], "binari": [5, 24, 25, 29, 30, 34, 35, 36, 37, 47, 48, 49, 50, 56, 57, 60, 61, 62, 63, 66, 69, 72, 78, 79, 84, 85, 87, 90, 92, 95, 97, 100, 102, 104, 105, 107, 110, 115, 181, 191, 194, 197, 200], "struct": 5, "order": [5, 17, 107, 108, 109, 127, 166, 168, 170, 171], "doesn": 5, "matter": 5, "list": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 141, 147, 148, 149, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 170, 171, 172, 174, 177, 179, 181, 189, 190, 191, 192, 193, 196, 197], "arg": [5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 167, 168, 172], "stringarrai": 5, "listarrai": 5, "token_per_repo_id": 5, "serial": 5, "version": [5, 177, 191, 194, 197], "dict": [5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 75, 121, 123, 125, 129, 131, 133, 160, 169, 177, 179, 181], "access": 5, "privat": 5, "repositori": [5, 191], "hub": 5, "pass": [5, 17, 43, 75, 112, 177, 181, 189, 191, 192, 193, 196, 197], "repo_id": 5, "token": [5, 191], "deseri": 5, "np": [5, 11, 14, 21, 179, 181, 191, 194, 195, 197], "ndarrai": [5, 14, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 116, 117, 118, 119, 179, 181], "metadata": [5, 191, 194, 197], "emb": 5, "encod": 5, "input": [5, 24, 46, 55, 60, 61, 64, 69, 70, 72, 87, 89, 95, 115, 118, 140, 179, 181], "state": [5, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "itself": 5, "otherwis": [5, 14, 24, 27, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110, 135, 136, 137, 138, 174], "tupl": [5, 7, 66, 67, 68, 69, 75, 87, 88, 89, 92, 93, 94, 112, 127, 161, 179, 181], "classlabel": [5, 191, 197], "translat": 5, "translationvariablelanguag": 5, "sequenc": [5, 17, 75, 160, 172, 179, 181, 194], "array2d": 5, "array3d": 5, "array4d": 5, "array5d": 5, "audio": 5, "subset": [6, 188, 199], "hug": [6, 179, 181, 188, 200], "face": [6, 179, 181, 188, 200], "object": [7, 19, 21, 112, 114, 121, 125, 126, 127, 129, 131, 133, 136, 137, 140, 142, 143, 160, 167, 172, 177, 179, 181, 191, 197, 199], "ani": [7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 66, 67, 68, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 121, 123, 125, 127, 129, 131, 133, 136, 144, 145, 146, 147, 150, 153, 154, 159, 164, 177, 179, 181, 191, 194, 197], "A": [7, 8, 9, 10, 11, 12, 13, 15, 17, 21, 22, 25, 75, 76, 104, 109, 126, 137, 142, 143, 161, 177, 191, 194, 197], "each": [7, 8, 17, 21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 69, 75, 76, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110, 133, 140, 166, 188, 189, 191, 192, 193, 196, 197, 199], "map": [7, 8, 22, 43, 75, 121, 123, 125, 129, 131, 133, 169, 179, 181, 191, 194, 197], "column": [7, 8, 9, 10, 11, 12, 13, 17, 21, 112, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 169, 170, 171, 173, 174, 179, 181, 191, 194, 197], "one": [7, 16, 17, 21, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 67, 68, 69, 76, 80, 81, 82, 83, 84, 85, 95, 98, 99, 100, 105, 154, 179, 181, 188, 199], "follow": [7, 17, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 60, 61, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105, 171, 177, 191, 194, 196, 197], "exact": [7, 13], "select": [7, 112, 116, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 191, 193, 194, 197], "thi": [7, 17, 21, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105, 121, 138, 154, 160, 161, 177, 181, 189, 191, 192, 193, 194, 196, 197, 200], "singl": [7, 75, 140, 177, 181, 191, 197], "row": [7, 127, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 163, 166, 168, 188, 190, 191, 192, 193, 194, 196, 199], "where": [7, 8, 9, 10, 11, 12, 13, 60, 61, 63, 75, 127, 173, 177, 181, 191, 197, 200], "e": [7, 9, 10, 17, 21, 75, 116, 117, 118, 121, 158, 161, 164, 177, 191, 197], "g": [7, 9, 17, 21, 116, 117, 118, 158, 161, 164, 177, 191, 197], "2021": [7, 188, 191, 196, 199], "01": [7, 29, 31, 32, 142, 143, 190, 191, 193, 194, 196, 197], "00": [7, 191, 192, 193, 194, 195, 196, 197], "min_valu": [7, 11, 191, 194, 195, 197], "minimum": [7, 11], "specifi": [7, 17, 75, 112, 121, 123, 125, 129, 131, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 160, 161, 162, 171, 174, 177, 179, 181, 191, 194, 197], "min_inclus": [7, 11, 191, 197], "indic": [7, 21, 27, 60, 61, 115, 118, 191, 197], "includ": [7, 11, 21, 72, 112, 114, 146, 150, 191, 194, 197, 198], "rang": [7, 11, 29, 30, 66, 67, 68, 93, 191, 194, 197], "work": [7, 27, 103, 104, 135, 177, 191, 194, 197], "numer": [7, 11, 138, 191, 197], "datetim": [7, 9, 11, 14, 121, 123, 125, 129, 131, 133, 137, 142, 143, 177, 191, 194, 197], "inf": [7, 11, 191, 194, 197], "max_valu": [7, 11, 191, 194, 195, 197], "boolean": [7, 8, 9, 10, 11, 12, 13, 15, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "greater": [7, 22, 146, 150, 197], "than": [7, 11, 22, 48, 52, 54, 135, 136, 146, 150, 179, 181, 188, 191, 197, 199, 200], "equal": [7, 11, 21, 145, 146, 150], "maximum": [7, 11, 22, 29, 30], "max_inclus": [7, 11, 191, 197], "less": [7, 11, 48, 52, 54, 150, 188, 197, 199], "match": [7, 9, 12, 13, 17, 152, 196], "between": [7, 21, 38, 51, 69, 95, 188, 199], "1": [7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 116, 117, 118, 119, 137, 138, 140, 142, 143, 145, 146, 147, 148, 150, 159, 164, 177, 188, 191, 194, 197, 198, 199, 200], "dai": [7, 9, 137, 197, 200], "31": [7, 188, 191, 197, 199], "hour": [7, 9], "0": [7, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 130, 159, 173, 177, 189, 190, 191, 192, 193, 194, 195, 196, 197], "23": [7, 191, 197], "negat": [7, 9, 10, 11, 12, 13, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 194], "flag": [7, 161], "doe": [7, 9, 11, 12, 13, 17, 21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 75, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 177], "keep_nul": [7, 9, 11, 12, 13], "null": [7, 9, 10, 11, 12, 13, 157, 159, 197], "conjunct": [7, 194], "its": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 60, 61, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 191, 194, 197], "own": [7, 191, 197], "callabl": [7, 8, 17, 21, 76, 140, 177], "import": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 177, 188, 198, 199, 200], "slice_spec": [7, 17, 179, 181, 191, 194, 197], "feature_1": 7, "feature_2": 7, "feature_3": 7, "value_1": 7, "value_2": 7, "2020": [7, 9, 142, 143, 149, 188, 194, 199], "5": [7, 24, 25, 27, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 115, 118, 119, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199], "60": 7, "6": [7, 24, 26, 35, 36, 38, 39, 49, 56, 59, 62, 63, 78, 79, 80, 81, 83, 84, 85, 87, 88, 90, 92, 93, 95, 97, 98, 99, 100, 104, 107, 108, 110, 188, 191, 192, 194, 195, 196, 197, 199], "7": [7, 29, 30, 31, 36, 39, 40, 69, 80, 81, 82, 84, 85, 87, 88, 89, 93, 98, 100, 105, 108, 109, 110, 188, 190, 191, 194, 196, 197, 199, 200], "8": [7, 24, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 40, 41, 47, 49, 50, 53, 54, 56, 59, 60, 62, 66, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 105, 107, 109, 110, 188, 191, 194, 196, 197, 199], "2000": 7, "2010": [7, 188, 199], "slice_nam": [7, 177, 191, 194, 197], "slice_func": 7, "print": [7, 189, 190, 191, 192, 193, 194, 196, 197], "do": [7, 17], "someth": 7, "here": [7, 191, 197], "filter": [7, 9, 10, 11, 12, 13, 17, 21, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 165, 188, 191, 194, 195, 197, 199], "add": [7, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 135, 136, 137, 138, 164, 172, 177, 179, 181, 191, 194, 197], "detail": [7, 127, 191, 194, 197], "registri": [7, 191, 197], "gener": [7, 69, 95, 112, 177, 188, 194, 196, 198, 200], "slice_funct": 8, "result": [8, 17, 38, 51, 127, 172, 179, 181, 189, 191, 192, 193, 194, 195, 196, 197], "bitwis": 8, "AND": 8, "signatur": 8, "should": [8, 21, 69, 76, 95, 117, 127, 177, 179, 181, 191, 194, 197], "kwarg": [8, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 114, 121, 123, 125, 129, 131, 133, 167, 168, 179, 181], "given": [9, 11, 12, 13, 14, 24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 75, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110, 159, 172, 177, 179, 181], "int": [9, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 116, 117, 118, 119, 127, 138, 141, 148, 149, 161, 163, 172, 173, 177, 179, 181, 191, 197], "compon": [9, 158], "have": [9, 12, 13, 17, 114, 121, 123, 125, 129, 131, 133, 147, 154, 161, 188, 191, 199, 200], "nan": [9, 10, 188, 200], "nat": 9, "rais": [9, 11, 12, 17, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 69, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 177, 179, 181], "typeerror": [9, 11, 12, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 177], "float": [11, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 115, 116, 117, 118, 119, 138, 141, 177], "valueerror": [11, 17, 21, 48, 50, 52, 54, 58, 59, 60, 61, 62, 63, 69, 177, 179, 181], "either": [11, 30, 31, 32, 75, 87, 88, 89, 92, 93, 94, 110, 177, 191, 197], "ha": [13, 75, 173, 177, 191, 194, 197], "find": [13, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 194], "perform": [13, 26, 27, 31, 32, 127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 188, 196, 198, 200], "datetime64": 14, "target_column": [17, 19, 21, 191, 194, 197], "feature_column": [17, 194, 195], "prediction_column_prefix": [17, 179, 181, 191, 194, 197], "remove_column": [17, 19, 21, 179, 181, 194], "split": [17, 112, 177, 179, 181, 191, 194, 197], "batch_siz": [17, 19, 21, 112, 179, 181, 191, 197], "1000": [17, 19, 21, 112, 181, 191], "fairness_config": [17, 179, 181, 191, 197], "override_fairness_metr": [17, 179, 181, 191, 197], "load_dataset_kwarg": 17, "datasetdict": [17, 179, 181], "load_dataset": 17, "argument": [17, 21, 43, 75, 131, 136, 144, 145, 146, 147, 150, 153, 154, 179, 181, 191, 197], "target": [17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 116, 117, 179, 181, 188, 191, 197, 198, 200], "prefix": [17, 75], "ad": [17, 114, 127, 135, 136, 137, 138, 172, 177, 179, 181, 191, 197], "model_nam": [17, 179, 181, 191, 194, 195, 197], "remov": [17, 21, 75, 119, 157, 179, 181, 191, 194, 197], "mai": [17, 21, 188, 191, 194, 197, 199], "expens": [17, 21, 161], "memori": [17, 21], "wrappedmodel": [17, 179, 181], "entir": [17, 191, 197], "being": [17, 135, 136, 137, 138, 142, 143, 145, 148, 149], "note": [17, 121, 131, 177, 189, 191, 194, 196, 197], "chosen": 17, "avail": [17, 177, 191, 197, 200], "first": [17, 21, 25, 76, 104, 175, 189, 191, 192, 193, 196, 197], "test": [17, 177, 179, 181, 188, 191, 197, 198, 199, 200], "eval": 17, "val": 17, "dev": 17, "batch": [17, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 179, 181, 188, 194, 199], "size": [17, 21, 112, 179, 181, 191, 194, 197], "neg": [17, 35, 48, 49, 50, 51, 52, 53, 54, 59, 61, 62, 63, 72, 81, 83, 85, 98, 99, 100, 105, 107, 108, 109, 135, 136, 197], "integ": [17, 21, 164, 177], "configur": [17, 18, 19, 121, 123, 125, 129, 131, 133, 179, 181, 191, 197], "overridden": [17, 179, 181], "prediction_column": [17, 19, 21, 194], "keyword": [17, 21, 43, 75, 144, 145, 146, 147, 150, 153, 154, 175, 181, 188, 199], "onli": [17, 21, 24, 27, 29, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 62, 63, 75, 80, 81, 82, 84, 85, 98, 100, 103, 104, 105, 108, 109, 110, 154, 161, 162, 188, 199], "found": [17, 75, 177, 189, 191, 192, 193, 194, 195, 196, 197], "group": [19, 21, 22, 75, 160, 177, 191, 194, 197], "group_valu": [19, 21], "group_bin": [19, 21, 191, 194, 197], "group_base_valu": [19, 21, 191, 194, 197], "threshold": [19, 21, 24, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 53, 54, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 102, 104, 105, 107, 109, 110, 177, 188, 191, 197, 200], "compute_optimal_threshold": [19, 21], "metric_nam": [19, 21, 43, 177, 191, 194, 197], "metric_kwarg": [19, 21], "take": [21, 24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 112, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 188, 191, 199], "allow": [21, 22, 121, 123, 125, 129, 131, 133, 191, 197, 198, 199], "intersect": 21, "treat": 21, "multilabel": [21, 24, 27, 29, 32, 36, 37, 40, 41, 49, 50, 53, 54, 60, 61, 62, 63, 68, 69, 72, 82, 83, 84, 85, 89, 90, 94, 95, 99, 100, 104, 105, 109, 110, 188, 200], "same": [21, 75, 116, 160, 161], "uniqu": [21, 22, 29, 30, 31, 32, 66, 67, 68, 69, 87, 88, 89, 92, 93, 94, 95, 194, 200], "number": [21, 22, 24, 26, 27, 29, 30, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 98, 99, 100, 103, 104, 105, 108, 110, 112, 116, 117, 127, 163, 171, 177, 179, 181, 188, 193, 197, 198, 199], "continu": [21, 191, 194, 197], "veri": 21, "slow": [21, 168], "larg": [21, 168], "denomin": 21, "pariti": [21, 188, 200], "across": [21, 116, 198], "linspac": 21, "monoton": [21, 69, 95], "control": [21, 115], "usag": [21, 191, 197], "rel": 21, "small": 21, "32": [21, 191, 194, 196, 197], "avoid": 21, "optim": [21, 191], "oper": [21, 65, 76, 127, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "necessari": 21, "nest": 21, "second": [21, 76], "third": 21, "omit": 21, "requir": [21, 24, 29, 36, 37, 49, 50, 69, 84, 85, 90, 95, 100, 105, 110, 177, 179, 181, 191, 197], "huggingfac": [21, 112, 179, 181], "runtimeerror": 21, "empti": [21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "encount": [21, 125, 188, 197, 199], "unique_valu": 22, "max_unique_valu": 22, "50": [22, 191, 194, 195, 197], "warn": [22, 24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 102, 103, 104, 105], "score": [24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 70, 72, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110], "multiclass": [24, 26, 29, 31, 36, 37, 38, 39, 49, 50, 51, 52, 58, 59, 62, 63, 67, 69, 72, 80, 81, 84, 85, 88, 90, 93, 95, 98, 100, 103, 105, 108, 110], "One": [24, 29, 31, 32, 35, 48, 59, 62, 63, 69, 95, 194, 197], "pos_label": [24, 25, 30, 34, 35, 36, 37, 47, 48, 49, 50, 56, 57, 62, 63, 66, 69, 78, 79, 84, 85, 87, 90, 92, 95, 97, 100, 102, 105, 107, 110], "label": [24, 25, 27, 29, 32, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 78, 79, 81, 82, 83, 84, 85, 87, 89, 90, 92, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 116, 117, 119, 135, 136, 137, 138, 158, 160, 164, 174, 179, 181, 188, 191, 192, 193, 194, 200], "consid": [24, 26, 27, 36, 37, 49, 50, 62, 63, 84, 85, 90, 95, 100, 103, 104, 105, 133], "posit": [24, 25, 29, 30, 34, 35, 36, 37, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 75, 78, 79, 80, 81, 82, 83, 84, 85, 87, 90, 92, 95, 97, 98, 99, 100, 102, 105, 107, 108, 109, 110, 194], "num_class": [24, 26, 29, 31, 36, 37, 38, 39, 49, 50, 51, 52, 58, 59, 61, 62, 63, 67, 69, 80, 81, 84, 85, 88, 90, 93, 95, 98, 100, 103, 105, 108, 110, 191, 197], "decid": [24, 36, 37, 40, 41, 49, 50, 53, 54, 56, 57, 60, 61, 78, 79, 82, 83, 84, 85, 97, 99, 100, 105], "top_k": [24, 26, 27, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 108, 109, 110], "probabl": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 72, 80, 81, 82, 84, 85, 93, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 181, 191, 197], "logit": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 72, 80, 81, 82, 84, 85, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110], "top": [24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110], "k": [24, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 75, 80, 81, 82, 84, 85, 98, 100, 105, 108, 109, 110, 195], "num_label": [24, 27, 29, 32, 36, 37, 40, 41, 49, 50, 53, 54, 60, 61, 62, 63, 68, 69, 82, 83, 84, 85, 89, 90, 94, 95, 99, 100, 104, 105, 109, 110, 194], "averag": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 191], "micro": [24, 26, 27, 29, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "macro": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "weight": [24, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 194, 195, 197], "calcul": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "global": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "unweight": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105], "mean": [24, 26, 27, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 191, 194, 195, 197], "imbal": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 119], "account": [24, 26, 27, 29, 31, 32, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 191, 194], "instanc": [24, 26, 27, 31, 32, 36, 37, 38, 39, 40, 41, 43, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 103, 104, 105, 191, 197], "alter": [24, 26, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 105], "zero_divis": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 102, 103, 104, 105], "zero": [24, 25, 26, 27, 34, 36, 37, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "divis": [24, 25, 26, 27, 34, 36, 37, 38, 39, 40, 41, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "act": [24, 25, 26, 27, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 78, 79, 80, 81, 82, 83, 84, 85, 97, 98, 99, 100, 103, 104, 105], "pred": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 191, 197], "75": [24, 25, 29, 30, 66, 67, 68, 90, 92, 95, 103, 104, 105, 191], "05": [24, 26, 27, 29, 31, 32, 36, 38, 39, 40, 49, 53, 62, 67, 68, 69, 80, 81, 84, 85, 88, 90, 93, 94, 95, 98, 100, 103, 104, 105, 108, 110, 190, 197], "95": [24, 26, 27, 36, 38, 49, 62, 69, 88, 90, 93, 94, 95, 196], "p": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 115, 194], "zip": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "2": [24, 26, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 92, 93, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 130, 138, 140, 147, 148, 173, 177, 188, 190, 191, 194, 197, 198, 199], "3": [24, 26, 27, 29, 31, 34, 35, 36, 37, 38, 39, 40, 47, 49, 50, 51, 52, 53, 56, 58, 59, 61, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 110, 116, 117, 188, 190, 191, 194, 196, 197, 198, 199], "66666667": [24, 26, 36, 38, 49, 51, 61, 63, 81, 85, 87, 88, 90, 93, 94, 95, 98, 100, 104], "initi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 123, 125, 127, 129, 131, 133, 172, 191, 194, 197], "two": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 161, 172, 175], "scalar": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "togeth": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 188, 199], "multipli": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "variabl": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 200], "attributeerror": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "alreadi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 191, 197], "exist": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 135, 136, 137, 138, 169, 174, 177, 179, 181, 191, 194, 197], "copi": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 191, 194, 197], "abstract": [24, 29, 36, 37, 73, 74, 84, 85, 90, 95, 100, 105, 110, 167], "final": [24, 29, 36, 37, 74, 84, 85, 90, 95, 100, 105, 110, 172, 194, 197], "reset": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "_update_count": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "_comput": [24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 74, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110], "sigmoid": [25, 35, 41, 66, 68, 69, 102, 104, 107, 109, 110], "them": [25, 104, 127, 191, 194, 197, 198], "875": 25, "problem": [26, 88, 108, 109, 110, 200], "highest": [26, 27, 62, 63, 103, 104], "determin": [26, 27, 29, 30, 31, 32, 66, 67, 68, 87, 88, 89, 90, 92, 93, 94], "dtype": [26, 27, 31, 32, 38, 39, 40, 41, 66, 67, 68, 69, 80, 81, 82, 83, 87, 88, 89, 92, 93, 94, 98, 99, 103, 104, 115, 116, 117, 118, 119, 191, 194, 196], "float64": [26, 27, 31, 32, 38, 39, 40, 41, 66, 67, 68, 69, 80, 81, 82, 83, 87, 88, 89, 92, 93, 94, 98, 99, 103, 104, 115, 116, 117, 118, 119, 194], "binar": [27, 29, 30, 31, 32, 34, 47, 67, 68, 93, 94, 109, 110], "output": [27, 69, 177, 191, 197], "classifi": [27, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 102, 191, 197], "correct": [27, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102, 103, 104], "per": [27, 75, 188, 194, 197, 199], "area": [28, 29, 30, 31, 32, 45], "under": [28, 29, 30, 31, 32, 45, 191, 197], "curv": [28, 29, 30, 31, 32, 45, 64, 65, 66, 67, 68, 69, 86, 87, 88, 89, 90, 92, 93, 94, 95, 191, 197], "max_fpr": [29, 30], "rate": [29, 30, 66, 67, 68, 69, 188, 197, 200], "partial": [29, 30, 194], "auc": 29, "automat": [29, 30, 31, 32, 66, 67, 68, 87, 88, 89, 90, 92, 93, 94, 121], "applic": [29, 111, 112, 114], "4": [29, 30, 34, 35, 36, 37, 40, 47, 50, 59, 63, 69, 82, 83, 84, 85, 87, 88, 90, 92, 93, 94, 95, 99, 100, 105, 107, 108, 109, 110, 188, 190, 191, 194, 196, 197, 198, 199], "35": [29, 30, 69, 87, 92, 95, 103, 104, 105, 191, 194, 195, 197], "9": [29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 49, 50, 53, 54, 56, 60, 62, 63, 66, 67, 68, 69, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 109, 110, 188, 189, 191, 194, 195, 196, 197, 199], "6111111111111112": [29, 30], "89": [29, 31, 32, 69], "06": [29, 31, 69, 196], "94": [29, 31, 194, 197], "22222222": [29, 31], "625": [29, 32, 35, 103], "aucroc": 30, "confus": [30, 31, 32, 87, 88, 89, 92, 93, 94], "matrix": [30, 31, 32, 87, 88, 89, 92, 93, 94, 115, 116, 117, 118, 119], "f": [33, 35, 37, 38, 39, 41, 46, 48, 50, 51, 52, 54, 75, 189, 190, 191, 192, 193, 194, 195, 196, 197], "beta": [33, 35, 37, 39, 41, 46, 48, 50, 52, 54], "f1": [34, 36, 38, 40, 46, 47, 49, 51, 53], "form": [34, 47, 191, 197], "6666666666666666": [34, 36, 47, 56, 78, 84], "harmon": [35, 37, 39, 41, 48, 50, 52, 54], "8333333333333334": [35, 37, 50, 59, 62], "85714286": [36, 38], "9090909090909091": 37, "83333333": [37, 41, 50, 54], "55555556": [37, 50, 103], "90909091": [37, 39, 41], "85": [39, 80, 81, 84, 85, 98, 100, 191, 197], "total": [40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 108, 188, 197, 199], "count": [40, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 80, 81, 82, 83, 84, 85, 98, 99, 100, 160, 190, 191, 194, 197], "predicit": 41, "constructor": 43, "arraylik": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 93, 102], "ground": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102], "truth": [47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 93, 102], "npt": [48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63], "7142857142857143": 48, "estim": [49, 50, 66, 67, 68, 69, 93, 102, 181], "shape": [49, 50, 51, 52, 53, 54, 60, 61, 108, 109, 194, 195], "expect": [60, 61, 191, 197], "like": [60, 61, 75, 133, 151, 191], "n": [60, 61, 191, 194], "l": [60, 61], "sampl": [60, 61, 63, 119], "presenc": [60, 61, 194], "absenc": [60, 61], "rest": 61, "ratio": [62, 63, 105, 197], "correctli": 62, "precision_scor": 62, "tp": [63, 107, 108, 109], "fn": [63, 107, 108, 109], "intuit": 63, "abil": [63, 191, 197], "recall_scor": 63, "3333333333333333": 63, "receiv": [65, 131], "characterist": 65, "decis": [66, 67, 68, 69, 93, 177, 191, 197], "fpr": [66, 67, 68, 69, 191, 194, 197], "tpr": [66, 67, 68, 69], "25": [66, 67, 68, 88, 90, 92, 93, 95, 105, 116, 117, 191, 193, 195, 197], "softmax": [67, 69, 93], "1d": [67, 68, 69, 95], "33333333": [67, 85, 88, 90, 93, 94, 95, 100], "non": 69, "evenli": [69, 95], "space": [69, 95], "increas": [69, 95], "assertionerror": [69, 177], "03": [69, 190, 191], "stat": [72, 106, 107, 108, 109, 110], "abc": 74, "other_metr": 75, "postfix": 75, "userdict": 75, "collect": [75, 191, 194, 197], "want": 75, "behav": 75, "themselv": 75, "intern": 75, "similar": 75, "reduc": 75, "els": [75, 191, 194, 195, 197], "keep_bas": 75, "iter": 75, "underli": 75, "moduledict": 75, "hashabl": 75, "v": [75, 194], "correspond": [75, 133, 157, 181], "keyerror": [75, 177], "some": [75, 135, 136, 137, 138, 142, 143, 144, 145, 146, 150, 153, 156, 157, 166, 169, 174, 191, 197], "pair": [75, 160], "present": 75, "lack": 75, "In": [75, 191, 197], "metric_a": 76, "metric_b": 76, "metric1": 76, "metric2": 76, "unari": 76, "appropri": [84, 85, 100, 191, 197], "375": [88, 90], "suniqu": 90, "45": [90, 105, 191, 197], "42857143": 90, "15": [103, 104, 105, 190, 191, 194, 196, 197], "57142857": 103, "sum": [105, 108, 109, 110, 194, 197], "_abstractscor": [107, 108, 109], "fp": [107, 108, 109], "tn": [107, 108, 109], "classwis": [108, 110], "over": [108, 109, 110, 160, 188, 200], "labelwis": [109, 110], "prior": [110, 191, 194, 197], "modul": [111, 131, 176, 177, 191, 197], "shift_typ": [112, 114], "shift_id": [112, 195], "induc": [112, 114], "synthet": [112, 114, 188, 197, 198, 200], "categor": [112, 191, 197], "origin": [112, 127], "util": [112, 127, 189, 190, 191, 192, 193, 194, 196, 197], "load_nih": 112, "mnt": [112, 194, 195], "nihcxr": [112, 188, 194, 198], "hospital_type_1": 112, "hospital_type_2": 112, "hospital_type_3": 112, "hospital_type_4": 112, "hospital_type_5": 112, "ds_sourc": [112, 195], "ds_target": [112, 195], "num_proc": [112, 195], "hospit": [112, 131, 188, 191, 197, 199, 200], "drift_detect": 114, "experiment": 114, "sklearn": [114, 191, 197], "load_diabet": 114, "y": [114, 116, 117, 119, 140, 181, 191, 194, 197], "return_x_i": 114, "x_tr": 114, "x_te": 114, "y_tr": 114, "y_te": 114, "train_test_split": [114, 191, 197], "test_siz": 114, "random_st": [114, 191, 197], "42": [114, 191, 197], "gn_shift": 114, "x_shift": 114, "x_train": [114, 181], "noise_amt": [114, 118], "delta": [114, 115, 118, 119, 137], "ko_shift": 114, "cp_shift": 114, "mfa_shift": 114, "bn_shift": 114, "tolerance_shift": 114, "ds_shift": 114, "nois": [114, 115, 118, 191, 194, 197], "prob": 115, "covari": [115, 116, 117, 118, 119], "proport": 115, "fraction": [115, 118, 119, 197], "affect": [115, 118, 177, 191, 197], "n_shuffl": [116, 117], "keep_rows_const": 116, "repermute_each_column": 116, "multiwai": 116, "associ": [116, 191, 194, 197], "swap": [116, 117], "individu": [116, 191, 197], "within": 116, "cl": [116, 117], "etc": [116, 117, 191, 194, 197], "floatnumpi": 116, "shuffl": [116, 117, 191], "permut": 116, "placehold": 116, "shift_class": [117, 119], "rank": 117, "changepoint": 117, "axi": [117, 194, 195, 197], "x_ref": 117, "y_ref": 117, "normal": [118, 191], "clip": 118, "gaussian": 118, "standard": [118, 121, 123, 125, 129, 131, 133, 191, 197], "deviat": 118, "divid": 118, "255": [118, 194, 195], "placehol": 119, "querier": [120, 123, 125, 129, 131, 133, 189, 190, 192, 193, 196, 197], "config_overrid": [121, 123, 125, 129, 131, 133], "orm": [121, 127, 189, 190, 192, 193, 196, 197, 199], "overrid": [121, 123, 125, 129, 131, 133], "intend": [121, 191, 194, 197], "subclass": [121, 177], "tabl": [121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 188, 189, 192, 196, 199], "schema": [121, 123, 125, 129, 131, 133, 193, 196], "schema_nam": [121, 123, 125, 129, 131, 133, 196], "table_nam": [121, 123, 125, 129, 131, 133], "instanti": [121, 188, 191, 197, 199], "cast_timestamp_col": [121, 123, 125, 129, 131, 133], "possibli": [121, 123, 125, 129, 131, 133], "recogn": [121, 123, 125, 129, 131, 133], "timestamp": [121, 123, 125, 129, 131, 133, 141, 142, 143, 148, 149, 158, 177, 188, 194, 198], "sqlalchemi": [121, 123, 125, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 199], "sql": [121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 173, 174, 175, 188, 199], "subqueri": [121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "care": [125, 131], "unit": 125, "fetch": [125, 127], "transfer": 125, "construct": [125, 129, 131, 133, 136, 137], "wrap": [125, 126, 127, 129, 131, 133], "diagnosi": [125, 129, 131, 189, 190], "room": 125, "dataclass": 127, "tabletyp": 127, "chain": [127, 172], "thu": 127, "datafram": [127, 181, 188, 191, 197, 199], "properti": [127, 179, 181], "join_tabl": [127, 161, 189, 190, 192, 193, 196], "on_to_typ": [127, 161], "cond": [127, 161], "table_col": [127, 161], "join_table_col": [127, 161], "isout": [127, 161, 196, 197], "anoth": [127, 161, 169, 172], "dbtabl": [127, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175], "binaryexpress": [127, 161], "condit": [127, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 161, 165, 191, 196], "outer": [127, 161], "backend": [127, 193], "panda": [127, 191, 196, 197], "index_col": [127, 193], "n_partit": [127, 193], "No": [127, 194, 196], "dask": [127, 188, 199], "framework": 127, "index": [127, 172, 173, 191, 194, 197], "defin": [127, 177, 191, 194, 197], "partit": [127, 188, 199], "server": 127, "document": [127, 191, 194, 197], "file_format": [127, 191], "parquet": 127, "csv": [127, 191, 196, 197], "upstream": 127, "icu": 131, "chart": [131, 188, 199], "event": [131, 188, 199], "lab": [131, 188, 190, 194, 199], "approxim": 131, "anchor_year": 131, "anchor_year_group": 131, "suppli": 131, "dod": 131, "adjust": [131, 194], "src_tabl": 133, "src_col": 133, "dst_col": 133, "concept": [133, 196], "somecol_concept_id": 133, "somecol_concept_nam": 133, "accord": [133, 189, 192, 193, 196], "assign": 133, "add_to": [135, 136, 137, 138], "col": [135, 140, 141, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 162, 164, 166, 170, 171, 173, 174], "new_col_label": [135, 136, 137, 138, 173, 174, 197], "subtract": [135, 136], "rather": [135, 136], "new": [135, 136, 137, 138, 140, 159, 160, 164, 170, 173, 174, 177, 191, 197], "col1": [135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 161, 162, 164, 166, 169, 170, 171, 172, 173, 174], "col2": [135, 136, 137, 138, 140, 141, 156, 157, 159, 161, 162, 166, 170, 171, 172, 174], "col3": [135, 136, 161, 171], "col1_plus_col2": [135, 136], "col1_plus_col3": 135, "col2_plus_col3": 135, "pai": 135, "attent": 135, "wherea": 135, "delta_kwarg": 136, "interv": 136, "timedelta": 137, "col1_plus_1": [137, 138], "col2_plus_1": 138, "cond_op": [139, 165], "lab_nam": [139, 151, 160, 165], "hba1c": [139, 151, 165], "john": [139, 165], "jane": [139, 165], "return_cond": [139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 165], "instead": [139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 165, 177], "func": [140, 194, 195], "new_col": 140, "assum": [140, 189, 192, 193, 196], "lambda": [140, 191, 194, 195, 197], "col1_new": [140, 159, 169], "col2_new": [140, 159], "noqa": [140, 191, 194, 197], "e501": [140, 191, 197], "disabl": 140, "line": [140, 191, 194, 197], "too": 140, "long": [140, 177, 188, 199], "type_": 141, "convers": 141, "date": [141, 142, 143, 177, 191, 194, 197], "timestamp_col": [142, 143, 148, 149, 158], "not_": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "binarize_col": [142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "yyyi": [142, 143, 177], "mm": [142, 143, 177], "dd": [142, 143, 177], "col1_bool": [142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154], "cond_kwarg": [144, 145, 146, 147, 150, 153, 154], "2019": [149, 196], "pattern": 151, "lab_name_bool": 151, "regex": 152, "regular": 152, "express": [152, 191, 194, 197], "any_": 154, "just": 154, "b": 154, "person_id": [155, 160, 196], "visit_id": 155, "extract_str": 158, "extract": [158, 173, 189, 190, 191, 192, 193, 196, 197], "inform": [158, 177, 191], "fill_valu": 159, "new_col_nam": [159, 173], "groupby_col": 160, "aggfunc": [160, 197], "aggsep": 160, "aggreg": [160, 188, 199], "prevent": 160, "string_aggfunc": 160, "separ": 160, "string_agg": 160, "visit_count": 160, "lab_name_agg": 160, "repres": [161, 177, 194], "suggest": 161, "oppos": 161, "sai": 161, "left": [161, 177, 197], "table2": [161, 175], "table1": [161, 175], "neither": 161, "nor": 161, "cartesian": 161, "product": 161, "OR": 165, "ascend": [166, 190], "sort": [166, 188, 191, 197, 199], "descend": 166, "random": [168, 191, 194, 197], "so": 168, "certain": [168, 191, 197], "cannot": 168, "seen": 168, "analyz": 168, "quit": 168, "rename_map": 169, "check_exist": 169, "complet": 170, "come": 171, "ordereddict": 172, "execut": [172, 189, 190, 192, 193, 196, 197], "op_": 172, "start_index": 173, "stop_index": 173, "stop": [173, 197], "col1_substr": 173, "whitespac": 174, "col1_trim": 174, "col2_trim": 174, "union_t": 175, "output_dir": [177, 191, 194, 197], "serv": 177, "popul": [177, 188, 191, 197, 200], "modelcard": 177, "directori": [177, 191, 197], "output_filenam": 177, "template_path": 177, "interact": [177, 197], "save_json": 177, "jinja2": 177, "json": [177, 191, 197], "classmethod": 177, "cyclops_report": [177, 191, 197], "section_nam": [177, 191, 194, 197], "model_detail": [177, 191, 197], "section": [177, 191, 194, 197], "bibtex": 177, "entri": 177, "plain": 177, "text": [177, 193, 194], "descript": [177, 191, 194, 197], "license_id": [177, 191], "sensitive_featur": [177, 191], "sensitive_feature_justif": [177, 191], "log": [177, 188, 191, 197, 200], "about": [177, 191, 194, 197], "resourc": [177, 191, 197], "context": 177, "homepag": 177, "spdx": [177, 191], "identifi": [177, 188, 194, 200], "licens": [177, 191, 194, 197], "apach": [177, 191, 197], "unknown": 177, "unlicens": 177, "proprietari": 177, "justif": [177, 191], "field": [177, 188, 191, 197, 200], "descriptor": 177, "pydant": 177, "basemodel": 177, "As": 177, "conflict": 177, "model_card": [177, 191, 194, 197], "cylop": 177, "tradeoff": [177, 194], "trade": 177, "off": 177, "interpret": 177, "consider": [177, 191, 194, 197], "affected_group": [177, 191, 194, 197], "benefit": [177, 191, 194, 197], "harm": [177, 191, 194, 197], "mitigation_strategi": [177, 191, 194, 197], "assess": 177, "mitig": [177, 191, 194, 197], "strategi": [177, 191, 194, 197], "relat": 177, "img_path": 177, "caption": [177, 191, 194, 197], "full": 177, "whole": [177, 191, 197], "blank": 177, "param": [177, 191, 197], "contact": [177, 191, 194, 197], "role": 177, "owner": [177, 191, 194, 197], "quantit": [177, 191, 194, 197], "slash": 177, "fig": [177, 191, 194, 197], "plotli": [177, 191, 194, 197], "figur": [177, 191, 194, 197], "plot": [177, 191, 194, 197], "analysis_typ": 177, "metric_slic": [177, 191, 194, 197], "decision_threshold": 177, "pass_fail_threshold": [177, 191, 194, 197], "pass_fail_threshold_fn": [177, 191, 194, 197], "explain": [177, 191, 194, 197], "fail": 177, "regul": 177, "regulatori": [177, 191, 197], "compli": 177, "risk": [177, 191, 194, 197, 200], "kind": [177, 191, 194, 197], "primari": [177, 191, 194, 197], "scope": [177, 191, 197], "usecas": 177, "version_str": [177, 191, 197], "semant": 177, "v1": [177, 192, 196], "dt_date": 177, "dt_datetim": 177, "unix": 177, "hh": 177, "ss": 177, "ffffff": 177, "z": 177, "summar": 177, "chang": [177, 191, 194, 197], "made": [177, 191, 197], "task_featur": [179, 181, 191, 197], "task_target": [179, 181, 191, 197], "atelectasi": [179, 194], "consolid": [179, 194], "infiltr": [179, 194], "pneumothorax": [179, 194], "edema": [179, 194], "emphysema": [179, 194], "fibrosi": [179, 194], "effus": [179, 194], "pneumonia": [179, 194], "pleural_thicken": [179, 194], "cardiomegali": [179, 194], "nodul": [179, 194], "mass": [179, 194, 197], "hernia": [179, 194], "lung": 179, "lesion": 179, "fractur": 179, "opac": 179, "enlarg": 179, "cardiomediastinum": 179, "basetask": [179, 181], "multi": [179, 194], "ptmodel": [179, 181, 194], "skmodel": [179, 181], "splits_map": [179, 181], "64": [179, 191, 197], "compos": [179, 191, 194, 195, 197], "unnecessari": [179, 181], "pathologi": [179, 188, 191, 200], "represent": [179, 191, 197], "tabular": [181, 188], "fit": [181, 191, 197], "columntransform": [181, 191, 197], "slicingconfig": 181, "default_max_batch_s": 181, "filepath": 181, "pretrain": [181, 194], "proba": [181, 191, 197], "pd": [181, 196], "notfittederror": 181, "destin": 181, "parent": [181, 191, 194, 197], "dirctori": 181, "best_model_param": [181, 191, 197], "y_train": 181, "seri": 181, "nonei": 181, "male": [188, 194, 195, 199], "outcom": [188, 199, 200], "femal": [188, 191, 194, 195, 197, 199], "gastroenter": [188, 199], "icd": [188, 199], "potassium": [188, 199], "aado2": [188, 199], "carevu": [188, 199], "valuenum": [188, 199], "20": [188, 190, 191, 194, 197, 199], "admiss": [188, 192, 199], "later": [188, 199], "approx": [188, 199], "schizophrenia": [188, 199], "2015": [188, 196, 199], "advanc": [188, 199], "chronic": [188, 199], "routin": [188, 199], "vital": [188, 190, 197, 199], "sign": [188, 191, 197, 199], "hemoglobin": [188, 199], "2009": [188, 199], "radiologi": [188, 199], "lymphadenopathi": [188, 199], "infecti": [188, 199], "occur": [188, 199], "lazi": [188, 199], "subject_id": [188, 192, 199], "raw": [188, 199], "discharg": [188, 199], "2014": [188, 196, 199], "100": [188, 191, 192, 193, 194, 195, 196, 197, 199], "diagnosisstr": [188, 199], "teach": [188, 199], "glucos": [188, 199], "search": [188, 191, 197, 199], "visit": [188, 199], "sepsi": [188, 199], "1a": [188, 199], "most": [188, 191, 199], "recent": [188, 191, 194, 197, 199], "patient_id_hash": [188, 199], "discharge_date_tim": [188, 199], "record": [188, 199], "1b": [188, 199], "abov": [188, 199], "who": [188, 199], "were": [188, 199], "april": [188, 199], "march": [188, 199], "2016": [188, 196, 199], "1c": [188, 199], "2a": [188, 199], "how": [188, 189, 191, 192, 193, 196, 197, 199], "mani": [188, 199], "sodium": [188, 199], "place": [188, 191, 199], "apr": [188, 199], "smh": [188, 199], "drift": [188, 198], "experi": [188, 198], "dimension": [188, 198], "reduct": [188, 198], "techniqu": [188, 198], "roll": [188, 198], "window": [188, 198], "biweekli": [188, 198], "kaggl": [188, 191], "heart": 188, "failur": 188, "constant": [188, 200], "distribut": [188, 194, 200], "preprocessor": [188, 200], "creation": [188, 200], "synthea": [188, 196, 197], "prolong": 188, "length": [188, 194], "stai": 188, "inspect": [188, 191, 200], "preprocess": [188, 191, 200], "nan_threshold": [188, 191, 200], "gender": [188, 189, 191, 192, 193, 194, 195, 200], "nih": [188, 194, 195], "diseas": [188, 191, 200], "balanc": [188, 191, 200], "w": [188, 200], "quick": [189, 192, 193, 196], "instruct": [189, 192, 193, 196, 197], "host": [189, 190, 192, 193, 196, 197], "postgr": [189, 192, 193, 196, 197], "usernam": [189, 190, 191, 192, 193, 196], "password": [189, 190, 192, 193, 196, 197], "accordingli": [189, 192, 193, 196], "qo": [189, 190, 192, 193, 196, 197], "dbm": [189, 192, 193, 196, 197], "postgresql": [189, 192, 193, 196, 197, 199], "port": [189, 192, 193, 196, 197], "5432": [189, 192, 193, 196, 197], "localhost": [189, 192, 193, 196, 197], "pwd": [189, 192, 193, 196, 197], "eicu_crd": 189, "home": [189, 191, 192, 193, 194, 195, 196, 197], "amritk": [189, 191, 192, 193, 194, 195, 196, 197], "cach": [189, 191, 192, 193, 194, 195, 196, 197], "pypoetri": [189, 191, 192, 193, 194, 195, 196, 197], "virtualenv": [189, 191, 192, 193, 194, 195, 196, 197], "wizuawxh": [189, 191, 192, 193, 194, 195], "py3": [189, 191, 192, 193, 194, 195, 196, 197], "lib": [189, 191, 192, 193, 194, 195, 196, 197], "site": [189, 191, 192, 193, 194, 195, 196, 197], "tqdm": [189, 191, 192, 193, 194, 195, 196, 197], "auto": [189, 191, 192, 193, 194, 195, 196, 197], "py": [189, 191, 192, 193, 194, 195, 196, 197], "21": [189, 190, 191, 192, 193, 194, 195, 196, 197], "tqdmwarn": [189, 191, 192, 193, 194, 195, 196, 197], "iprogress": [189, 191, 192, 193, 194, 195, 196, 197], "ipywidget": [189, 191, 192, 193, 194, 195, 196, 197], "readthedoc": [189, 191, 192, 193, 194, 195, 196, 197], "io": [189, 191, 192, 193, 194, 195, 196, 197], "en": [189, 191, 192, 193, 194, 195, 196, 197], "user_instal": [189, 191, 192, 193, 194, 195, 196, 197], "autonotebook": [189, 191, 192, 193, 194, 195, 196, 197], "notebook_tqdm": [189, 191, 192, 193, 194, 195, 196, 197], "2023": [189, 190, 191, 192, 193, 196, 197], "09": [189, 190, 191, 192, 193, 196, 197], "19": [189, 191, 192, 193, 194, 196, 197], "11": [189, 191, 192, 193, 194, 197, 200], "53": [189, 191, 197], "433": 189, "readi": [189, 190, 192, 193, 196, 197], "39": [189, 190, 191, 192, 193, 194, 196, 197], "admissiondrug": 189, "admissiondx": 189, "allergi": 189, "apacheapsvar": 189, "apachepatientresult": 189, "apachepredvar": 189, "careplancareprovid": 189, "careplaneol": 189, "careplangener": 189, "careplango": 189, "careplaninfectiousdiseas": 189, "customlab": 189, "infusiondrug": 189, "intakeoutput": 189, "microlab": 189, "nurseassess": 189, "nursecar": 189, "nursechart": 189, "pasthistori": 189, "physicalexam": 189, "respiratorycar": 189, "respiratorychart": 189, "treatment": 189, "vitalaperiod": 189, "vitalperiod": 189, "hospitaldischargeyear": 189, "len": [189, 190, 191, 192, 193, 194, 196, 197], "22": [189, 190, 191, 197], "326": 189, "successfulli": [189, 190, 192, 193, 196, 197], "328": 189, "profil": [189, 190, 191, 192, 193, 196, 197], "finish": [189, 190, 192, 193, 196, 197], "run_queri": [189, 190, 192, 193, 196, 197], "047050": 189, "patient_diagnos": 189, "patientunitstayid": 189, "445": 189, "447": 189, "080990": 189, "teachingstatu": 189, "hospitalid": 189, "labnam": 189, "patient_lab": [189, 192], "524": 189, "526": 189, "044216": 189, "drugnam": 189, "patient_med": 189, "750": 189, "751": 189, "182703": 189, "hpc": 190, "ca": 190, "delirium_v3_0_0": 190, "17": [190, 191, 197], "267": 190, "information_schema": [190, 193, 196], "sql_implementation_info": 190, "sql_part": 190, "sql_size": 190, "sql_featur": 190, "public": [190, 193, 196], "ip_administr": 190, "derived_vari": 190, "intervent": 190, "er_administr": 190, "pharmaci": 190, "ip_scu": 190, "lookup_ip_administr": 190, "lookup_ccsr": 190, "lookup_er_administr": 190, "blood_transfus": 190, "lookup_ip_scu": 190, "lookup_diagnosi": 190, "lookup_room_transf": 190, "lookup_imag": 190, "encounters_qi": 190, "365": 190, "366": 190, "825447": 190, "189606": 190, "04": [190, 191], "get_interfac": 190, "372": 190, "373": 190, "992901": 190, "17071": 190, "hospital_id": 190, "encounters_per_site_qi": 190, "encounters_per_sit": 190, "181": 190, "182": 190, "800708": 190, "encounter_op": 190, "lab_op": 190, "sample_collection_date_tim": 190, "lab_test_name_map": 190, "lab_qi": 190, "joinarg": 190, "genc_id": 190, "sodium_test": 190, "59": [190, 193, 194], "972": 190, "973": 190, "37": [190, 191, 195, 197], "740935": 190, "6053": 190, "showcas": [191, 196, 197, 200], "formul": [191, 197], "o": [191, 194, 197], "shutil": [191, 194, 197], "pathlib": [191, 194, 197], "px": [191, 194, 197], "dateutil": [191, 194, 197], "relativedelta": [191, 194, 197], "kaggle_api_extend": 191, "kaggleapi": 191, "imput": [191, 197], "simpleimput": [191, 197], "pipelin": [191, 197], "minmaxscal": [191, 197], "onehotencod": [191, 197], "e402": [191, 194, 197], "catalog": [191, 197], "create_model": [191, 197], "tabularfeatur": [191, 197], "classificationplott": [191, 194, 197], "flatten_results_dict": [191, 197], "get_metrics_trend": [191, 194, 197], "load_datafram": 191, "offer": [191, 194, 197], "through": [191, 194, 197], "technic": [191, 194, 197], "architectur": [191, 194, 197], "involv": [191, 194, 197], "subpopul": [191, 194, 197], "explaina": [191, 194, 197], "go": [191, 194, 197], "tool": [191, 194, 197], "progress": [191, 194, 197], "subject": [191, 194, 197], "data_dir": [191, 194], "random_se": [191, 197], "train_siz": [191, 197], "com": [191, 194], "Then": 191, "trigger": 191, "download": 191, "credenti": 191, "locat": [191, 196], "machin": [191, 194], "authent": 191, "dataset_download_fil": 191, "fedesoriano": 191, "unzip": 191, "df": 191, "reset_index": [191, 197], "34": [191, 197], "412": 191, "chestpaintyp": 191, "restingbp": 191, "cholesterol": 191, "fastingb": 191, "restingecg": 191, "40": [191, 197], "ata": 191, "140": 191, "289": 191, "49": [191, 194, 197], "nap": 191, "160": 191, "180": 191, "130": 191, "283": 191, "st": 191, "48": [191, 193, 197], "asi": 191, "138": 191, "214": 191, "54": [191, 192, 194], "150": 191, "195": 191, "913": 191, "ta": 191, "110": 191, "264": 191, "914": 191, "68": 191, "144": 191, "193": 191, "915": 191, "57": [191, 193], "131": 191, "916": 191, "236": [191, 197], "lvh": 191, "917": 191, "38": [191, 194, 196, 197], "175": 191, "maxhr": 191, "exerciseangina": 191, "oldpeak": 191, "st_slope": 191, "heartdiseas": 191, "172": 191, "156": 191, "flat": 191, "98": 191, "108": 191, "122": 191, "132": 191, "141": 191, "115": 191, "174": 191, "173": 191, "918": 191, "13": [191, 194, 196, 197], "pie": [191, 194, 197], "update_layout": [191, 194, 197], "histogram": [191, 194, 197], "xaxis_titl": [191, 194, 197], "yaxis_titl": [191, 194, 197], "bargap": [191, 194, 197], "astyp": [191, 197], "update_trac": [191, 194, 197], "textinfo": [191, 197], "percent": [191, 197], "title_text": [191, 197], "hovertempl": [191, 197], "br": [191, 197], "class_count": [191, 197], "value_count": [191, 196, 197], "class_ratio": [191, 197], "8070866141732284": 191, "14": [191, 194, 197, 200], "wa": [191, 194, 197], "li": 191, "et": 191, "al": 191, "features_list": [191, 197], "help": [191, 194, 197], "essenti": [191, 197], "step": [191, 197], "understand": [191, 197], "u": [191, 197], "16": [191, 194, 197], "tab_featur": [191, 197], "ordin": 191, "might": [191, 197], "numeric_transform": [191, 197], "scaler": [191, 197], "binary_transform": [191, 197], "most_frequ": [191, 197], "18": [191, 195, 197], "numeric_featur": [191, 197], "features_by_typ": [191, 197], "numeric_indic": [191, 197], "get_loc": [191, 197], "binary_featur": [191, 197], "ordinal_featur": 191, "binary_indic": [191, 197], "ordinal_indic": 191, "num": [191, 197], "onehot": [191, 197], "handle_unknown": [191, 197], "ignor": [191, 197], "remaind": [191, 197], "passthrough": [191, 197], "let": [191, 197], "done": [191, 197], "independ": 191, "everi": 191, "uci": 191, "archiv": 191, "ic": 191, "edu": 191, "cleandoc": 191, "misc": 191, "cc0": 191, "demograph": [191, 194], "often": 191, "strong": 191, "correl": 191, "older": [191, 197], "higher": 191, "power": [191, 197], "easi": [191, 197], "compat": [191, 197], "from_panda": [191, 197], "cleanup_cache_fil": [191, 197], "num_row": 191, "cast_column": [191, 197], "stratify_by_column": [191, 197], "seed": [191, 197], "lt": [191, 193, 194, 195, 197], "91364": 191, "43": [191, 197], "straightforward": [191, 197], "maintain": [191, 197], "sgd": [191, 197], "logisit": [191, 197], "regress": [191, 197], "sgdclassif": [191, 197], "24": [191, 197], "sgd_classifi": 191, "123": [191, 197], "verbos": [191, 197], "class_weight": 191, "mortalitypredict": [191, 197], "encapsul": [191, 197], "cohes": [191, 197], "structur": [191, 197], "smooth": [191, 197], "manag": [191, 197], "mortality_task": 191, "26": [191, 197], "best": [191, 197], "hyperparamet": [191, 197], "grid": [191, 197], "27": [191, 193, 197], "alpha": 191, "0001": 191, "001": 191, "learning_r": [191, 197], "invscal": 191, "adapt": 191, "eta0": 191, "roc_auc": 191, "44": [191, 196, 197], "533": 191, "wrapper": [191, 194, 197, 199], "sk_model": [191, 197], "534": 191, "536": 191, "sgdclassifi": 191, "x27": [191, 197], "early_stop": 191, "loss": 191, "log_loss": 191, "rerun": [191, 197], "cell": [191, 197], "trust": [191, 197], "On": [191, 194, 197], "github": [191, 194, 197], "unabl": [191, 197], "render": [191, 197], "try": [191, 197], "page": [191, 197], "nbviewer": [191, 197], "sgdclassifiersgdclassifi": 191, "28": [191, 193, 194, 197], "model_param": [191, 197], "epsilon": 191, "fit_intercept": 191, "l1_ratio": 191, "max_it": 191, "n_iter_no_chang": 191, "n_job": [191, 197], "penalti": 191, "l2": 191, "power_t": 191, "tol": 191, "validation_fract": 191, "warm_start": 191, "29": [191, 195, 197], "30": [191, 193, 194, 197, 200], "y_pred": [191, 197], "only_predict": [191, 197], "184": [191, 192, 197], "3338": 191, "variou": [191, 197], "perspect": [191, 197], "metric_collect": [191, 197], "70": [191, 194], "33": [191, 196, 197], "fnr": [191, 194, 197], "ber": [191, 197], "fairness_metric_collect": [191, 197], "dataset_with_pr": [191, 197], "3874": 191, "5932": 191, "50967": 191, "gt": [191, 193, 194, 197], "12838": 191, "99": 191, "13751": 191, "82": [191, 193], "13552": 191, "12870": 191, "6763": 191, "41": [191, 197], "9881": 191, "46": [191, 197], "right": [191, 197], "36": [191, 195, 197], "results_flat": [191, 194, 197], "remove_metr": [191, 197], "796875": 191, "8260869565217391": 191, "6785714285714286": 191, "7450980392156863": 191, "8819444444444444": 191, "8623853211009175": 191, "8676470588235294": 191, "9076923076923077": 191, "8872180451127819": 191, "927972027972028": 191, "842391304347826": 191, "8686868686868687": 191, "8431372549019608": [191, 197], "8557213930348259": 191, "9152319464371114": 191, "plw2901": [191, 194, 197], "plotter": [191, 194, 195, 197], "class_nam": [191, 197], "set_templ": [191, 194, 197], "plotly_whit": [191, 194, 197], "slice_result": [191, 194, 197], "dict_kei": [191, 197], "roc_plot": [191, 197], "roc_curve_comparison": [191, 197], "overall_perform": [191, 197], "metric_valu": [191, 197], "overall_performance_plot": [191, 197], "metrics_valu": [191, 197], "slice_metr": [191, 197], "slice_metrics_plot": [191, 197], "metrics_comparison_bar": [191, 197], "comparison": [191, 197], "reform": [191, 197], "fairness_result": [191, 197], "deepcopi": [191, 197], "fairness_metr": [191, 197], "group_siz": [191, 197], "fairness_plot": [191, 197], "metrics_comparison_scatt": [191, 197], "leverag": [191, 194, 197], "histor": [191, 194, 197], "gather": [191, 194, 197], "merg": [191, 194, 197], "wish": [191, 194, 197], "metrics_trend": [191, 194, 197], "integr": [191, 194, 197], "purpos": [191, 194, 197], "three": [191, 194, 197], "dummi": [191, 194, 197], "demonstr": [191, 194, 197, 200], "trend": [191, 194, 197], "47": [191, 195, 197], "dummy_report_num": [191, 194, 197], "dummy_report_dir": [191, 194, 197], "getcwd": [191, 194, 197], "dummy_report": [191, 194, 197], "simul": [191, 194, 197], "uniform": [191, 194, 197], "dummy_result": [191, 194, 197], "max": [191, 194, 197], "folder": [191, 194, 197], "dummy_report_path": [191, 194, 197], "date_dir": [191, 194, 197], "dummy_d": [191, 194, 197], "todai": [191, 194, 197], "new_dir": [191, 194, 197], "rmtree": [191, 194, 197], "previou": [191, 194, 197], "report_directori": [191, 194, 197], "flat_result": [191, 194, 197], "trends_plot": [191, 194, 197], "audienc": [191, 197], "organ": [191, 197], "store": [191, 197], "regulatory_requir": [191, 197], "releas": [191, 196, 197], "team": [191, 197], "vectorinstitut": [191, 197], "linear_model": 191, "next": [191, 197], "use_cas": [191, 197], "These": [191, 197], "fairness_assess": [191, 197], "well": [191, 194, 197], "taken": [191, 197], "ethical_consider": [191, 197], "51": [191, 193, 195, 197], "clinician": [191, 197], "engin": [191, 197], "improv": [191, 197], "bias": [191, 194, 197], "lead": [191, 197], "wors": [191, 197], "retrain": [191, 197], "below": [191, 197], "By": [191, 197], "52": [191, 197], "report_path": [191, 194, 197], "view": [191, 194, 197, 200], "684": 192, "expire_flag": 192, "07": 192, "185": 192, "040679": 192, "patient_admiss": [192, 193], "long_titl": [192, 193], "patient_admissions_diagnos": [192, 193], "hadm_id": [192, 193], "320": 192, "322": 192, "092566": 192, "394": 192, "395": 192, "033839": 192, "chartevents_op": 192, "dbsourc": 192, "chart_ev": [192, 193], "patient_chart_ev": 192, "55": [192, 193], "008": 192, "009": 192, "72": [192, 197], "572162": 192, "v2": [193, 196], "354": 193, "fhir_etl": 193, "fhir_trm": 193, "mimic_fhir": 193, "mimiciv_deriv": 193, "mimiciv_": 193, "mimiciv_hosp": 193, "mimiciv_icu": 193, "mimiciv_not": 193, "admittim": 193, "dischtim": 193, "anchor_year_differ": 193, "706": 193, "708": 193, "185185": 193, "diagnoses_op": 193, "icd_vers": 193, "558": 193, "559": 193, "808913": 193, "r": 193, "204": 193, "206": 193, "522780": 193, "categori": [193, 197], "patient_admissions_vit": 193, "56": 193, "772": 193, "773": 193, "78": 193, "522199": 193, "patient_admissions_lab": 193, "959": 193, "63": 193, "164890": 193, "radiology_not": 193, "radiology_notes_op": 193, "patient_admissions_radiology_not": 193, "170": 193, "171": 193, "190787": 193, "npartit": 193, "554": 193, "555": 193, "345205": 193, "35639": 193, "core": 193, "58": [193, 197], "513": 193, "514": 193, "007597": 193, "torchxrayvis": [194, 195], "functool": 194, "graph_object": [194, 197], "lambdad": [194, 195], "resiz": [194, 195], "densenet": [194, 195], "loader": [194, 195], "load_nihcxr": [194, 195], "apply_transform": 194, "get_devic": 194, "devic": 194, "clinical_dataset": [194, 195], "nih_d": [194, 195], "4000": 194, "spatial_s": [194, 195], "224": [194, 195], "allow_missing_kei": [194, 195], "1024": [194, 195], "newaxi": [194, 195], "densenet121": [194, 195], "res224": [194, 195], "150252": 194, "2511": 194, "3473": 194, "62": 194, "int64": [194, 196], "originalimag": 194, "width": [194, 197], "height": [194, 197], "originalimagepixelspac": 194, "unnam": 194, "float32": 194, "__index_level_0__": 194, "arang": 194, "nih_eval_results_gend": 194, "scatter": 194, "mode": 194, "marker": 194, "perf_metric_gend": 194, "title_x": 194, "title_font_s": 194, "768": 194, "selector": 194, "59114": 194, "53050": 194, "74": [194, 197], "58134": 194, "65": [194, 195], "nih_eval_results_ag": 194, "perf_metric_ag": 194, "29437": 194, "27340": 194, "81": 194, "61199": 194, "62306": 194, "showlegend": 194, "bar": [194, 197], "balanced_error_r": 194, "nih_fairness_result_ag": 194, "balancederrorr": 194, "fairness_ag": 194, "55072": 194, "57591": 194, "57644": 194, "fairness_age_par": 194, "slice_": 194, "itr": 194, "enumer": 194, "dummy_reports_cxr": 194, "112": [194, 200], "120": [194, 200], "frontal": [194, 200], "805": [194, 200], "fourteen": 194, "mine": 194, "radiolog": 194, "pleural": 194, "thicken": 194, "80": [194, 197], "remain": 194, "arxiv": 194, "ab": 194, "2111": 194, "00595": 194, "inproceed": 194, "cohen2022xrv": 194, "cohen": 194, "joseph": 194, "paul": 194, "viviano": 194, "bertin": 194, "morrison": 194, "torabian": 194, "parsa": 194, "guarrera": 194, "matteo": 194, "lungren": 194, "matthew": 194, "chaudhari": 194, "akshai": 194, "brook": 194, "rupert": 194, "hashir": 194, "mohammad": 194, "bertrand": 194, "hadrien": 194, "booktitl": 194, "deep": 194, "mlmed": 194, "arxivid": 194, "cohen2020limit": 194, "cross": 194, "domain": [194, 196], "autom": [194, 197], "2002": 194, "02497": 194, "medicin": 194, "radiologist": 194, "scientist": 194, "inabl": 194, "addition": 194, "poor": 194, "qualiti": 194, "artifact": 194, "geograph": 194, "region": 194, "ethic": 194, "ensur": 194, "divers": 194, "regularli": 194, "human": 194, "expertis": 194, "address": 194, "rare": 194, "qualit": 194, "detector": 195, "reductor": 195, "tstester": 195, "plot_drift_experi": 195, "plot_drift_timeseri": 195, "shifter": 195, "source_d": 195, "target_d": 195, "25596": 195, "73402": 195, "dr_method": 195, "bbse": 195, "soft": 195, "txrv": 195, "ae": 195, "sensitivity_test": 195, "tester": 195, "tester_method": 195, "source_sample_s": 195, "target_sample_s": 195, "num_run": 195, "detect_shift": 195, "chexpert": 195, "chex": 195, "padchest": 195, "pc": 195, "source_slic": 195, "target_slic": 195, "52946": 195, "45612": 195, "79": 195, "44947": 195, "51343": 195, "43851": 195, "48921": 195, "93": [195, 197], "48889": 195, "47420": 195, "rolling_window_drift": 195, "timestamp_column": 195, "window_s": 195, "4w": 195, "etl": [196, 197], "hous": 196, "synthea_integration_test": 196, "cdm_synthea10": 196, "mhx6ujw0": [196, 197], "882": 196, "observation_period": 196, "condition_occurr": 196, "drug_exposur": 196, "procedure_occurr": 196, "device_exposur": 196, "death": 196, "note_nlp": 196, "specimen": 196, "fact_relationship": 196, "care_sit": 196, "payer_plan_period": 196, "cost": 196, "drug_era": 196, "dose_era": 196, "condition_era": 196, "episod": 196, "episode_ev": 196, "cdm_sourc": 196, "vocabulari": 196, "concept_class": 196, "concept_relationship": 196, "relationship": 196, "concept_synonym": 196, "concept_ancestor": 196, "source_to_concept_map": 196, "drug_strength": 196, "cohort": [196, 197], "cohort_definit": 196, "source_to_standard_vocab_map": 196, "source_to_source_vocab_map": 196, "all_visit": 196, "assign_all_visit_id": 196, "final_visit_id": 196, "visit_start_d": 196, "to_datetim": 196, "dt": 196, "sort_index": 196, "614": 196, "615": 196, "101939": 196, "2011": 196, "2012": 196, "2013": 196, "2017": 196, "2018": 196, "visits_measur": 196, "visit_occurrence_id": 196, "746": 196, "747": 196, "062469": 196, "repo": 196, "853": 196, "visits_concept_map": 196, "discharge_to_concept_id": 196, "admitting_concept_id": 196, "visits_concept_mapped_di": 196, "discharge_to_concept_nam": 196, "di": 196, "563": 196, "564": 196, "444780": 196, "5815": 196, "gender_concept_nam": 196, "person_visit": 196, "person_visits_condit": 196, "person_visits_conditions_measur": 196, "condition_concept_id": 196, "condition_concept_nam": 196, "304": 196, "305": 196, "518226": 196, "measurement_concept_nam": 196, "bodi": 196, "temperatur": 196, "longer": 197, "v3": 197, "num_dai": 197, "synthea_demo": 197, "def": 197, "get_encount": 197, "nativ": 197, "patient_id": 197, "birthdat": 197, "race": 197, "ethnic": 197, "patient_encount": 197, "encounter_id": 197, "start_year": 197, "birthdate_year": 197, "lo": 197, "get_observ": 197, "groupby_op": 197, "n_ob": 197, "observations_count": 197, "observations_stat": 197, "pivot_t": 197, "add_prefix": 197, "obs_": 197, "get_med": 197, "n_med": 197, "get_procedur": 197, "procedur": [197, 200], "n_procedur": 197, "cohort_queri": 197, "to_merg": 197, "to_merge_df": 197, "770": 197, "183": 197, "747566": 197, "235": 197, "051169": 197, "984": 197, "986": 197, "600435": 197, "837": 197, "838": 197, "849869": 197, "945": 197, "946": 197, "106636": 197, "payer": 197, "encounterclass": 197, "base_encounter_cost": 197, "total_claim_cost": 197, "payer_coverag": 197, "reasoncod": 197, "reasondescript": 197, "null_count": 197, "isnul": 197, "600": 197, "respect": 197, "larger": 197, "thresh_nan": 197, "dropna": 197, "thresh": 197, "length_of_stai": 197, "length_of_stay_count": 197, "length_of_stay_kei": 197, "5573997233748271": 197, "obs_alanin": 197, "aminotransferas": 197, "enzymat": 197, "volum": 197, "serum": 197, "plasma": 197, "obs_albumin": 197, "obs_alkalin": 197, "phosphatas": 197, "obs_aspart": 197, "obs_bilirubin": 197, "obs_bodi": 197, "obs_calcium": 197, "obs_carbon": 197, "dioxid": 197, "mole": 197, "obs_chlorid": 197, "obs_creatinin": 197, "obs_diastol": 197, "blood": 197, "pressur": 197, "obs_erythrocyt": 197, "obs_ferritin": 197, "obs_glomerular": 197, "filtrat": 197, "73": 197, "sq": 197, "obs_glucos": 197, "obs_hematocrit": 197, "obs_hemoglobin": 197, "obs_leukocyt": 197, "obs_mch": 197, "entit": 197, "obs_mchc": 197, "obs_mcv": 197, "obs_oxygen": 197, "satur": 197, "arteri": 197, "obs_platelet": 197, "obs_potassium": 197, "obs_protein": 197, "obs_sodium": 197, "obs_systol": 197, "obs_troponin": 197, "cardiac": 197, "obs_urea": 197, "nitrogen": 197, "1126": 197, "78702": 197, "61": 197, "sllearn": 197, "xgb_classifi": 197, "los_task": 197, "n_estim": 197, "250": 197, "500": 197, "max_depth": 197, "reg_lambda": 197, "colsample_bytre": 197, "gamma": 197, "089": 197, "090": 197, "091": 197, "092": 197, "xgbclassifi": 197, "base_scor": 197, "booster": 197, "callback": 197, "colsample_bylevel": 197, "colsample_bynod": 197, "early_stopping_round": 197, "enable_categor": 197, "eval_metr": 197, "logloss": 197, "feature_typ": 197, "gpu_id": 197, "grow_polici": 197, "importance_typ": 197, "interaction_constraint": 197, "max_bin": 197, "max_cat_threshold": 197, "max_cat_to_onehot": 197, "max_delta_step": 197, "max_leav": 197, "min_child_weight": 197, "miss": 197, "monotone_constraint": 197, "num_parallel_tre": 197, "predictor": 197, "xgbclassifierxgbclassifi": 197, "logist": 197, "use_label_encod": 197, "reg_alpha": 197, "sampling_method": 197, "scale_pos_weight": 197, "subsampl": 197, "tree_method": 197, "validate_paramet": 197, "226": 197, "4225": 197, "3955": 197, "3405": 197, "97": 197, "61644": 197, "84": 197, "7623": 197, "92": 197, "8858": 197, "8779": 197, "9013": 197, "9245": 197, "amp": 197, "8468": 197, "8760": 197, "91": 197, "8900": 197, "8499": 197, "8477": 197, "96": 197, "8697": 197, "9203539823008849": 197, "8636363636363636": 197, "926829268292683": 197, "9753384912959381": 197, "8571428571428571": 197, "782608695652174": 197, "8181818181818182": 197, "9541925465838509": 197, "9032258064516129": 197, "9859154929577465": 197, "8641975308641975": 197, "9210526315789473": 197, "9732988802756244": 197, "9117647058823529": 197, "9508196721311475": 197, "90625": 197, "928": 197, "9794407894736842": 197, "9070796460176991": 197, "9696969696969697": 197, "8827586206896552": 197, "924187725631769": 197, "9760749255002128": 197, "xgboost": 197, "python_api": 197, "statist": 198, "commun": 199, "around": 199, "goal": 200}, "objects": {"cyclops": [[182, 0, 0, "-", "data"], [183, 0, 0, "-", "evaluate"], [184, 0, 0, "-", "monitor"], [185, 0, 0, "-", "query"], [186, 0, 0, "-", "report"], [187, 0, 0, "-", "tasks"]], "cyclops.data": [[182, 0, 0, "-", "features"], [6, 0, 0, "-", "slicer"]], "cyclops.data.features": [[4, 0, 0, "-", "medical_image"]], "cyclops.data.features.medical_image": [[5, 1, 1, "", "MedicalImage"]], "cyclops.data.features.medical_image.MedicalImage": [[5, 2, 1, "", "__call__"], [5, 2, 1, "", "cast_storage"], [5, 2, 1, "", "decode_example"], [5, 2, 1, "", "embed_storage"], [5, 2, 1, "", "encode_example"], [5, 2, 1, "", "flatten"]], "cyclops.data.slicer": [[7, 1, 1, "", "SliceSpec"], [8, 4, 1, "", "compound_filter"], [9, 4, 1, "", "filter_datetime"], [10, 4, 1, "", "filter_non_null"], [11, 4, 1, "", "filter_range"], [12, 4, 1, "", "filter_string_contains"], [13, 4, 1, "", "filter_value"], [14, 4, 1, "", "is_datetime"], [15, 4, 1, "", "overall"]], "cyclops.data.slicer.SliceSpec": [[7, 3, 1, "", "_registry"], [7, 2, 1, "", "add_slice_spec"], [7, 3, 1, "", "column_names"], [7, 2, 1, "", "get_slices"], [7, 3, 1, "", "include_overall"], [7, 2, 1, "", "slices"], [7, 3, 1, "", "spec_list"], [7, 3, 1, "", "validate"]], "cyclops.evaluate": [[16, 0, 0, "-", "evaluator"], [183, 0, 0, "-", "fairness"], [183, 0, 0, "-", "metrics"]], "cyclops.evaluate.evaluator": [[17, 4, 1, "", "evaluate"]], "cyclops.evaluate.fairness": [[18, 0, 0, "-", "config"], [20, 0, 0, "-", "evaluator"]], "cyclops.evaluate.fairness.config": [[19, 1, 1, "", "FairnessConfig"]], "cyclops.evaluate.fairness.evaluator": [[21, 4, 1, "", "evaluate_fairness"], [22, 4, 1, "", "warn_too_many_unique_values"]], "cyclops.evaluate.metrics": [[23, 0, 0, "-", "accuracy"], [28, 0, 0, "-", "auroc"], [33, 0, 0, "-", "f_beta"], [42, 0, 0, "-", "factory"], [183, 0, 0, "-", "functional"], [73, 0, 0, "-", "metric"], [77, 0, 0, "-", "precision_recall"], [86, 0, 0, "-", "precision_recall_curve"], [91, 0, 0, "-", "roc"], [96, 0, 0, "-", "sensitivity"], [101, 0, 0, "-", "specificity"], [106, 0, 0, "-", "stat_scores"]], "cyclops.evaluate.metrics.accuracy": [[24, 1, 1, "", "Accuracy"], [25, 1, 1, "", "BinaryAccuracy"], [26, 1, 1, "", "MulticlassAccuracy"], [27, 1, 1, "", "MultilabelAccuracy"]], "cyclops.evaluate.metrics.accuracy.Accuracy": [[24, 2, 1, "", "__add__"], [24, 2, 1, "", "__call__"], [24, 2, 1, "", "__init__"], [24, 2, 1, "", "__mul__"], [24, 2, 1, "", "add_state"], [24, 2, 1, "", "clone"], [24, 2, 1, "", "compute"], [24, 2, 1, "", "reset_state"], [24, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.BinaryAccuracy": [[25, 2, 1, "", "__add__"], [25, 2, 1, "", "__call__"], [25, 2, 1, "", "__init__"], [25, 2, 1, "", "__mul__"], [25, 2, 1, "", "add_state"], [25, 2, 1, "", "clone"], [25, 2, 1, "", "compute"], [25, 2, 1, "", "reset_state"], [25, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy": [[26, 2, 1, "", "__add__"], [26, 2, 1, "", "__call__"], [26, 2, 1, "", "__init__"], [26, 2, 1, "", "__mul__"], [26, 2, 1, "", "add_state"], [26, 2, 1, "", "clone"], [26, 2, 1, "", "compute"], [26, 2, 1, "", "reset_state"], [26, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy": [[27, 2, 1, "", "__add__"], [27, 2, 1, "", "__call__"], [27, 2, 1, "", "__init__"], [27, 2, 1, "", "__mul__"], [27, 2, 1, "", "add_state"], [27, 2, 1, "", "clone"], [27, 2, 1, "", "compute"], [27, 2, 1, "", "reset_state"], [27, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc": [[29, 1, 1, "", "AUROC"], [30, 1, 1, "", "BinaryAUROC"], [31, 1, 1, "", "MulticlassAUROC"], [32, 1, 1, "", "MultilabelAUROC"]], "cyclops.evaluate.metrics.auroc.AUROC": [[29, 2, 1, "", "__add__"], [29, 2, 1, "", "__call__"], [29, 2, 1, "", "__init__"], [29, 2, 1, "", "__mul__"], [29, 2, 1, "", "add_state"], [29, 2, 1, "", "clone"], [29, 2, 1, "", "compute"], [29, 2, 1, "", "reset_state"], [29, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.BinaryAUROC": [[30, 2, 1, "", "__add__"], [30, 2, 1, "", "__call__"], [30, 2, 1, "", "__init__"], [30, 2, 1, "", "__mul__"], [30, 2, 1, "", "add_state"], [30, 2, 1, "", "clone"], [30, 2, 1, "", "compute"], [30, 2, 1, "", "reset_state"], [30, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.MulticlassAUROC": [[31, 2, 1, "", "__add__"], [31, 2, 1, "", "__call__"], [31, 2, 1, "", "__init__"], [31, 2, 1, "", "__mul__"], [31, 2, 1, "", "add_state"], [31, 2, 1, "", "clone"], [31, 2, 1, "", "compute"], [31, 2, 1, "", "reset_state"], [31, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.auroc.MultilabelAUROC": [[32, 2, 1, "", "__add__"], [32, 2, 1, "", "__call__"], [32, 2, 1, "", "__init__"], [32, 2, 1, "", "__mul__"], [32, 2, 1, "", "add_state"], [32, 2, 1, "", "clone"], [32, 2, 1, "", "compute"], [32, 2, 1, "", "reset_state"], [32, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta": [[34, 1, 1, "", "BinaryF1Score"], [35, 1, 1, "", "BinaryFbetaScore"], [36, 1, 1, "", "F1Score"], [37, 1, 1, "", "FbetaScore"], [38, 1, 1, "", "MulticlassF1Score"], [39, 1, 1, "", "MulticlassFbetaScore"], [40, 1, 1, "", "MultilabelF1Score"], [41, 1, 1, "", "MultilabelFbetaScore"]], "cyclops.evaluate.metrics.f_beta.BinaryF1Score": [[34, 2, 1, "", "__add__"], [34, 2, 1, "", "__call__"], [34, 2, 1, "", "__init__"], [34, 2, 1, "", "__mul__"], [34, 2, 1, "", "add_state"], [34, 2, 1, "", "clone"], [34, 2, 1, "", "compute"], [34, 2, 1, "", "reset_state"], [34, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore": [[35, 2, 1, "", "__add__"], [35, 2, 1, "", "__call__"], [35, 2, 1, "", "__init__"], [35, 2, 1, "", "__mul__"], [35, 2, 1, "", "add_state"], [35, 2, 1, "", "clone"], [35, 2, 1, "", "compute"], [35, 2, 1, "", "reset_state"], [35, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.F1Score": [[36, 2, 1, "", "__add__"], [36, 2, 1, "", "__call__"], [36, 2, 1, "", "__init__"], [36, 2, 1, "", "__mul__"], [36, 2, 1, "", "add_state"], [36, 2, 1, "", "clone"], [36, 2, 1, "", "compute"], [36, 2, 1, "", "reset_state"], [36, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.FbetaScore": [[37, 2, 1, "", "__add__"], [37, 2, 1, "", "__call__"], [37, 2, 1, "", "__init__"], [37, 2, 1, "", "__mul__"], [37, 2, 1, "", "add_state"], [37, 2, 1, "", "clone"], [37, 2, 1, "", "compute"], [37, 2, 1, "", "reset_state"], [37, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MulticlassF1Score": [[38, 2, 1, "", "__add__"], [38, 2, 1, "", "__call__"], [38, 2, 1, "", "__init__"], [38, 2, 1, "", "__mul__"], [38, 2, 1, "", "add_state"], [38, 2, 1, "", "clone"], [38, 2, 1, "", "compute"], [38, 2, 1, "", "reset_state"], [38, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore": [[39, 2, 1, "", "__add__"], [39, 2, 1, "", "__call__"], [39, 2, 1, "", "__init__"], [39, 2, 1, "", "__mul__"], [39, 2, 1, "", "add_state"], [39, 2, 1, "", "clone"], [39, 2, 1, "", "compute"], [39, 2, 1, "", "reset_state"], [39, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MultilabelF1Score": [[40, 2, 1, "", "__add__"], [40, 2, 1, "", "__call__"], [40, 2, 1, "", "__init__"], [40, 2, 1, "", "__mul__"], [40, 2, 1, "", "add_state"], [40, 2, 1, "", "clone"], [40, 2, 1, "", "compute"], [40, 2, 1, "", "reset_state"], [40, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore": [[41, 2, 1, "", "__add__"], [41, 2, 1, "", "__call__"], [41, 2, 1, "", "__init__"], [41, 2, 1, "", "__mul__"], [41, 2, 1, "", "add_state"], [41, 2, 1, "", "clone"], [41, 2, 1, "", "compute"], [41, 2, 1, "", "reset_state"], [41, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.factory": [[43, 4, 1, "", "create_metric"]], "cyclops.evaluate.metrics.functional": [[44, 0, 0, "-", "accuracy"], [45, 0, 0, "-", "auroc"], [46, 0, 0, "-", "f_beta"], [55, 0, 0, "-", "precision_recall"], [64, 0, 0, "-", "precision_recall_curve"], [65, 0, 0, "-", "roc"], [70, 0, 0, "-", "sensitivity"], [71, 0, 0, "-", "specificity"], [72, 0, 0, "-", "stat_scores"]], "cyclops.evaluate.metrics.functional.f_beta": [[47, 4, 1, "", "binary_f1_score"], [48, 4, 1, "", "binary_fbeta_score"], [49, 4, 1, "", "f1_score"], [50, 4, 1, "", "fbeta_score"], [51, 4, 1, "", "multiclass_f1_score"], [52, 4, 1, "", "multiclass_fbeta_score"], [53, 4, 1, "", "multilabel_f1_score"], [54, 4, 1, "", "multilabel_fbeta_score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[56, 4, 1, "", "binary_precision"], [57, 4, 1, "", "binary_recall"], [58, 4, 1, "", "multiclass_precision"], [59, 4, 1, "", "multiclass_recall"], [60, 4, 1, "", "multilabel_precision"], [61, 4, 1, "", "multilabel_recall"], [62, 4, 1, "", "precision"], [63, 4, 1, "", "recall"]], "cyclops.evaluate.metrics.functional.roc": [[66, 4, 1, "", "binary_roc_curve"], [67, 4, 1, "", "multiclass_roc_curve"], [68, 4, 1, "", "multilabel_roc_curve"], [69, 4, 1, "", "roc_curve"]], "cyclops.evaluate.metrics.metric": [[74, 1, 1, "", "Metric"], [75, 1, 1, "", "MetricCollection"], [76, 1, 1, "", "OperatorMetric"]], "cyclops.evaluate.metrics.metric.Metric": [[74, 2, 1, "", "__add__"], [74, 2, 1, "", "__call__"], [74, 2, 1, "", "__init__"], [74, 2, 1, "", "__mul__"], [74, 2, 1, "", "add_state"], [74, 2, 1, "", "clone"], [74, 2, 1, "", "compute"], [74, 2, 1, "", "reset_state"], [74, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.metric.MetricCollection": [[75, 2, 1, "", "__call__"], [75, 2, 1, "", "__init__"], [75, 2, 1, "", "add_metrics"], [75, 2, 1, "", "clear"], [75, 2, 1, "", "clone"], [75, 2, 1, "", "compute"], [75, 2, 1, "", "get"], [75, 2, 1, "", "items"], [75, 2, 1, "", "keys"], [75, 2, 1, "", "pop"], [75, 2, 1, "", "popitem"], [75, 2, 1, "", "reset_state"], [75, 2, 1, "", "setdefault"], [75, 2, 1, "", "update"], [75, 2, 1, "", "update_state"], [75, 2, 1, "", "values"]], "cyclops.evaluate.metrics.metric.OperatorMetric": [[76, 2, 1, "", "__add__"], [76, 2, 1, "", "__call__"], [76, 2, 1, "", "__init__"], [76, 2, 1, "", "__mul__"], [76, 2, 1, "", "add_state"], [76, 2, 1, "", "clone"], [76, 2, 1, "", "compute"], [76, 2, 1, "", "reset_state"], [76, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall": [[78, 1, 1, "", "BinaryPrecision"], [79, 1, 1, "", "BinaryRecall"], [80, 1, 1, "", "MulticlassPrecision"], [81, 1, 1, "", "MulticlassRecall"], [82, 1, 1, "", "MultilabelPrecision"], [83, 1, 1, "", "MultilabelRecall"], [84, 1, 1, "", "Precision"], [85, 1, 1, "", "Recall"]], "cyclops.evaluate.metrics.precision_recall.BinaryPrecision": [[78, 2, 1, "", "__add__"], [78, 2, 1, "", "__call__"], [78, 2, 1, "", "__init__"], [78, 2, 1, "", "__mul__"], [78, 2, 1, "", "add_state"], [78, 2, 1, "", "clone"], [78, 2, 1, "", "compute"], [78, 2, 1, "", "reset_state"], [78, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.BinaryRecall": [[79, 2, 1, "", "__add__"], [79, 2, 1, "", "__call__"], [79, 2, 1, "", "__init__"], [79, 2, 1, "", "__mul__"], [79, 2, 1, "", "add_state"], [79, 2, 1, "", "clone"], [79, 2, 1, "", "compute"], [79, 2, 1, "", "reset_state"], [79, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision": [[80, 2, 1, "", "__add__"], [80, 2, 1, "", "__call__"], [80, 2, 1, "", "__init__"], [80, 2, 1, "", "__mul__"], [80, 2, 1, "", "add_state"], [80, 2, 1, "", "clone"], [80, 2, 1, "", "compute"], [80, 2, 1, "", "reset_state"], [80, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MulticlassRecall": [[81, 2, 1, "", "__add__"], [81, 2, 1, "", "__call__"], [81, 2, 1, "", "__init__"], [81, 2, 1, "", "__mul__"], [81, 2, 1, "", "add_state"], [81, 2, 1, "", "clone"], [81, 2, 1, "", "compute"], [81, 2, 1, "", "reset_state"], [81, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision": [[82, 2, 1, "", "__add__"], [82, 2, 1, "", "__call__"], [82, 2, 1, "", "__init__"], [82, 2, 1, "", "__mul__"], [82, 2, 1, "", "add_state"], [82, 2, 1, "", "clone"], [82, 2, 1, "", "compute"], [82, 2, 1, "", "reset_state"], [82, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.MultilabelRecall": [[83, 2, 1, "", "__add__"], [83, 2, 1, "", "__call__"], [83, 2, 1, "", "__init__"], [83, 2, 1, "", "__mul__"], [83, 2, 1, "", "add_state"], [83, 2, 1, "", "clone"], [83, 2, 1, "", "compute"], [83, 2, 1, "", "reset_state"], [83, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.Precision": [[84, 2, 1, "", "__add__"], [84, 2, 1, "", "__call__"], [84, 2, 1, "", "__init__"], [84, 2, 1, "", "__mul__"], [84, 2, 1, "", "add_state"], [84, 2, 1, "", "clone"], [84, 2, 1, "", "compute"], [84, 2, 1, "", "reset_state"], [84, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall.Recall": [[85, 2, 1, "", "__add__"], [85, 2, 1, "", "__call__"], [85, 2, 1, "", "__init__"], [85, 2, 1, "", "__mul__"], [85, 2, 1, "", "add_state"], [85, 2, 1, "", "clone"], [85, 2, 1, "", "compute"], [85, 2, 1, "", "reset_state"], [85, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve": [[87, 1, 1, "", "BinaryPrecisionRecallCurve"], [88, 1, 1, "", "MulticlassPrecisionRecallCurve"], [89, 1, 1, "", "MultilabelPrecisionRecallCurve"], [90, 1, 1, "", "PrecisionRecallCurve"]], "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve": [[87, 2, 1, "", "__add__"], [87, 2, 1, "", "__call__"], [87, 2, 1, "", "__init__"], [87, 2, 1, "", "__mul__"], [87, 2, 1, "", "add_state"], [87, 2, 1, "", "clone"], [87, 2, 1, "", "compute"], [87, 2, 1, "", "reset_state"], [87, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve": [[88, 2, 1, "", "__add__"], [88, 2, 1, "", "__call__"], [88, 2, 1, "", "__init__"], [88, 2, 1, "", "__mul__"], [88, 2, 1, "", "add_state"], [88, 2, 1, "", "clone"], [88, 2, 1, "", "compute"], [88, 2, 1, "", "reset_state"], [88, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve": [[89, 2, 1, "", "__add__"], [89, 2, 1, "", "__call__"], [89, 2, 1, "", "__init__"], [89, 2, 1, "", "__mul__"], [89, 2, 1, "", "add_state"], [89, 2, 1, "", "clone"], [89, 2, 1, "", "compute"], [89, 2, 1, "", "reset_state"], [89, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve": [[90, 2, 1, "", "__add__"], [90, 2, 1, "", "__call__"], [90, 2, 1, "", "__init__"], [90, 2, 1, "", "__mul__"], [90, 2, 1, "", "add_state"], [90, 2, 1, "", "clone"], [90, 2, 1, "", "compute"], [90, 2, 1, "", "reset_state"], [90, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc": [[92, 1, 1, "", "BinaryROCCurve"], [93, 1, 1, "", "MulticlassROCCurve"], [94, 1, 1, "", "MultilabelROCCurve"], [95, 1, 1, "", "ROCCurve"]], "cyclops.evaluate.metrics.roc.BinaryROCCurve": [[92, 2, 1, "", "__add__"], [92, 2, 1, "", "__call__"], [92, 2, 1, "", "__init__"], [92, 2, 1, "", "__mul__"], [92, 2, 1, "", "add_state"], [92, 2, 1, "", "clone"], [92, 2, 1, "", "compute"], [92, 2, 1, "", "reset_state"], [92, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.MulticlassROCCurve": [[93, 2, 1, "", "__add__"], [93, 2, 1, "", "__call__"], [93, 2, 1, "", "__init__"], [93, 2, 1, "", "__mul__"], [93, 2, 1, "", "add_state"], [93, 2, 1, "", "clone"], [93, 2, 1, "", "compute"], [93, 2, 1, "", "reset_state"], [93, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.MultilabelROCCurve": [[94, 2, 1, "", "__add__"], [94, 2, 1, "", "__call__"], [94, 2, 1, "", "__init__"], [94, 2, 1, "", "__mul__"], [94, 2, 1, "", "add_state"], [94, 2, 1, "", "clone"], [94, 2, 1, "", "compute"], [94, 2, 1, "", "reset_state"], [94, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.roc.ROCCurve": [[95, 2, 1, "", "__add__"], [95, 2, 1, "", "__call__"], [95, 2, 1, "", "__init__"], [95, 2, 1, "", "__mul__"], [95, 2, 1, "", "add_state"], [95, 2, 1, "", "clone"], [95, 2, 1, "", "compute"], [95, 2, 1, "", "reset_state"], [95, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity": [[97, 1, 1, "", "BinarySensitivity"], [98, 1, 1, "", "MulticlassSensitivity"], [99, 1, 1, "", "MultilabelSensitivity"], [100, 1, 1, "", "Sensitivity"]], "cyclops.evaluate.metrics.sensitivity.BinarySensitivity": [[97, 2, 1, "", "__add__"], [97, 2, 1, "", "__call__"], [97, 2, 1, "", "__init__"], [97, 2, 1, "", "__mul__"], [97, 2, 1, "", "add_state"], [97, 2, 1, "", "clone"], [97, 2, 1, "", "compute"], [97, 2, 1, "", "reset_state"], [97, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity": [[98, 2, 1, "", "__add__"], [98, 2, 1, "", "__call__"], [98, 2, 1, "", "__init__"], [98, 2, 1, "", "__mul__"], [98, 2, 1, "", "add_state"], [98, 2, 1, "", "clone"], [98, 2, 1, "", "compute"], [98, 2, 1, "", "reset_state"], [98, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity": [[99, 2, 1, "", "__add__"], [99, 2, 1, "", "__call__"], [99, 2, 1, "", "__init__"], [99, 2, 1, "", "__mul__"], [99, 2, 1, "", "add_state"], [99, 2, 1, "", "clone"], [99, 2, 1, "", "compute"], [99, 2, 1, "", "reset_state"], [99, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.sensitivity.Sensitivity": [[100, 2, 1, "", "__add__"], [100, 2, 1, "", "__call__"], [100, 2, 1, "", "__init__"], [100, 2, 1, "", "__mul__"], [100, 2, 1, "", "add_state"], [100, 2, 1, "", "clone"], [100, 2, 1, "", "compute"], [100, 2, 1, "", "reset_state"], [100, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity": [[102, 1, 1, "", "BinarySpecificity"], [103, 1, 1, "", "MulticlassSpecificity"], [104, 1, 1, "", "MultilabelSpecificity"], [105, 1, 1, "", "Specificity"]], "cyclops.evaluate.metrics.specificity.BinarySpecificity": [[102, 2, 1, "", "__add__"], [102, 2, 1, "", "__call__"], [102, 2, 1, "", "__init__"], [102, 2, 1, "", "__mul__"], [102, 2, 1, "", "add_state"], [102, 2, 1, "", "clone"], [102, 2, 1, "", "compute"], [102, 2, 1, "", "reset_state"], [102, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.MulticlassSpecificity": [[103, 2, 1, "", "__add__"], [103, 2, 1, "", "__call__"], [103, 2, 1, "", "__init__"], [103, 2, 1, "", "__mul__"], [103, 2, 1, "", "add_state"], [103, 2, 1, "", "clone"], [103, 2, 1, "", "compute"], [103, 2, 1, "", "reset_state"], [103, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.MultilabelSpecificity": [[104, 2, 1, "", "__add__"], [104, 2, 1, "", "__call__"], [104, 2, 1, "", "__init__"], [104, 2, 1, "", "__mul__"], [104, 2, 1, "", "add_state"], [104, 2, 1, "", "clone"], [104, 2, 1, "", "compute"], [104, 2, 1, "", "reset_state"], [104, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.specificity.Specificity": [[105, 2, 1, "", "__add__"], [105, 2, 1, "", "__call__"], [105, 2, 1, "", "__init__"], [105, 2, 1, "", "__mul__"], [105, 2, 1, "", "add_state"], [105, 2, 1, "", "clone"], [105, 2, 1, "", "compute"], [105, 2, 1, "", "reset_state"], [105, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores": [[107, 1, 1, "", "BinaryStatScores"], [108, 1, 1, "", "MulticlassStatScores"], [109, 1, 1, "", "MultilabelStatScores"], [110, 1, 1, "", "StatScores"]], "cyclops.evaluate.metrics.stat_scores.BinaryStatScores": [[107, 2, 1, "", "__add__"], [107, 2, 1, "", "__call__"], [107, 2, 1, "", "__init__"], [107, 2, 1, "", "__mul__"], [107, 2, 1, "", "add_state"], [107, 2, 1, "", "clone"], [107, 2, 1, "", "compute"], [107, 2, 1, "", "reset_state"], [107, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores": [[108, 2, 1, "", "__add__"], [108, 2, 1, "", "__call__"], [108, 2, 1, "", "__init__"], [108, 2, 1, "", "__mul__"], [108, 2, 1, "", "add_state"], [108, 2, 1, "", "clone"], [108, 2, 1, "", "compute"], [108, 2, 1, "", "reset_state"], [108, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores": [[109, 2, 1, "", "__add__"], [109, 2, 1, "", "__call__"], [109, 2, 1, "", "__init__"], [109, 2, 1, "", "__mul__"], [109, 2, 1, "", "add_state"], [109, 2, 1, "", "clone"], [109, 2, 1, "", "compute"], [109, 2, 1, "", "reset_state"], [109, 2, 1, "", "update_state"]], "cyclops.evaluate.metrics.stat_scores.StatScores": [[110, 2, 1, "", "__add__"], [110, 2, 1, "", "__call__"], [110, 2, 1, "", "__init__"], [110, 2, 1, "", "__mul__"], [110, 2, 1, "", "add_state"], [110, 2, 1, "", "clone"], [110, 2, 1, "", "compute"], [110, 2, 1, "", "reset_state"], [110, 2, 1, "", "update_state"]], "cyclops.monitor": [[111, 0, 0, "-", "clinical_applicator"], [113, 0, 0, "-", "synthetic_applicator"]], "cyclops.monitor.clinical_applicator": [[112, 1, 1, "", "ClinicalShiftApplicator"]], "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator": [[112, 2, 1, "", "age"], [112, 2, 1, "", "apply_shift"], [112, 2, 1, "", "custom"], [112, 2, 1, "", "hospital_type"], [112, 2, 1, "", "month"], [112, 2, 1, "", "sex"], [112, 2, 1, "", "time"]], "cyclops.monitor.synthetic_applicator": [[114, 1, 1, "", "SyntheticShiftApplicator"], [115, 4, 1, "", "binary_noise_shift"], [116, 4, 1, "", "feature_association_shift"], [117, 4, 1, "", "feature_swap_shift"], [118, 4, 1, "", "gaussian_noise_shift"], [119, 4, 1, "", "knockout_shift"]], "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator": [[114, 2, 1, "", "apply_shift"]], "cyclops.query": [[120, 0, 0, "-", "base"], [122, 0, 0, "-", "eicu"], [124, 0, 0, "-", "gemini"], [126, 0, 0, "-", "interface"], [128, 0, 0, "-", "mimiciii"], [130, 0, 0, "-", "mimiciv"], [132, 0, 0, "-", "omop"], [134, 0, 0, "-", "ops"]], "cyclops.query.base": [[121, 1, 1, "", "DatasetQuerier"]], "cyclops.query.base.DatasetQuerier": [[121, 3, 1, "", "db"], [121, 2, 1, "", "get_table"], [121, 2, 1, "", "list_columns"], [121, 2, 1, "", "list_custom_tables"], [121, 2, 1, "", "list_schemas"], [121, 2, 1, "", "list_tables"]], "cyclops.query.eicu": [[123, 1, 1, "", "EICUQuerier"]], "cyclops.query.eicu.EICUQuerier": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "get_table"], [123, 2, 1, "", "list_columns"], [123, 2, 1, "", "list_custom_tables"], [123, 2, 1, "", "list_schemas"], [123, 2, 1, "", "list_tables"]], "cyclops.query.gemini": [[125, 1, 1, "", "GEMINIQuerier"]], "cyclops.query.gemini.GEMINIQuerier": [[125, 2, 1, "", "__init__"], [125, 2, 1, "", "care_units"], [125, 2, 1, "", "diagnoses"], [125, 2, 1, "", "get_table"], [125, 2, 1, "", "imaging"], [125, 2, 1, "", "ip_admin"], [125, 2, 1, "", "list_columns"], [125, 2, 1, "", "list_custom_tables"], [125, 2, 1, "", "list_schemas"], [125, 2, 1, "", "list_tables"], [125, 2, 1, "", "room_transfer"]], "cyclops.query.interface": [[127, 1, 1, "", "QueryInterface"]], "cyclops.query.interface.QueryInterface": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "clear_data"], [127, 5, 1, "", "data"], [127, 2, 1, "", "join"], [127, 2, 1, "", "ops"], [127, 2, 1, "", "run"], [127, 2, 1, "", "save"], [127, 2, 1, "", "union"], [127, 2, 1, "", "union_all"]], "cyclops.query.mimiciii": [[129, 1, 1, "", "MIMICIIIQuerier"]], "cyclops.query.mimiciii.MIMICIIIQuerier": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "chartevents"], [129, 2, 1, "", "diagnoses"], [129, 2, 1, "", "get_table"], [129, 2, 1, "", "labevents"], [129, 2, 1, "", "list_columns"], [129, 2, 1, "", "list_custom_tables"], [129, 2, 1, "", "list_schemas"], [129, 2, 1, "", "list_tables"]], "cyclops.query.mimiciv": [[131, 1, 1, "", "MIMICIVQuerier"]], "cyclops.query.mimiciv.MIMICIVQuerier": [[131, 2, 1, "", "__init__"], [131, 2, 1, "", "chartevents"], [131, 2, 1, "", "diagnoses"], [131, 2, 1, "", "get_table"], [131, 2, 1, "", "labevents"], [131, 2, 1, "", "list_columns"], [131, 2, 1, "", "list_custom_tables"], [131, 2, 1, "", "list_schemas"], [131, 2, 1, "", "list_tables"], [131, 2, 1, "", "patients"]], "cyclops.query.omop": [[133, 1, 1, "", "OMOPQuerier"]], "cyclops.query.omop.OMOPQuerier": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "get_table"], [133, 2, 1, "", "list_columns"], [133, 2, 1, "", "list_custom_tables"], [133, 2, 1, "", "list_schemas"], [133, 2, 1, "", "list_tables"], [133, 2, 1, "", "map_concept_ids_to_name"], [133, 2, 1, "", "measurement"], [133, 2, 1, "", "observation"], [133, 2, 1, "", "person"], [133, 2, 1, "", "visit_detail"], [133, 2, 1, "", "visit_occurrence"]], "cyclops.query.ops": [[135, 1, 1, "", "AddColumn"], [136, 1, 1, "", "AddDeltaColumn"], [137, 1, 1, "", "AddDeltaConstant"], [138, 1, 1, "", "AddNumeric"], [139, 1, 1, "", "And"], [140, 1, 1, "", "Apply"], [141, 1, 1, "", "Cast"], [142, 1, 1, "", "ConditionAfterDate"], [143, 1, 1, "", "ConditionBeforeDate"], [144, 1, 1, "", "ConditionEndsWith"], [145, 1, 1, "", "ConditionEquals"], [146, 1, 1, "", "ConditionGreaterThan"], [147, 1, 1, "", "ConditionIn"], [148, 1, 1, "", "ConditionInMonths"], [149, 1, 1, "", "ConditionInYears"], [150, 1, 1, "", "ConditionLessThan"], [151, 1, 1, "", "ConditionLike"], [152, 1, 1, "", "ConditionRegexMatch"], [153, 1, 1, "", "ConditionStartsWith"], [154, 1, 1, "", "ConditionSubstring"], [155, 1, 1, "", "Distinct"], [156, 1, 1, "", "Drop"], [157, 1, 1, "", "DropNulls"], [158, 1, 1, "", "ExtractTimestampComponent"], [159, 1, 1, "", "FillNull"], [160, 1, 1, "", "GroupByAggregate"], [161, 1, 1, "", "Join"], [162, 1, 1, "", "Keep"], [163, 1, 1, "", "Limit"], [164, 1, 1, "", "Literal"], [165, 1, 1, "", "Or"], [166, 1, 1, "", "OrderBy"], [167, 1, 1, "", "QueryOp"], [168, 1, 1, "", "RandomizeOrder"], [169, 1, 1, "", "Rename"], [170, 1, 1, "", "Reorder"], [171, 1, 1, "", "ReorderAfter"], [172, 1, 1, "", "Sequential"], [173, 1, 1, "", "Substring"], [174, 1, 1, "", "Trim"], [175, 1, 1, "", "Union"]], "cyclops.query.ops.AddColumn": [[135, 2, 1, "", "__call__"]], "cyclops.query.ops.AddDeltaColumn": [[136, 2, 1, "", "__call__"]], "cyclops.query.ops.AddDeltaConstant": [[137, 2, 1, "", "__call__"]], "cyclops.query.ops.AddNumeric": [[138, 2, 1, "", "__call__"]], "cyclops.query.ops.And": [[139, 2, 1, "", "__call__"]], "cyclops.query.ops.Apply": [[140, 2, 1, "", "__call__"]], "cyclops.query.ops.Cast": [[141, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionAfterDate": [[142, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionBeforeDate": [[143, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionEndsWith": [[144, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionEquals": [[145, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionGreaterThan": [[146, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionIn": [[147, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionInMonths": [[148, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionInYears": [[149, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionLessThan": [[150, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionLike": [[151, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionRegexMatch": [[152, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionStartsWith": [[153, 2, 1, "", "__call__"]], "cyclops.query.ops.ConditionSubstring": [[154, 2, 1, "", "__call__"]], "cyclops.query.ops.Distinct": [[155, 2, 1, "", "__call__"]], "cyclops.query.ops.Drop": [[156, 2, 1, "", "__call__"]], "cyclops.query.ops.DropNulls": [[157, 2, 1, "", "__call__"]], "cyclops.query.ops.ExtractTimestampComponent": [[158, 2, 1, "", "__call__"]], "cyclops.query.ops.FillNull": [[159, 2, 1, "", "__call__"]], "cyclops.query.ops.GroupByAggregate": [[160, 2, 1, "", "__call__"]], "cyclops.query.ops.Join": [[161, 2, 1, "", "__call__"]], "cyclops.query.ops.Keep": [[162, 2, 1, "", "__call__"]], "cyclops.query.ops.Limit": [[163, 2, 1, "", "__call__"]], "cyclops.query.ops.Literal": [[164, 2, 1, "", "__call__"]], "cyclops.query.ops.Or": [[165, 2, 1, "", "__call__"]], "cyclops.query.ops.OrderBy": [[166, 2, 1, "", "__call__"]], "cyclops.query.ops.QueryOp": [[167, 2, 1, "", "__call__"]], "cyclops.query.ops.RandomizeOrder": [[168, 2, 1, "", "__call__"]], "cyclops.query.ops.Rename": [[169, 2, 1, "", "__call__"]], "cyclops.query.ops.Reorder": [[170, 2, 1, "", "__call__"]], "cyclops.query.ops.ReorderAfter": [[171, 2, 1, "", "__call__"]], "cyclops.query.ops.Sequential": [[172, 2, 1, "", "__add__"], [172, 2, 1, "", "__call__"], [172, 2, 1, "", "__init__"], [172, 2, 1, "", "append"], [172, 2, 1, "", "extend"], [172, 2, 1, "", "insert"], [172, 2, 1, "", "pop"]], "cyclops.query.ops.Substring": [[173, 2, 1, "", "__call__"]], "cyclops.query.ops.Trim": [[174, 2, 1, "", "__call__"]], "cyclops.query.ops.Union": [[175, 2, 1, "", "__call__"]], "cyclops.report": [[176, 0, 0, "-", "report"]], "cyclops.report.report": [[177, 1, 1, "", "ModelCardReport"]], "cyclops.report.report.ModelCardReport": [[177, 2, 1, "", "export"], [177, 2, 1, "", "from_json_file"], [177, 2, 1, "", "log_citation"], [177, 2, 1, "", "log_dataset"], [177, 2, 1, "", "log_descriptor"], [177, 2, 1, "", "log_fairness_assessment"], [177, 2, 1, "", "log_from_dict"], [177, 2, 1, "", "log_image"], [177, 2, 1, "", "log_license"], [177, 2, 1, "", "log_model_parameters"], [177, 2, 1, "", "log_owner"], [177, 2, 1, "", "log_performance_metrics"], [177, 2, 1, "", "log_plotly_figure"], [177, 2, 1, "", "log_quantitative_analysis"], [177, 2, 1, "", "log_reference"], [177, 2, 1, "", "log_regulation"], [177, 2, 1, "", "log_risk"], [177, 2, 1, "", "log_use_case"], [177, 2, 1, "", "log_user"], [177, 2, 1, "", "log_version"]], "cyclops.tasks": [[178, 0, 0, "-", "cxr_classification"], [180, 0, 0, "-", "mortality_prediction"]], "cyclops.tasks.cxr_classification": [[179, 1, 1, "", "CXRClassificationTask"]], "cyclops.tasks.cxr_classification.CXRClassificationTask": [[179, 2, 1, "", "__init__"], [179, 2, 1, "", "add_model"], [179, 5, 1, "", "data_type"], [179, 2, 1, "", "evaluate"], [179, 2, 1, "", "get_model"], [179, 2, 1, "", "list_models"], [179, 5, 1, "", "models_count"], [179, 2, 1, "", "predict"], [179, 5, 1, "", "task_type"]], "cyclops.tasks.mortality_prediction": [[181, 1, 1, "", "MortalityPredictionTask"]], "cyclops.tasks.mortality_prediction.MortalityPredictionTask": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "add_model"], [181, 5, 1, "", "data_type"], [181, 2, 1, "", "evaluate"], [181, 2, 1, "", "get_model"], [181, 2, 1, "", "list_models"], [181, 2, 1, "", "list_models_params"], [181, 2, 1, "", "load_model"], [181, 5, 1, "", "models_count"], [181, 2, 1, "", "predict"], [181, 2, 1, "", "save_model"], [181, 5, 1, "", "task_type"], [181, 2, 1, "", "train"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"]}, "titleterms": {"api": [0, 185, 189, 190, 192, 193, 196, 198, 199], "refer": 0, "contribut": [1, 3], "cyclop": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 193], "pre": 1, "commit": 1, "hook": 1, "code": 1, "guidelin": 1, "welcom": 2, "": 2, "document": [2, 3], "content": 2, "get": [3, 189, 190, 192, 193, 194, 196], "start": 3, "instal": 3, "us": [3, 193, 195, 200], "pip": 3, "develop": 3, "poetri": 3, "conda": 3, "notebook": 3, "citat": 3, "data": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 182, 191, 197, 200], "featur": [4, 5, 182, 191, 197], "medical_imag": [4, 5], "medicalimag": 5, "slicer": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "slicespec": 7, "compound_filt": 8, "filter_datetim": 9, "filter_non_nul": 10, "filter_rang": 11, "filter_string_contain": 12, "filter_valu": 13, "is_datetim": 14, "overal": 15, "evalu": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 183, 191, 193, 197], "fair": [18, 19, 20, 21, 22, 183], "config": [18, 19], "fairnessconfig": 19, "evaluate_fair": 21, "warn_too_many_unique_valu": 22, "metric": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 183, 194], "accuraci": [23, 24, 25, 26, 27, 44], "binaryaccuraci": 25, "multiclassaccuraci": 26, "multilabelaccuraci": 27, "auroc": [28, 29, 30, 31, 32, 45, 194], "binaryauroc": 30, "multiclassauroc": 31, "multilabelauroc": 32, "f_beta": [33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54], "binaryf1scor": 34, "binaryfbetascor": 35, "f1score": 36, "fbetascor": 37, "multiclassf1scor": 38, "multiclassfbetascor": 39, "multilabelf1scor": 40, "multilabelfbetascor": 41, "factori": [42, 43], "create_metr": 43, "function": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 183], "binary_f1_scor": 47, "binary_fbeta_scor": 48, "f1_score": 49, "fbeta_scor": 50, "multiclass_f1_scor": 51, "multiclass_fbeta_scor": 52, "multilabel_f1_scor": 53, "multilabel_fbeta_scor": 54, "precision_recal": [55, 56, 57, 58, 59, 60, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 84, 85], "binary_precis": 56, "binary_recal": 57, "multiclass_precis": 58, "multiclass_recal": 59, "multilabel_precis": 60, "multilabel_recal": 61, "precis": [62, 84], "recal": [63, 85], "precision_recall_curv": [64, 86, 87, 88, 89, 90], "roc": [65, 66, 67, 68, 69, 91, 92, 93, 94, 95], "binary_roc_curv": 66, "multiclass_roc_curv": 67, "multilabel_roc_curv": 68, "roc_curv": 69, "sensit": [70, 96, 97, 98, 99, 100, 195], "specif": [71, 101, 102, 103, 104, 105], "stat_scor": [72, 106, 107, 108, 109, 110], "metriccollect": 75, "operatormetr": 76, "binaryprecis": 78, "binaryrecal": 79, "multiclassprecis": 80, "multiclassrecal": 81, "multilabelprecis": 82, "multilabelrecal": 83, "binaryprecisionrecallcurv": 87, "multiclassprecisionrecallcurv": 88, "multilabelprecisionrecallcurv": 89, "precisionrecallcurv": 90, "binaryroccurv": 92, "multiclassroccurv": 93, "multilabelroccurv": 94, "roccurv": 95, "binarysensit": 97, "multiclasssensit": 98, "multilabelsensit": 99, "binaryspecif": 102, "multiclassspecif": 103, "multilabelspecif": 104, "binarystatscor": 107, "multiclassstatscor": 108, "multilabelstatscor": 109, "statscor": 110, "monitor": [111, 112, 113, 114, 115, 116, 117, 118, 119, 184, 198], "clinical_appl": [111, 112], "clinicalshiftappl": 112, "synthetic_appl": [113, 114, 115, 116, 117, 118, 119], "syntheticshiftappl": 114, "binary_noise_shift": 115, "feature_association_shift": 116, "feature_swap_shift": 117, "gaussian_noise_shift": 118, "knockout_shift": 119, "queri": [120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 185, 189, 190, 192, 193, 196, 197, 199], "base": [120, 121, 193, 197], "datasetqueri": 121, "eicu": [122, 123, 189], "eicuqueri": [123, 189], "gemini": [124, 125, 190], "geminiqueri": [125, 190], "interfac": [126, 127], "queryinterfac": 127, "mimiciii": [128, 129], "mimiciiiqueri": [129, 192], "mimiciv": [130, 131], "mimicivqueri": [131, 193], "omop": [132, 133, 196], "omopqueri": [133, 196], "op": [134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 193], "addcolumn": 135, "adddeltacolumn": 136, "adddeltaconst": 137, "addnumer": 138, "And": 139, "appli": 140, "cast": 141, "conditionafterd": 142, "conditionbefored": 143, "conditionendswith": 144, "conditionequ": 145, "conditiongreaterthan": 146, "conditionin": 147, "conditioninmonth": 148, "conditioninyear": 149, "conditionlessthan": 150, "conditionlik": 151, "conditionregexmatch": [152, 193], "conditionstartswith": 153, "conditionsubstr": 154, "distinct": 155, "drop": [156, 197], "dropnul": 157, "extracttimestampcompon": 158, "fillnul": 159, "groupbyaggreg": 160, "join": 161, "keep": [162, 190], "limit": [163, 189], "liter": 164, "Or": 165, "orderbi": 166, "queryop": 167, "randomizeord": 168, "renam": 169, "reorder": 170, "reorderaft": 171, "sequenti": 172, "substr": [173, 189], "trim": 174, "union": 175, "report": [176, 177, 186, 191, 193, 197], "modelcardreport": 177, "task": [178, 179, 180, 181, 187, 191, 197], "cxr_classif": [178, 179], "cxrclassificationtask": 179, "mortality_predict": [180, 181], "mortalitypredictiontask": 181, "dataset": [185, 190, 191, 194, 195, 197], "tutori": [188, 189, 190, 192, 193, 195, 196], "crd": 189, "import": [189, 190, 191, 192, 193, 194, 195, 196, 197], "instanti": [189, 190, 192, 193, 196], "exampl": [189, 190, 192, 193, 195, 196, 200], "1": [189, 190, 192, 193, 195, 196], "all": [189, 192, 193, 196], "femal": [189, 192, 193, 196], "patient": [189, 190, 192, 193, 196], "discharg": [189, 190], "2014": 189, "100": 189, "row": 189, "2": [189, 192, 193, 195, 196], "encount": [189, 190, 192, 193], "diagnos": [189, 192, 193, 196], "schizophrenia": [189, 193], "diagnosisstr": 189, "year": [189, 193], "2015": [189, 190, 193], "3": [189, 192, 193, 195], "potassium": [189, 192], "lab": [189, 192, 193], "test": [189, 190, 192, 193, 194, 195], "teach": 189, "hospit": [189, 190], "4": [189, 192, 193, 195], "glucos": 189, "medic": 189, "search": 189, "1a": 190, "creat": [190, 191, 197], "tabl": 190, "onli": 190, "one": 190, "per": 190, "most": 190, "recent": 190, "each": 190, "sort": 190, "patient_id_hash": 190, "discharge_date_tim": 190, "record": 190, "1b": 190, "from": [190, 193], "abov": 190, "set": 190, "take": 190, "subset": 190, "who": 190, "were": 190, "between": 190, "april": 190, "march": 190, "31": 190, "2016": 190, "1c": 190, "total": 190, "number": 190, "admiss": [190, 193], "2a": 190, "how": 190, "mani": 190, "sodium": 190, "place": 190, "apr": 190, "mai": 190, "smh": 190, "heart": [191, 200], "failur": [191, 200], "predict": [191, 194, 197, 200], "librari": [191, 194, 195, 197], "constant": [191, 197], "load": [191, 194, 195], "sex": [191, 194], "valu": 191, "ag": [191, 194, 197], "distribut": [191, 197], "outcom": [191, 192, 196, 197], "identifi": [191, 197], "type": [191, 197], "preprocessor": [191, 197], "hug": [191, 197], "face": [191, 197], "model": [191, 194, 195, 197], "creation": [191, 197], "train": [191, 195, 197], "perform": [191, 194, 197], "over": [191, 194, 197], "time": [191, 194, 197], "gener": [191, 195, 197], "mimic": [192, 193], "iii": 192, "male": 192, "mortal": [192, 196], "gastroenter": 192, "icd": [192, 193], "9": [192, 193], "long": [192, 193], "titl": [192, 193], "aado2": 192, "carevu": 192, "chart": 192, "event": 192, "have": 192, "valuenum": 192, "less": 192, "than": 192, "20": 192, "iv": 193, "2021": 193, "later": 193, "approx": 193, "10": 193, "advanc": 193, "contain": 193, "chronic": 193, "routin": 193, "vital": 193, "sign": 193, "5": [193, 195], "hemoglobin": 193, "2009": 193, "6": 193, "radiologi": 193, "filter": 193, "keyword": 193, "lymphadenopathi": 193, "infecti": 193, "occur": 193, "togeth": 193, "7": 193, "return": 193, "dask": 193, "datafram": 193, "lazi": 193, "partit": 193, "batch": 193, "aggreg": 193, "subject_id": 193, "8": 193, "run": 193, "raw": 193, "sql": 193, "string": 193, "chest": [194, 200], "x": [194, 200], "rai": [194, 200], "diseas": 194, "classif": [194, 200], "multilabel": 194, "pathologi": 194, "balanc": 194, "error": 194, "rate": 194, "pariti": 194, "log": 194, "w": 194, "threshold": 194, "popul": 194, "card": 194, "field": 194, "nihcxr": 195, "clinic": 195, "drift": 195, "experi": 195, "sourc": 195, "target": 195, "dimension": 195, "reduct": 195, "techniqu": 195, "differ": 195, "shift": 195, "roll": 195, "window": 195, "synthet": 195, "timestamp": 195, "biweekli": 195, "visit": 196, "after": 196, "2010": 196, "measur": 196, "2020": 196, "end": 196, "sepsi": 196, "prolong": [197, 200], "length": [197, 200], "stai": [197, 200], "comput": 197, "label": 197, "inspect": 197, "preprocess": 197, "nan": 197, "nan_threshold": 197, "gender": 197, "case": 200, "tabular": 200, "kaggl": 200, "synthea": 200, "imag": 200, "nih": 200}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "Contributing to cyclops": [[1, "contributing-to-cyclops"]], "Pre-commit hooks": [[1, "pre-commit-hooks"]], "Coding guidelines": [[1, "coding-guidelines"]], "Welcome to cyclops\u2019s documentation!": [[2, "welcome-to-cyclops-s-documentation"]], "Contents:": [[2, null]], "\ud83d\udc23 Getting Started": [[3, "getting-started"]], "Installing cyclops using pip": [[3, "installing-cyclops-using-pip"]], "\ud83e\uddd1\ud83c\udfff\u200d\ud83d\udcbb Developing": [[3, "developing"]], "Using poetry": [[3, "using-poetry"]], "Using Conda": [[3, "using-conda"]], "Contributing": [[3, "contributing"]], "\ud83d\udcda Documentation": [[3, "documentation"]], "\ud83d\udcd3 Notebooks": [[3, "notebooks"]], "\ud83c\udf93 Citation": [[3, "citation"]], "cyclops.data.features.medical_image": [[4, "module-cyclops.data.features.medical_image"]], "cyclops.data.features.medical_image.MedicalImage": [[5, "cyclops-data-features-medical-image-medicalimage"]], "cyclops.data.slicer": [[6, "module-cyclops.data.slicer"]], "cyclops.data.slicer.SliceSpec": [[7, "cyclops-data-slicer-slicespec"]], "cyclops.data.slicer.compound_filter": [[8, "cyclops-data-slicer-compound-filter"]], "cyclops.data.slicer.filter_datetime": [[9, "cyclops-data-slicer-filter-datetime"]], "cyclops.data.slicer.filter_non_null": [[10, "cyclops-data-slicer-filter-non-null"]], "cyclops.data.slicer.filter_range": [[11, "cyclops-data-slicer-filter-range"]], "cyclops.data.slicer.filter_string_contains": [[12, "cyclops-data-slicer-filter-string-contains"]], "cyclops.data.slicer.filter_value": [[13, "cyclops-data-slicer-filter-value"]], "cyclops.data.slicer.is_datetime": [[14, "cyclops-data-slicer-is-datetime"]], "cyclops.data.slicer.overall": [[15, "cyclops-data-slicer-overall"]], "cyclops.evaluate.evaluator": [[16, "module-cyclops.evaluate.evaluator"]], "cyclops.evaluate.evaluator.evaluate": [[17, "cyclops-evaluate-evaluator-evaluate"]], "cyclops.evaluate.fairness.config": [[18, "module-cyclops.evaluate.fairness.config"]], "cyclops.evaluate.fairness.config.FairnessConfig": [[19, "cyclops-evaluate-fairness-config-fairnessconfig"]], "cyclops.evaluate.fairness.evaluator": [[20, "module-cyclops.evaluate.fairness.evaluator"]], "cyclops.evaluate.fairness.evaluator.evaluate_fairness": [[21, "cyclops-evaluate-fairness-evaluator-evaluate-fairness"]], "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values": [[22, "cyclops-evaluate-fairness-evaluator-warn-too-many-unique-values"]], "cyclops.evaluate.metrics.accuracy": [[23, "module-cyclops.evaluate.metrics.accuracy"]], "cyclops.evaluate.metrics.accuracy.Accuracy": [[24, "cyclops-evaluate-metrics-accuracy-accuracy"]], "cyclops.evaluate.metrics.accuracy.BinaryAccuracy": [[25, "cyclops-evaluate-metrics-accuracy-binaryaccuracy"]], "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy": [[26, "cyclops-evaluate-metrics-accuracy-multiclassaccuracy"]], "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy": [[27, "cyclops-evaluate-metrics-accuracy-multilabelaccuracy"]], "cyclops.evaluate.metrics.auroc": [[28, "module-cyclops.evaluate.metrics.auroc"]], "cyclops.evaluate.metrics.auroc.AUROC": [[29, "cyclops-evaluate-metrics-auroc-auroc"]], "cyclops.evaluate.metrics.auroc.BinaryAUROC": [[30, "cyclops-evaluate-metrics-auroc-binaryauroc"]], "cyclops.evaluate.metrics.auroc.MulticlassAUROC": [[31, "cyclops-evaluate-metrics-auroc-multiclassauroc"]], "cyclops.evaluate.metrics.auroc.MultilabelAUROC": [[32, "cyclops-evaluate-metrics-auroc-multilabelauroc"]], "cyclops.evaluate.metrics.f_beta": [[33, "module-cyclops.evaluate.metrics.f_beta"]], "cyclops.evaluate.metrics.f_beta.BinaryF1Score": [[34, "cyclops-evaluate-metrics-f-beta-binaryf1score"]], "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore": [[35, "cyclops-evaluate-metrics-f-beta-binaryfbetascore"]], "cyclops.evaluate.metrics.f_beta.F1Score": [[36, "cyclops-evaluate-metrics-f-beta-f1score"]], "cyclops.evaluate.metrics.f_beta.FbetaScore": [[37, "cyclops-evaluate-metrics-f-beta-fbetascore"]], "cyclops.evaluate.metrics.f_beta.MulticlassF1Score": [[38, "cyclops-evaluate-metrics-f-beta-multiclassf1score"]], "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore": [[39, "cyclops-evaluate-metrics-f-beta-multiclassfbetascore"]], "cyclops.evaluate.metrics.f_beta.MultilabelF1Score": [[40, "cyclops-evaluate-metrics-f-beta-multilabelf1score"]], "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore": [[41, "cyclops-evaluate-metrics-f-beta-multilabelfbetascore"]], "cyclops.evaluate.metrics.factory": [[42, "module-cyclops.evaluate.metrics.factory"]], "cyclops.evaluate.metrics.factory.create_metric": [[43, "cyclops-evaluate-metrics-factory-create-metric"]], "cyclops.evaluate.metrics.functional.accuracy": [[44, "module-cyclops.evaluate.metrics.functional.accuracy"]], "cyclops.evaluate.metrics.functional.auroc": [[45, "module-cyclops.evaluate.metrics.functional.auroc"]], "cyclops.evaluate.metrics.functional.f_beta": [[46, "module-cyclops.evaluate.metrics.functional.f_beta"]], "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score": [[47, "cyclops-evaluate-metrics-functional-f-beta-binary-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score": [[48, "cyclops-evaluate-metrics-functional-f-beta-binary-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.f1_score": [[49, "cyclops-evaluate-metrics-functional-f-beta-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.fbeta_score": [[50, "cyclops-evaluate-metrics-functional-f-beta-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score": [[51, "cyclops-evaluate-metrics-functional-f-beta-multiclass-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score": [[52, "cyclops-evaluate-metrics-functional-f-beta-multiclass-fbeta-score"]], "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score": [[53, "cyclops-evaluate-metrics-functional-f-beta-multilabel-f1-score"]], "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score": [[54, "cyclops-evaluate-metrics-functional-f-beta-multilabel-fbeta-score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[55, "module-cyclops.evaluate.metrics.functional.precision_recall"]], "cyclops.evaluate.metrics.functional.precision_recall.binary_precision": [[56, "cyclops-evaluate-metrics-functional-precision-recall-binary-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.binary_recall": [[57, "cyclops-evaluate-metrics-functional-precision-recall-binary-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision": [[58, "cyclops-evaluate-metrics-functional-precision-recall-multiclass-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall": [[59, "cyclops-evaluate-metrics-functional-precision-recall-multiclass-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision": [[60, "cyclops-evaluate-metrics-functional-precision-recall-multilabel-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall": [[61, "cyclops-evaluate-metrics-functional-precision-recall-multilabel-recall"]], "cyclops.evaluate.metrics.functional.precision_recall.precision": [[62, "cyclops-evaluate-metrics-functional-precision-recall-precision"]], "cyclops.evaluate.metrics.functional.precision_recall.recall": [[63, "cyclops-evaluate-metrics-functional-precision-recall-recall"]], "cyclops.evaluate.metrics.functional.precision_recall_curve": [[64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"]], "cyclops.evaluate.metrics.functional.roc": [[65, "module-cyclops.evaluate.metrics.functional.roc"]], "cyclops.evaluate.metrics.functional.roc.binary_roc_curve": [[66, "cyclops-evaluate-metrics-functional-roc-binary-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve": [[67, "cyclops-evaluate-metrics-functional-roc-multiclass-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve": [[68, "cyclops-evaluate-metrics-functional-roc-multilabel-roc-curve"]], "cyclops.evaluate.metrics.functional.roc.roc_curve": [[69, "cyclops-evaluate-metrics-functional-roc-roc-curve"]], "cyclops.evaluate.metrics.functional.sensitivity": [[70, "module-cyclops.evaluate.metrics.functional.sensitivity"]], "cyclops.evaluate.metrics.functional.specificity": [[71, "module-cyclops.evaluate.metrics.functional.specificity"]], "cyclops.evaluate.metrics.functional.stat_scores": [[72, "module-cyclops.evaluate.metrics.functional.stat_scores"]], "cyclops.evaluate.metrics.metric": [[73, "module-cyclops.evaluate.metrics.metric"]], "cyclops.evaluate.metrics.metric.Metric": [[74, "cyclops-evaluate-metrics-metric-metric"]], "cyclops.evaluate.metrics.metric.MetricCollection": [[75, "cyclops-evaluate-metrics-metric-metriccollection"]], "cyclops.evaluate.metrics.metric.OperatorMetric": [[76, "cyclops-evaluate-metrics-metric-operatormetric"]], "cyclops.evaluate.metrics.precision_recall": [[77, "module-cyclops.evaluate.metrics.precision_recall"]], "cyclops.evaluate.metrics.precision_recall.BinaryPrecision": [[78, "cyclops-evaluate-metrics-precision-recall-binaryprecision"]], "cyclops.evaluate.metrics.precision_recall.BinaryRecall": [[79, "cyclops-evaluate-metrics-precision-recall-binaryrecall"]], "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision": [[80, "cyclops-evaluate-metrics-precision-recall-multiclassprecision"]], "cyclops.evaluate.metrics.precision_recall.MulticlassRecall": [[81, "cyclops-evaluate-metrics-precision-recall-multiclassrecall"]], "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision": [[82, "cyclops-evaluate-metrics-precision-recall-multilabelprecision"]], "cyclops.evaluate.metrics.precision_recall.MultilabelRecall": [[83, "cyclops-evaluate-metrics-precision-recall-multilabelrecall"]], "cyclops.evaluate.metrics.precision_recall.Precision": [[84, "cyclops-evaluate-metrics-precision-recall-precision"]], "cyclops.evaluate.metrics.precision_recall.Recall": [[85, "cyclops-evaluate-metrics-precision-recall-recall"]], "cyclops.evaluate.metrics.precision_recall_curve": [[86, "module-cyclops.evaluate.metrics.precision_recall_curve"]], "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve": [[87, "cyclops-evaluate-metrics-precision-recall-curve-binaryprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve": [[88, "cyclops-evaluate-metrics-precision-recall-curve-multiclassprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve": [[89, "cyclops-evaluate-metrics-precision-recall-curve-multilabelprecisionrecallcurve"]], "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve": [[90, "cyclops-evaluate-metrics-precision-recall-curve-precisionrecallcurve"]], "cyclops.evaluate.metrics.roc": [[91, "module-cyclops.evaluate.metrics.roc"]], "cyclops.evaluate.metrics.roc.BinaryROCCurve": [[92, "cyclops-evaluate-metrics-roc-binaryroccurve"]], "cyclops.evaluate.metrics.roc.MulticlassROCCurve": [[93, "cyclops-evaluate-metrics-roc-multiclassroccurve"]], "cyclops.evaluate.metrics.roc.MultilabelROCCurve": [[94, "cyclops-evaluate-metrics-roc-multilabelroccurve"]], "cyclops.evaluate.metrics.roc.ROCCurve": [[95, "cyclops-evaluate-metrics-roc-roccurve"]], "cyclops.evaluate.metrics.sensitivity": [[96, "module-cyclops.evaluate.metrics.sensitivity"]], "cyclops.evaluate.metrics.sensitivity.BinarySensitivity": [[97, "cyclops-evaluate-metrics-sensitivity-binarysensitivity"]], "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity": [[98, "cyclops-evaluate-metrics-sensitivity-multiclasssensitivity"]], "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity": [[99, "cyclops-evaluate-metrics-sensitivity-multilabelsensitivity"]], "cyclops.evaluate.metrics.sensitivity.Sensitivity": [[100, "cyclops-evaluate-metrics-sensitivity-sensitivity"]], "cyclops.evaluate.metrics.specificity": [[101, "module-cyclops.evaluate.metrics.specificity"]], "cyclops.evaluate.metrics.specificity.BinarySpecificity": [[102, "cyclops-evaluate-metrics-specificity-binaryspecificity"]], "cyclops.evaluate.metrics.specificity.MulticlassSpecificity": [[103, "cyclops-evaluate-metrics-specificity-multiclassspecificity"]], "cyclops.evaluate.metrics.specificity.MultilabelSpecificity": [[104, "cyclops-evaluate-metrics-specificity-multilabelspecificity"]], "cyclops.evaluate.metrics.specificity.Specificity": [[105, "cyclops-evaluate-metrics-specificity-specificity"]], "cyclops.evaluate.metrics.stat_scores": [[106, "module-cyclops.evaluate.metrics.stat_scores"]], "cyclops.evaluate.metrics.stat_scores.BinaryStatScores": [[107, "cyclops-evaluate-metrics-stat-scores-binarystatscores"]], "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores": [[108, "cyclops-evaluate-metrics-stat-scores-multiclassstatscores"]], "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores": [[109, "cyclops-evaluate-metrics-stat-scores-multilabelstatscores"]], "cyclops.evaluate.metrics.stat_scores.StatScores": [[110, "cyclops-evaluate-metrics-stat-scores-statscores"]], "cyclops.monitor.clinical_applicator": [[111, "module-cyclops.monitor.clinical_applicator"]], "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator": [[112, "cyclops-monitor-clinical-applicator-clinicalshiftapplicator"]], "cyclops.monitor.synthetic_applicator": [[113, "module-cyclops.monitor.synthetic_applicator"]], "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator": [[114, "cyclops-monitor-synthetic-applicator-syntheticshiftapplicator"]], "cyclops.monitor.synthetic_applicator.binary_noise_shift": [[115, "cyclops-monitor-synthetic-applicator-binary-noise-shift"]], "cyclops.monitor.synthetic_applicator.feature_association_shift": [[116, "cyclops-monitor-synthetic-applicator-feature-association-shift"]], "cyclops.monitor.synthetic_applicator.feature_swap_shift": [[117, "cyclops-monitor-synthetic-applicator-feature-swap-shift"]], "cyclops.monitor.synthetic_applicator.gaussian_noise_shift": [[118, "cyclops-monitor-synthetic-applicator-gaussian-noise-shift"]], "cyclops.monitor.synthetic_applicator.knockout_shift": [[119, "cyclops-monitor-synthetic-applicator-knockout-shift"]], "cyclops.query.base": [[120, "module-cyclops.query.base"]], "cyclops.query.base.DatasetQuerier": [[121, "cyclops-query-base-datasetquerier"]], "cyclops.query.eicu": [[122, "module-cyclops.query.eicu"]], "cyclops.query.eicu.EICUQuerier": [[123, "cyclops-query-eicu-eicuquerier"]], "cyclops.query.gemini": [[124, "module-cyclops.query.gemini"]], "cyclops.query.gemini.GEMINIQuerier": [[125, "cyclops-query-gemini-geminiquerier"]], "cyclops.query.interface": [[126, "module-cyclops.query.interface"]], "cyclops.query.interface.QueryInterface": [[127, "cyclops-query-interface-queryinterface"]], "cyclops.query.mimiciii": [[128, "module-cyclops.query.mimiciii"]], "cyclops.query.mimiciii.MIMICIIIQuerier": [[129, "cyclops-query-mimiciii-mimiciiiquerier"]], "cyclops.query.mimiciv": [[130, "module-cyclops.query.mimiciv"]], "cyclops.query.mimiciv.MIMICIVQuerier": [[131, "cyclops-query-mimiciv-mimicivquerier"]], "cyclops.query.omop": [[132, "module-cyclops.query.omop"]], "cyclops.query.omop.OMOPQuerier": [[133, "cyclops-query-omop-omopquerier"]], "cyclops.query.ops": [[134, "module-cyclops.query.ops"]], "cyclops.query.ops.AddColumn": [[135, "cyclops-query-ops-addcolumn"]], "cyclops.query.ops.AddDeltaColumn": [[136, "cyclops-query-ops-adddeltacolumn"]], "cyclops.query.ops.AddDeltaConstant": [[137, "cyclops-query-ops-adddeltaconstant"]], "cyclops.query.ops.AddNumeric": [[138, "cyclops-query-ops-addnumeric"]], "cyclops.query.ops.And": [[139, "cyclops-query-ops-and"]], "cyclops.query.ops.Apply": [[140, "cyclops-query-ops-apply"]], "cyclops.query.ops.Cast": [[141, "cyclops-query-ops-cast"]], "cyclops.query.ops.ConditionAfterDate": [[142, "cyclops-query-ops-conditionafterdate"]], "cyclops.query.ops.ConditionBeforeDate": [[143, "cyclops-query-ops-conditionbeforedate"]], "cyclops.query.ops.ConditionEndsWith": [[144, "cyclops-query-ops-conditionendswith"]], "cyclops.query.ops.ConditionEquals": [[145, "cyclops-query-ops-conditionequals"]], "cyclops.query.ops.ConditionGreaterThan": [[146, "cyclops-query-ops-conditiongreaterthan"]], "cyclops.query.ops.ConditionIn": [[147, "cyclops-query-ops-conditionin"]], "cyclops.query.ops.ConditionInMonths": [[148, "cyclops-query-ops-conditioninmonths"]], "cyclops.query.ops.ConditionInYears": [[149, "cyclops-query-ops-conditioninyears"]], "cyclops.query.ops.ConditionLessThan": [[150, "cyclops-query-ops-conditionlessthan"]], "cyclops.query.ops.ConditionLike": [[151, "cyclops-query-ops-conditionlike"]], "cyclops.query.ops.ConditionRegexMatch": [[152, "cyclops-query-ops-conditionregexmatch"]], "cyclops.query.ops.ConditionStartsWith": [[153, "cyclops-query-ops-conditionstartswith"]], "cyclops.query.ops.ConditionSubstring": [[154, "cyclops-query-ops-conditionsubstring"]], "cyclops.query.ops.Distinct": [[155, "cyclops-query-ops-distinct"]], "cyclops.query.ops.Drop": [[156, "cyclops-query-ops-drop"]], "cyclops.query.ops.DropNulls": [[157, "cyclops-query-ops-dropnulls"]], "cyclops.query.ops.ExtractTimestampComponent": [[158, "cyclops-query-ops-extracttimestampcomponent"]], "cyclops.query.ops.FillNull": [[159, "cyclops-query-ops-fillnull"]], "cyclops.query.ops.GroupByAggregate": [[160, "cyclops-query-ops-groupbyaggregate"]], "cyclops.query.ops.Join": [[161, "cyclops-query-ops-join"]], "cyclops.query.ops.Keep": [[162, "cyclops-query-ops-keep"]], "cyclops.query.ops.Limit": [[163, "cyclops-query-ops-limit"]], "cyclops.query.ops.Literal": [[164, "cyclops-query-ops-literal"]], "cyclops.query.ops.Or": [[165, "cyclops-query-ops-or"]], "cyclops.query.ops.OrderBy": [[166, "cyclops-query-ops-orderby"]], "cyclops.query.ops.QueryOp": [[167, "cyclops-query-ops-queryop"]], "cyclops.query.ops.RandomizeOrder": [[168, "cyclops-query-ops-randomizeorder"]], "cyclops.query.ops.Rename": [[169, "cyclops-query-ops-rename"]], "cyclops.query.ops.Reorder": [[170, "cyclops-query-ops-reorder"]], "cyclops.query.ops.ReorderAfter": [[171, "cyclops-query-ops-reorderafter"]], "cyclops.query.ops.Sequential": [[172, "cyclops-query-ops-sequential"]], "cyclops.query.ops.Substring": [[173, "cyclops-query-ops-substring"]], "cyclops.query.ops.Trim": [[174, "cyclops-query-ops-trim"]], "cyclops.query.ops.Union": [[175, "cyclops-query-ops-union"]], "cyclops.report.report": [[176, "module-cyclops.report.report"]], "cyclops.report.report.ModelCardReport": [[177, "cyclops-report-report-modelcardreport"]], "cyclops.tasks.cxr_classification": [[178, "module-cyclops.tasks.cxr_classification"]], "cyclops.tasks.cxr_classification.CXRClassificationTask": [[179, "cyclops-tasks-cxr-classification-cxrclassificationtask"]], "cyclops.tasks.mortality_prediction": [[180, "module-cyclops.tasks.mortality_prediction"]], "cyclops.tasks.mortality_prediction.MortalityPredictionTask": [[181, "cyclops-tasks-mortality-prediction-mortalitypredictiontask"]], "cyclops.data": [[182, "module-cyclops.data"]], "cyclops.data.features": [[182, "module-cyclops.data.features"]], "cyclops.evaluate": [[183, "module-cyclops.evaluate"]], "cyclops.evaluate.metrics": [[183, "module-cyclops.evaluate.metrics"]], "cyclops.evaluate.metrics.functional": [[183, "module-cyclops.evaluate.metrics.functional"]], "cyclops.evaluate.fairness": [[183, "module-cyclops.evaluate.fairness"]], "cyclops.monitor": [[184, "module-cyclops.monitor"]], "cyclops.query": [[185, "module-cyclops.query"]], "dataset APIs": [[185, "dataset-apis"]], "cyclops.report": [[186, "module-cyclops.report"]], "cyclops.tasks": [[187, "module-cyclops.tasks"]], "Tutorials": [[188, "tutorials"]], "eICU-CRD query API tutorial": [[189, "eICU-CRD-query-API-tutorial"]], "Imports and instantiate EICUQuerier": [[189, "Imports-and-instantiate-EICUQuerier"]], "Example 1. Get all female patients discharged in 2014 (limit to 100 rows).": [[189, "Example-1.-Get-all-female-patients-discharged-in-2014-(limit-to-100-rows)."]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in diagnosisstring), discharged in the year 2015.": [[189, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-diagnosisstring),-discharged-in-the-year-2015."]], "Example 3. Get potassium lab tests for patients discharged in the year 2014, for all teaching hospitals.": [[189, "Example-3.-Get-potassium-lab-tests-for-patients-discharged-in-the-year-2014,-for-all-teaching-hospitals."]], "Example 4. Get glucose medications (substring search) for female patients discharged in 2014.": [[189, "Example-4.-Get-glucose-medications-(substring-search)-for-female-patients-discharged-in-2014."]], "GEMINI query API tutorial": [[190, "GEMINI-query-API-tutorial"]], "Imports and instantiate GEMINIQuerier.": [[190, "Imports-and-instantiate-GEMINIQuerier."]], "Example 1a. Create a table with only one hospitalization per patient, keeping the most recent encounter for each patient. Sort the dataset by patient_id_hashed and discharge_date_time, and then keep the recent record.": [[190, "Example-1a.-Create-a-table-with-only-one-hospitalization-per-patient,-keeping-the-most-recent-encounter-for-each-patient.-Sort-the-dataset-by-patient_id_hashed-and-discharge_date_time,-and-then-keep-the-recent-record."]], "Example 1b. From the above set of encounters, take a subset of patients who were discharged between April 1, 2015 and March 31, 2016.": [[190, "Example-1b.-From-the-above-set-of-encounters,-take-a-subset-of-patients-who-were-discharged-between-April-1,-2015-and-March-31,-2016."]], "Example 1c. From the above set of encounters, get the total number of admissions for each hospital.": [[190, "Example-1c.-From-the-above-set-of-encounters,-get-the-total-number-of-admissions-for-each-hospital."]], "Example 2a. How many sodium tests were placed between Apr 1, 2015 and May 31, 2015 at SMH?": [[190, "Example-2a.-How-many-sodium-tests-were-placed-between-Apr-1,-2015-and-May-31,-2015-at-SMH?"]], "Heart Failure Prediction": [[191, "Heart-Failure-Prediction"]], "Import Libraries": [[191, "Import-Libraries"], [194, "Import-Libraries"], [197, "Import-Libraries"]], "Constants": [[191, "Constants"], [197, "Constants"]], "Data Loading": [[191, "Data-Loading"]], "Sex values": [[191, "Sex-values"]], "Age distribution": [[191, "Age-distribution"], [197, "Age-distribution"]], "Outcome distribution": [[191, "Outcome-distribution"], [197, "Outcome-distribution"]], "Identifying feature types": [[191, "Identifying-feature-types"], [197, "Identifying-feature-types"]], "Creating data preprocessors": [[191, "Creating-data-preprocessors"], [197, "Creating-data-preprocessors"]], "Creating Hugging Face Dataset": [[191, "Creating-Hugging-Face-Dataset"], [197, "Creating-Hugging-Face-Dataset"]], "Model Creation": [[191, "Model-Creation"], [197, "Model-Creation"]], "Task Creation": [[191, "Task-Creation"], [197, "Task-Creation"]], "Training": [[191, "Training"], [197, "Training"]], "Prediction": [[191, "Prediction"], [197, "Prediction"]], "Evaluation": [[191, "Evaluation"], [197, "Evaluation"]], "Performance over time": [[191, "Performance-over-time"], [194, "Performance-over-time"], [197, "Performance-over-time"]], "Report Generation": [[191, "Report-Generation"], [197, "Report-Generation"]], "MIMIC-III query API tutorial": [[192, "MIMIC-III-query-API-tutorial"]], "Imports and instantiate MIMICIIIQuerier": [[192, "Imports-and-instantiate-MIMICIIIQuerier"]], "Example 1. Get all male patients with a mortality outcome.": [[192, "Example-1.-Get-all-male-patients-with-a-mortality-outcome."]], "Example 2. Get all female patient encounters with diagnoses (gastroenteritis in ICD-9 long title).": [[192, "Example-2.-Get-all-female-patient-encounters-with-diagnoses-(gastroenteritis-in-ICD-9-long-title)."]], "Example 3. Get potassium lab tests for female patients.": [[192, "Example-3.-Get-potassium-lab-tests-for-female-patients."]], "Example 4. Get AaDO2 carevue chart events for male patients that have a valuenum of less than 20.": [[192, "Example-4.-Get-AaDO2-carevue-chart-events-for-male-patients-that-have-a-valuenum-of-less-than-20."]], "MIMIC-IV query API tutorial": [[193, "MIMIC-IV-query-API-tutorial"]], "Imports and instantiate MIMICIVQuerier": [[193, "Imports-and-instantiate-MIMICIVQuerier"]], "Example 1. Get all patient admissions from 2021 or later (approx year of admission)": [[193, "Example-1.-Get-all-patient-admissions-from-2021-or-later-(approx-year-of-admission)"]], "Example 2. Get all patient encounters with diagnoses (schizophrenia in ICD-10 long title), in the year 2015.": [[193, "Example-2.-Get-all-patient-encounters-with-diagnoses-(schizophrenia-in-ICD-10-long-title),-in-the-year-2015."]], "Example 3. Advanced - uses ConditionRegexMatch from cyclops.query.ops. Get all patient encounters with diagnoses (ICD-9 long title contains schizophrenia and chronic ), in the year 2015.": [[193, "Example-3.-Advanced---uses-ConditionRegexMatch-from-cyclops.query.ops.-Get-all-patient-encounters-with-diagnoses-(ICD-9-long-title-contains-schizophrenia-and-chronic-),-in-the-year-2015."]], "Example 4. Get routine vital signs for patients from year 2015.": [[193, "Example-4.-Get-routine-vital-signs-for-patients-from-year-2015."]], "Example 5. Get hemoglobin lab tests for patients from year 2009.": [[193, "Example-5.-Get-hemoglobin-lab-tests-for-patients-from-year-2009."]], "Example 6. Get radiology reports and filter on keywords lymphadenopathy and infectious occurring together from year 2009.": [[193, "Example-6.-Get-radiology-reports-and-filter-on-keywords-lymphadenopathy-and-infectious-occurring-together-from-year-2009."]], "Example 7. Get all female patient encounters from year 2015, and return as dask dataframe (lazy evaluation) with 4 partitions (batches) aggregated based on subject_id.": [[193, "Example-7.-Get-all-female-patient-encounters-from-year-2015,-and-return-as-dask-dataframe-(lazy-evaluation)-with-4-partitions-(batches)-aggregated-based-on-subject_id."]], "Example 8. Running a raw SQL string.": [[193, "Example-8.-Running-a-raw-SQL-string."]], "Chest X-Ray Disease Classification": [[194, "Chest-X-Ray-Disease-Classification"]], "Load Dataset": [[194, "Load-Dataset"]], "Load Model and get Predictions": [[194, "Load-Model-and-get-Predictions"]], "Multilabel AUROC by Pathology and Sex": [[194, "Multilabel-AUROC-by-Pathology-and-Sex"]], "Multilabel AUROC by Pathology and Age": [[194, "Multilabel-AUROC-by-Pathology-and-Age"]], "Balanced Error Rate by Pathology and Age": [[194, "Balanced-Error-Rate-by-Pathology-and-Age"]], "Balanced Error Rate Parity by Pathology and Age": [[194, "Balanced-Error-Rate-Parity-by-Pathology-and-Age"]], "Log Performance Metrics as Tests w/ Thresholds": [[194, "Log-Performance-Metrics-as-Tests-w/-Thresholds"]], "Populate Model Card Fields": [[194, "Populate-Model-Card-Fields"]], "NIHCXR Clinical Drift Experiments Tutorial": [[195, "NIHCXR-Clinical-Drift-Experiments-Tutorial"]], "Import Libraries and Load NIHCXR Dataset": [[195, "Import-Libraries-and-Load-NIHCXR-Dataset"]], "Example 1. Generate Source/Target Dataset for Experiments (1-2)": [[195, "Example-1.-Generate-Source/Target-Dataset-for-Experiments-(1-2)"]], "Example 2. Sensitivity test experiment with 3 dimensionality reduction techniques": [[195, "Example-2.-Sensitivity-test-experiment-with-3-dimensionality-reduction-techniques"]], "Example 3. Sensitivity test experiment with models trained on different datasets": [[195, "Example-3.-Sensitivity-test-experiment-with-models-trained-on-different-datasets"]], "Example 4. Sensitivity test experiment with different clinical shifts": [[195, "Example-4.-Sensitivity-test-experiment-with-different-clinical-shifts"]], "Example 5. Rolling window experiment with synthetic timestamps using biweekly window": [[195, "Example-5.-Rolling-window-experiment-with-synthetic-timestamps-using-biweekly-window"]], "OMOP query API tutorial": [[196, "OMOP-query-API-tutorial"]], "Imports and instantiate OMOPQuerier.": [[196, "Imports-and-instantiate-OMOPQuerier."], [196, "id1"]], "Example 1. Get all patient visits in or after 2010.": [[196, "Example-1.-Get-all-patient-visits-in-or-after-2010."]], "Example 2. Get measurements for all visits in or after 2020.": [[196, "Example-2.-Get-measurements-for-all-visits-in-or-after-2020."]], "Example 1. Get all patient visits that ended in a mortality outcome in or after 2010.": [[196, "Example-1.-Get-all-patient-visits-that-ended-in-a-mortality-outcome-in-or-after-2010."]], "Example 2. Get all measurements for female patient visits with sepsis diagnoses, that ended in a mortality outcome.": [[196, "Example-2.-Get-all-measurements-for-female-patient-visits-with-sepsis-diagnoses,-that-ended-in-a-mortality-outcome."]], "Prolonged Length of Stay Prediction": [[197, "Prolonged-Length-of-Stay-Prediction"]], "Data Querying": [[197, "Data-Querying"]], "Compute length of stay (labels)": [[197, "Compute-length-of-stay-(labels)"]], "Data Inspection and Preprocessing": [[197, "Data-Inspection-and-Preprocessing"]], "Drop NaNs based on the NAN_THRESHOLD": [[197, "Drop-NaNs-based-on-the-NAN_THRESHOLD"]], "Length of stay distribution": [[197, "Length-of-stay-distribution"]], "Gender distribution": [[197, "Gender-distribution"]], "monitor API": [[198, "monitor-api"]], "query API": [[199, "query-api"]], "Example use cases": [[200, "example-use-cases"]], "Tabular data": [[200, "tabular-data"]], "Kaggle Heart Failure Prediction": [[200, "kaggle-heart-failure-prediction"]], "Synthea Prolonged Length of Stay Prediction": [[200, "synthea-prolonged-length-of-stay-prediction"]], "Image data": [[200, "image-data"]], "NIH Chest X-ray classification": [[200, "nih-chest-x-ray-classification"]]}, "indexentries": {"cyclops.data.features.medical_image": [[4, "module-cyclops.data.features.medical_image"]], "module": [[4, "module-cyclops.data.features.medical_image"], [6, "module-cyclops.data.slicer"], [16, "module-cyclops.evaluate.evaluator"], [18, "module-cyclops.evaluate.fairness.config"], [20, "module-cyclops.evaluate.fairness.evaluator"], [23, "module-cyclops.evaluate.metrics.accuracy"], [28, "module-cyclops.evaluate.metrics.auroc"], [33, "module-cyclops.evaluate.metrics.f_beta"], [42, "module-cyclops.evaluate.metrics.factory"], [44, "module-cyclops.evaluate.metrics.functional.accuracy"], [45, "module-cyclops.evaluate.metrics.functional.auroc"], [46, "module-cyclops.evaluate.metrics.functional.f_beta"], [55, "module-cyclops.evaluate.metrics.functional.precision_recall"], [64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"], [65, "module-cyclops.evaluate.metrics.functional.roc"], [70, "module-cyclops.evaluate.metrics.functional.sensitivity"], [71, "module-cyclops.evaluate.metrics.functional.specificity"], [72, "module-cyclops.evaluate.metrics.functional.stat_scores"], [73, "module-cyclops.evaluate.metrics.metric"], [77, "module-cyclops.evaluate.metrics.precision_recall"], [86, "module-cyclops.evaluate.metrics.precision_recall_curve"], [91, "module-cyclops.evaluate.metrics.roc"], [96, "module-cyclops.evaluate.metrics.sensitivity"], [101, "module-cyclops.evaluate.metrics.specificity"], [106, "module-cyclops.evaluate.metrics.stat_scores"], [111, "module-cyclops.monitor.clinical_applicator"], [113, "module-cyclops.monitor.synthetic_applicator"], [120, "module-cyclops.query.base"], [122, "module-cyclops.query.eicu"], [124, "module-cyclops.query.gemini"], [126, "module-cyclops.query.interface"], [128, "module-cyclops.query.mimiciii"], [130, "module-cyclops.query.mimiciv"], [132, "module-cyclops.query.omop"], [134, "module-cyclops.query.ops"], [176, "module-cyclops.report.report"], [178, "module-cyclops.tasks.cxr_classification"], [180, "module-cyclops.tasks.mortality_prediction"], [182, "module-cyclops.data"], [182, "module-cyclops.data.features"], [183, "module-cyclops.evaluate"], [183, "module-cyclops.evaluate.fairness"], [183, "module-cyclops.evaluate.metrics"], [183, "module-cyclops.evaluate.metrics.functional"], [184, "module-cyclops.monitor"], [185, "module-cyclops.query"], [186, "module-cyclops.report"], [187, "module-cyclops.tasks"]], "medicalimage (class in cyclops.data.features.medical_image)": [[5, "cyclops.data.features.medical_image.MedicalImage"]], "__call__() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.__call__"]], "cast_storage() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.cast_storage"]], "decode_example() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.decode_example"]], "embed_storage() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.embed_storage"]], "encode_example() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.encode_example"]], "flatten() (medicalimage method)": [[5, "cyclops.data.features.medical_image.MedicalImage.flatten"]], "cyclops.data.slicer": [[6, "module-cyclops.data.slicer"]], "slicespec (class in cyclops.data.slicer)": [[7, "cyclops.data.slicer.SliceSpec"]], "_registry (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec._registry"]], "add_slice_spec() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.add_slice_spec"]], "column_names (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.column_names"]], "get_slices() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.get_slices"]], "include_overall (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.include_overall"]], "slices() (slicespec method)": [[7, "cyclops.data.slicer.SliceSpec.slices"]], "spec_list (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.spec_list"]], "validate (slicespec attribute)": [[7, "cyclops.data.slicer.SliceSpec.validate"]], "compound_filter() (in module cyclops.data.slicer)": [[8, "cyclops.data.slicer.compound_filter"]], "filter_datetime() (in module cyclops.data.slicer)": [[9, "cyclops.data.slicer.filter_datetime"]], "filter_non_null() (in module cyclops.data.slicer)": [[10, "cyclops.data.slicer.filter_non_null"]], "filter_range() (in module cyclops.data.slicer)": [[11, "cyclops.data.slicer.filter_range"]], "filter_string_contains() (in module cyclops.data.slicer)": [[12, "cyclops.data.slicer.filter_string_contains"]], "filter_value() (in module cyclops.data.slicer)": [[13, "cyclops.data.slicer.filter_value"]], "is_datetime() (in module cyclops.data.slicer)": [[14, "cyclops.data.slicer.is_datetime"]], "overall() (in module cyclops.data.slicer)": [[15, "cyclops.data.slicer.overall"]], "cyclops.evaluate.evaluator": [[16, "module-cyclops.evaluate.evaluator"]], "evaluate() (in module cyclops.evaluate.evaluator)": [[17, "cyclops.evaluate.evaluator.evaluate"]], "cyclops.evaluate.fairness.config": [[18, "module-cyclops.evaluate.fairness.config"]], "fairnessconfig (class in cyclops.evaluate.fairness.config)": [[19, "cyclops.evaluate.fairness.config.FairnessConfig"]], "cyclops.evaluate.fairness.evaluator": [[20, "module-cyclops.evaluate.fairness.evaluator"]], "evaluate_fairness() (in module cyclops.evaluate.fairness.evaluator)": [[21, "cyclops.evaluate.fairness.evaluator.evaluate_fairness"]], "warn_too_many_unique_values() (in module cyclops.evaluate.fairness.evaluator)": [[22, "cyclops.evaluate.fairness.evaluator.warn_too_many_unique_values"]], "cyclops.evaluate.metrics.accuracy": [[23, "module-cyclops.evaluate.metrics.accuracy"]], "accuracy (class in cyclops.evaluate.metrics.accuracy)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy"]], "__add__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__add__"]], "__call__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__call__"]], "__init__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__init__"]], "__mul__() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.__mul__"]], "add_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.add_state"]], "clone() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.clone"]], "compute() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.compute"]], "reset_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.reset_state"]], "update_state() (accuracy method)": [[24, "cyclops.evaluate.metrics.accuracy.Accuracy.update_state"]], "binaryaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy"]], "__add__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__add__"]], "__call__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__call__"]], "__init__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__init__"]], "__mul__() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.__mul__"]], "add_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.add_state"]], "clone() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.clone"]], "compute() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.compute"]], "reset_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.reset_state"]], "update_state() (binaryaccuracy method)": [[25, "cyclops.evaluate.metrics.accuracy.BinaryAccuracy.update_state"]], "multiclassaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy"]], "__add__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__add__"]], "__call__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__call__"]], "__init__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__init__"]], "__mul__() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.__mul__"]], "add_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.add_state"]], "clone() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.clone"]], "compute() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.compute"]], "reset_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.reset_state"]], "update_state() (multiclassaccuracy method)": [[26, "cyclops.evaluate.metrics.accuracy.MulticlassAccuracy.update_state"]], "multilabelaccuracy (class in cyclops.evaluate.metrics.accuracy)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy"]], "__add__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__add__"]], "__call__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__call__"]], "__init__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__init__"]], "__mul__() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.__mul__"]], "add_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.add_state"]], "clone() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.clone"]], "compute() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.compute"]], "reset_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.reset_state"]], "update_state() (multilabelaccuracy method)": [[27, "cyclops.evaluate.metrics.accuracy.MultilabelAccuracy.update_state"]], "cyclops.evaluate.metrics.auroc": [[28, "module-cyclops.evaluate.metrics.auroc"]], "auroc (class in cyclops.evaluate.metrics.auroc)": [[29, "cyclops.evaluate.metrics.auroc.AUROC"]], "__add__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__add__"]], "__call__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__call__"]], "__init__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__init__"]], "__mul__() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.__mul__"]], "add_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.add_state"]], "clone() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.clone"]], "compute() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.compute"]], "reset_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.reset_state"]], "update_state() (auroc method)": [[29, "cyclops.evaluate.metrics.auroc.AUROC.update_state"]], "binaryauroc (class in cyclops.evaluate.metrics.auroc)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC"]], "__add__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__add__"]], "__call__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__call__"]], "__init__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__init__"]], "__mul__() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.__mul__"]], "add_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.add_state"]], "clone() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.clone"]], "compute() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.compute"]], "reset_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.reset_state"]], "update_state() (binaryauroc method)": [[30, "cyclops.evaluate.metrics.auroc.BinaryAUROC.update_state"]], "multiclassauroc (class in cyclops.evaluate.metrics.auroc)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC"]], "__add__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__add__"]], "__call__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__call__"]], "__init__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__init__"]], "__mul__() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.__mul__"]], "add_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.add_state"]], "clone() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.clone"]], "compute() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.compute"]], "reset_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.reset_state"]], "update_state() (multiclassauroc method)": [[31, "cyclops.evaluate.metrics.auroc.MulticlassAUROC.update_state"]], "multilabelauroc (class in cyclops.evaluate.metrics.auroc)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC"]], "__add__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__add__"]], "__call__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__call__"]], "__init__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__init__"]], "__mul__() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.__mul__"]], "add_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.add_state"]], "clone() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.clone"]], "compute() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.compute"]], "reset_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.reset_state"]], "update_state() (multilabelauroc method)": [[32, "cyclops.evaluate.metrics.auroc.MultilabelAUROC.update_state"]], "cyclops.evaluate.metrics.f_beta": [[33, "module-cyclops.evaluate.metrics.f_beta"]], "binaryf1score (class in cyclops.evaluate.metrics.f_beta)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score"]], "__add__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__add__"]], "__call__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__call__"]], "__init__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__init__"]], "__mul__() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.__mul__"]], "add_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.add_state"]], "clone() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.clone"]], "compute() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.compute"]], "reset_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.reset_state"]], "update_state() (binaryf1score method)": [[34, "cyclops.evaluate.metrics.f_beta.BinaryF1Score.update_state"]], "binaryfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore"]], "__add__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__add__"]], "__call__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__call__"]], "__init__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__init__"]], "__mul__() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.__mul__"]], "add_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.add_state"]], "clone() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.clone"]], "compute() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.compute"]], "reset_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.reset_state"]], "update_state() (binaryfbetascore method)": [[35, "cyclops.evaluate.metrics.f_beta.BinaryFbetaScore.update_state"]], "f1score (class in cyclops.evaluate.metrics.f_beta)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score"]], "__add__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__add__"]], "__call__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__call__"]], "__init__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__init__"]], "__mul__() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.__mul__"]], "add_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.add_state"]], "clone() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.clone"]], "compute() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.compute"]], "reset_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.reset_state"]], "update_state() (f1score method)": [[36, "cyclops.evaluate.metrics.f_beta.F1Score.update_state"]], "fbetascore (class in cyclops.evaluate.metrics.f_beta)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore"]], "__add__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__add__"]], "__call__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__call__"]], "__init__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__init__"]], "__mul__() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.__mul__"]], "add_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.add_state"]], "clone() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.clone"]], "compute() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.compute"]], "reset_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.reset_state"]], "update_state() (fbetascore method)": [[37, "cyclops.evaluate.metrics.f_beta.FbetaScore.update_state"]], "multiclassf1score (class in cyclops.evaluate.metrics.f_beta)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score"]], "__add__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__add__"]], "__call__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__call__"]], "__init__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__init__"]], "__mul__() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.__mul__"]], "add_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.add_state"]], "clone() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.clone"]], "compute() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.compute"]], "reset_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.reset_state"]], "update_state() (multiclassf1score method)": [[38, "cyclops.evaluate.metrics.f_beta.MulticlassF1Score.update_state"]], "multiclassfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore"]], "__add__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__add__"]], "__call__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__call__"]], "__init__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__init__"]], "__mul__() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.__mul__"]], "add_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.add_state"]], "clone() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.clone"]], "compute() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.compute"]], "reset_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.reset_state"]], "update_state() (multiclassfbetascore method)": [[39, "cyclops.evaluate.metrics.f_beta.MulticlassFbetaScore.update_state"]], "multilabelf1score (class in cyclops.evaluate.metrics.f_beta)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score"]], "__add__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__add__"]], "__call__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__call__"]], "__init__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__init__"]], "__mul__() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.__mul__"]], "add_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.add_state"]], "clone() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.clone"]], "compute() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.compute"]], "reset_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.reset_state"]], "update_state() (multilabelf1score method)": [[40, "cyclops.evaluate.metrics.f_beta.MultilabelF1Score.update_state"]], "multilabelfbetascore (class in cyclops.evaluate.metrics.f_beta)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore"]], "__add__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__add__"]], "__call__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__call__"]], "__init__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__init__"]], "__mul__() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.__mul__"]], "add_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.add_state"]], "clone() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.clone"]], "compute() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.compute"]], "reset_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.reset_state"]], "update_state() (multilabelfbetascore method)": [[41, "cyclops.evaluate.metrics.f_beta.MultilabelFbetaScore.update_state"]], "cyclops.evaluate.metrics.factory": [[42, "module-cyclops.evaluate.metrics.factory"]], "create_metric() (in module cyclops.evaluate.metrics.factory)": [[43, "cyclops.evaluate.metrics.factory.create_metric"]], "cyclops.evaluate.metrics.functional.accuracy": [[44, "module-cyclops.evaluate.metrics.functional.accuracy"]], "cyclops.evaluate.metrics.functional.auroc": [[45, "module-cyclops.evaluate.metrics.functional.auroc"]], "cyclops.evaluate.metrics.functional.f_beta": [[46, "module-cyclops.evaluate.metrics.functional.f_beta"]], "binary_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[47, "cyclops.evaluate.metrics.functional.f_beta.binary_f1_score"]], "binary_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[48, "cyclops.evaluate.metrics.functional.f_beta.binary_fbeta_score"]], "f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[49, "cyclops.evaluate.metrics.functional.f_beta.f1_score"]], "fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[50, "cyclops.evaluate.metrics.functional.f_beta.fbeta_score"]], "multiclass_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[51, "cyclops.evaluate.metrics.functional.f_beta.multiclass_f1_score"]], "multiclass_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[52, "cyclops.evaluate.metrics.functional.f_beta.multiclass_fbeta_score"]], "multilabel_f1_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[53, "cyclops.evaluate.metrics.functional.f_beta.multilabel_f1_score"]], "multilabel_fbeta_score() (in module cyclops.evaluate.metrics.functional.f_beta)": [[54, "cyclops.evaluate.metrics.functional.f_beta.multilabel_fbeta_score"]], "cyclops.evaluate.metrics.functional.precision_recall": [[55, "module-cyclops.evaluate.metrics.functional.precision_recall"]], "binary_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[56, "cyclops.evaluate.metrics.functional.precision_recall.binary_precision"]], "binary_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[57, "cyclops.evaluate.metrics.functional.precision_recall.binary_recall"]], "multiclass_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[58, "cyclops.evaluate.metrics.functional.precision_recall.multiclass_precision"]], "multiclass_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[59, "cyclops.evaluate.metrics.functional.precision_recall.multiclass_recall"]], "multilabel_precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[60, "cyclops.evaluate.metrics.functional.precision_recall.multilabel_precision"]], "multilabel_recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[61, "cyclops.evaluate.metrics.functional.precision_recall.multilabel_recall"]], "precision() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[62, "cyclops.evaluate.metrics.functional.precision_recall.precision"]], "recall() (in module cyclops.evaluate.metrics.functional.precision_recall)": [[63, "cyclops.evaluate.metrics.functional.precision_recall.recall"]], "cyclops.evaluate.metrics.functional.precision_recall_curve": [[64, "module-cyclops.evaluate.metrics.functional.precision_recall_curve"]], "cyclops.evaluate.metrics.functional.roc": [[65, "module-cyclops.evaluate.metrics.functional.roc"]], "binary_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[66, "cyclops.evaluate.metrics.functional.roc.binary_roc_curve"]], "multiclass_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[67, "cyclops.evaluate.metrics.functional.roc.multiclass_roc_curve"]], "multilabel_roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[68, "cyclops.evaluate.metrics.functional.roc.multilabel_roc_curve"]], "roc_curve() (in module cyclops.evaluate.metrics.functional.roc)": [[69, "cyclops.evaluate.metrics.functional.roc.roc_curve"]], "cyclops.evaluate.metrics.functional.sensitivity": [[70, "module-cyclops.evaluate.metrics.functional.sensitivity"]], "cyclops.evaluate.metrics.functional.specificity": [[71, "module-cyclops.evaluate.metrics.functional.specificity"]], "cyclops.evaluate.metrics.functional.stat_scores": [[72, "module-cyclops.evaluate.metrics.functional.stat_scores"]], "cyclops.evaluate.metrics.metric": [[73, "module-cyclops.evaluate.metrics.metric"]], "metric (class in cyclops.evaluate.metrics.metric)": [[74, "cyclops.evaluate.metrics.metric.Metric"]], "__add__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__add__"]], "__call__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__call__"]], "__init__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__init__"]], "__mul__() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.__mul__"]], "add_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.add_state"]], "clone() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.clone"]], "compute() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.compute"]], "reset_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.reset_state"]], "update_state() (metric method)": [[74, "cyclops.evaluate.metrics.metric.Metric.update_state"]], "metriccollection (class in cyclops.evaluate.metrics.metric)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection"]], "__call__() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.__call__"]], "__init__() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.__init__"]], "add_metrics() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.add_metrics"]], "clear() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.clear"]], "clone() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.clone"]], "compute() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.compute"]], "get() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.get"]], "items() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.items"]], "keys() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.keys"]], "pop() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.pop"]], "popitem() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.popitem"]], "reset_state() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.reset_state"]], "setdefault() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.setdefault"]], "update() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.update"]], "update_state() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.update_state"]], "values() (metriccollection method)": [[75, "cyclops.evaluate.metrics.metric.MetricCollection.values"]], "operatormetric (class in cyclops.evaluate.metrics.metric)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric"]], "__add__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__add__"]], "__call__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__call__"]], "__init__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__init__"]], "__mul__() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.__mul__"]], "add_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.add_state"]], "clone() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.clone"]], "compute() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.compute"]], "reset_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.reset_state"]], "update_state() (operatormetric method)": [[76, "cyclops.evaluate.metrics.metric.OperatorMetric.update_state"]], "cyclops.evaluate.metrics.precision_recall": [[77, "module-cyclops.evaluate.metrics.precision_recall"]], "binaryprecision (class in cyclops.evaluate.metrics.precision_recall)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision"]], "__add__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__add__"]], "__call__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__call__"]], "__init__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__init__"]], "__mul__() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.__mul__"]], "add_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.add_state"]], "clone() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.clone"]], "compute() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.compute"]], "reset_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.reset_state"]], "update_state() (binaryprecision method)": [[78, "cyclops.evaluate.metrics.precision_recall.BinaryPrecision.update_state"]], "binaryrecall (class in cyclops.evaluate.metrics.precision_recall)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall"]], "__add__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__add__"]], "__call__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__call__"]], "__init__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__init__"]], "__mul__() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.__mul__"]], "add_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.add_state"]], "clone() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.clone"]], "compute() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.compute"]], "reset_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.reset_state"]], "update_state() (binaryrecall method)": [[79, "cyclops.evaluate.metrics.precision_recall.BinaryRecall.update_state"]], "multiclassprecision (class in cyclops.evaluate.metrics.precision_recall)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision"]], "__add__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__add__"]], "__call__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__call__"]], "__init__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__init__"]], "__mul__() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.__mul__"]], "add_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.add_state"]], "clone() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.clone"]], "compute() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.compute"]], "reset_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.reset_state"]], "update_state() (multiclassprecision method)": [[80, "cyclops.evaluate.metrics.precision_recall.MulticlassPrecision.update_state"]], "multiclassrecall (class in cyclops.evaluate.metrics.precision_recall)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall"]], "__add__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__add__"]], "__call__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__call__"]], "__init__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__init__"]], "__mul__() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.__mul__"]], "add_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.add_state"]], "clone() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.clone"]], "compute() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.compute"]], "reset_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.reset_state"]], "update_state() (multiclassrecall method)": [[81, "cyclops.evaluate.metrics.precision_recall.MulticlassRecall.update_state"]], "multilabelprecision (class in cyclops.evaluate.metrics.precision_recall)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision"]], "__add__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__add__"]], "__call__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__call__"]], "__init__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__init__"]], "__mul__() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.__mul__"]], "add_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.add_state"]], "clone() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.clone"]], "compute() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.compute"]], "reset_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.reset_state"]], "update_state() (multilabelprecision method)": [[82, "cyclops.evaluate.metrics.precision_recall.MultilabelPrecision.update_state"]], "multilabelrecall (class in cyclops.evaluate.metrics.precision_recall)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall"]], "__add__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__add__"]], "__call__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__call__"]], "__init__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__init__"]], "__mul__() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.__mul__"]], "add_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.add_state"]], "clone() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.clone"]], "compute() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.compute"]], "reset_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.reset_state"]], "update_state() (multilabelrecall method)": [[83, "cyclops.evaluate.metrics.precision_recall.MultilabelRecall.update_state"]], "precision (class in cyclops.evaluate.metrics.precision_recall)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision"]], "__add__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__add__"]], "__call__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__call__"]], "__init__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__init__"]], "__mul__() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.__mul__"]], "add_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.add_state"]], "clone() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.clone"]], "compute() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.compute"]], "reset_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.reset_state"]], "update_state() (precision method)": [[84, "cyclops.evaluate.metrics.precision_recall.Precision.update_state"]], "recall (class in cyclops.evaluate.metrics.precision_recall)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall"]], "__add__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__add__"]], "__call__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__call__"]], "__init__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__init__"]], "__mul__() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.__mul__"]], "add_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.add_state"]], "clone() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.clone"]], "compute() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.compute"]], "reset_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.reset_state"]], "update_state() (recall method)": [[85, "cyclops.evaluate.metrics.precision_recall.Recall.update_state"]], "cyclops.evaluate.metrics.precision_recall_curve": [[86, "module-cyclops.evaluate.metrics.precision_recall_curve"]], "binaryprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve"]], "__add__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__add__"]], "__call__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__call__"]], "__init__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__init__"]], "__mul__() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.__mul__"]], "add_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.add_state"]], "clone() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.clone"]], "compute() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.compute"]], "reset_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.reset_state"]], "update_state() (binaryprecisionrecallcurve method)": [[87, "cyclops.evaluate.metrics.precision_recall_curve.BinaryPrecisionRecallCurve.update_state"]], "multiclassprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve"]], "__add__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__add__"]], "__call__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__call__"]], "__init__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__init__"]], "__mul__() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.__mul__"]], "add_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.add_state"]], "clone() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.clone"]], "compute() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.compute"]], "reset_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.reset_state"]], "update_state() (multiclassprecisionrecallcurve method)": [[88, "cyclops.evaluate.metrics.precision_recall_curve.MulticlassPrecisionRecallCurve.update_state"]], "multilabelprecisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve"]], "__add__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__add__"]], "__call__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__call__"]], "__init__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__init__"]], "__mul__() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.__mul__"]], "add_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.add_state"]], "clone() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.clone"]], "compute() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.compute"]], "reset_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.reset_state"]], "update_state() (multilabelprecisionrecallcurve method)": [[89, "cyclops.evaluate.metrics.precision_recall_curve.MultilabelPrecisionRecallCurve.update_state"]], "precisionrecallcurve (class in cyclops.evaluate.metrics.precision_recall_curve)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve"]], "__add__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__add__"]], "__call__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__call__"]], "__init__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__init__"]], "__mul__() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.__mul__"]], "add_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.add_state"]], "clone() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.clone"]], "compute() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.compute"]], "reset_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.reset_state"]], "update_state() (precisionrecallcurve method)": [[90, "cyclops.evaluate.metrics.precision_recall_curve.PrecisionRecallCurve.update_state"]], "cyclops.evaluate.metrics.roc": [[91, "module-cyclops.evaluate.metrics.roc"]], "binaryroccurve (class in cyclops.evaluate.metrics.roc)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve"]], "__add__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__add__"]], "__call__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__call__"]], "__init__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__init__"]], "__mul__() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.__mul__"]], "add_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.add_state"]], "clone() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.clone"]], "compute() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.compute"]], "reset_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.reset_state"]], "update_state() (binaryroccurve method)": [[92, "cyclops.evaluate.metrics.roc.BinaryROCCurve.update_state"]], "multiclassroccurve (class in cyclops.evaluate.metrics.roc)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve"]], "__add__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__add__"]], "__call__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__call__"]], "__init__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__init__"]], "__mul__() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.__mul__"]], "add_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.add_state"]], "clone() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.clone"]], "compute() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.compute"]], "reset_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.reset_state"]], "update_state() (multiclassroccurve method)": [[93, "cyclops.evaluate.metrics.roc.MulticlassROCCurve.update_state"]], "multilabelroccurve (class in cyclops.evaluate.metrics.roc)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve"]], "__add__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__add__"]], "__call__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__call__"]], "__init__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__init__"]], "__mul__() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.__mul__"]], "add_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.add_state"]], "clone() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.clone"]], "compute() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.compute"]], "reset_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.reset_state"]], "update_state() (multilabelroccurve method)": [[94, "cyclops.evaluate.metrics.roc.MultilabelROCCurve.update_state"]], "roccurve (class in cyclops.evaluate.metrics.roc)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve"]], "__add__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__add__"]], "__call__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__call__"]], "__init__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__init__"]], "__mul__() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.__mul__"]], "add_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.add_state"]], "clone() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.clone"]], "compute() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.compute"]], "reset_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.reset_state"]], "update_state() (roccurve method)": [[95, "cyclops.evaluate.metrics.roc.ROCCurve.update_state"]], "cyclops.evaluate.metrics.sensitivity": [[96, "module-cyclops.evaluate.metrics.sensitivity"]], "binarysensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity"]], "__add__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__add__"]], "__call__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__call__"]], "__init__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__init__"]], "__mul__() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.__mul__"]], "add_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.add_state"]], "clone() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.clone"]], "compute() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.compute"]], "reset_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.reset_state"]], "update_state() (binarysensitivity method)": [[97, "cyclops.evaluate.metrics.sensitivity.BinarySensitivity.update_state"]], "multiclasssensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity"]], "__add__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__add__"]], "__call__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__call__"]], "__init__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__init__"]], "__mul__() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.__mul__"]], "add_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.add_state"]], "clone() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.clone"]], "compute() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.compute"]], "reset_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.reset_state"]], "update_state() (multiclasssensitivity method)": [[98, "cyclops.evaluate.metrics.sensitivity.MulticlassSensitivity.update_state"]], "multilabelsensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity"]], "__add__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__add__"]], "__call__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__call__"]], "__init__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__init__"]], "__mul__() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.__mul__"]], "add_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.add_state"]], "clone() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.clone"]], "compute() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.compute"]], "reset_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.reset_state"]], "update_state() (multilabelsensitivity method)": [[99, "cyclops.evaluate.metrics.sensitivity.MultilabelSensitivity.update_state"]], "sensitivity (class in cyclops.evaluate.metrics.sensitivity)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity"]], "__add__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__add__"]], "__call__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__call__"]], "__init__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__init__"]], "__mul__() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.__mul__"]], "add_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.add_state"]], "clone() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.clone"]], "compute() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.compute"]], "reset_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.reset_state"]], "update_state() (sensitivity method)": [[100, "cyclops.evaluate.metrics.sensitivity.Sensitivity.update_state"]], "cyclops.evaluate.metrics.specificity": [[101, "module-cyclops.evaluate.metrics.specificity"]], "binaryspecificity (class in cyclops.evaluate.metrics.specificity)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity"]], "__add__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__add__"]], "__call__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__call__"]], "__init__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__init__"]], "__mul__() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.__mul__"]], "add_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.add_state"]], "clone() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.clone"]], "compute() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.compute"]], "reset_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.reset_state"]], "update_state() (binaryspecificity method)": [[102, "cyclops.evaluate.metrics.specificity.BinarySpecificity.update_state"]], "multiclassspecificity (class in cyclops.evaluate.metrics.specificity)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity"]], "__add__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__add__"]], "__call__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__call__"]], "__init__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__init__"]], "__mul__() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.__mul__"]], "add_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.add_state"]], "clone() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.clone"]], "compute() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.compute"]], "reset_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.reset_state"]], "update_state() (multiclassspecificity method)": [[103, "cyclops.evaluate.metrics.specificity.MulticlassSpecificity.update_state"]], "multilabelspecificity (class in cyclops.evaluate.metrics.specificity)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity"]], "__add__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__add__"]], "__call__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__call__"]], "__init__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__init__"]], "__mul__() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.__mul__"]], "add_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.add_state"]], "clone() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.clone"]], "compute() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.compute"]], "reset_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.reset_state"]], "update_state() (multilabelspecificity method)": [[104, "cyclops.evaluate.metrics.specificity.MultilabelSpecificity.update_state"]], "specificity (class in cyclops.evaluate.metrics.specificity)": [[105, "cyclops.evaluate.metrics.specificity.Specificity"]], "__add__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__add__"]], "__call__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__call__"]], "__init__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__init__"]], "__mul__() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.__mul__"]], "add_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.add_state"]], "clone() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.clone"]], "compute() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.compute"]], "reset_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.reset_state"]], "update_state() (specificity method)": [[105, "cyclops.evaluate.metrics.specificity.Specificity.update_state"]], "cyclops.evaluate.metrics.stat_scores": [[106, "module-cyclops.evaluate.metrics.stat_scores"]], "binarystatscores (class in cyclops.evaluate.metrics.stat_scores)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores"]], "__add__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__add__"]], "__call__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__call__"]], "__init__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__init__"]], "__mul__() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.__mul__"]], "add_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.add_state"]], "clone() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.clone"]], "compute() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.compute"]], "reset_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.reset_state"]], "update_state() (binarystatscores method)": [[107, "cyclops.evaluate.metrics.stat_scores.BinaryStatScores.update_state"]], "multiclassstatscores (class in cyclops.evaluate.metrics.stat_scores)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores"]], "__add__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__add__"]], "__call__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__call__"]], "__init__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__init__"]], "__mul__() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.__mul__"]], "add_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.add_state"]], "clone() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.clone"]], "compute() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.compute"]], "reset_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.reset_state"]], "update_state() (multiclassstatscores method)": [[108, "cyclops.evaluate.metrics.stat_scores.MulticlassStatScores.update_state"]], "multilabelstatscores (class in cyclops.evaluate.metrics.stat_scores)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores"]], "__add__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__add__"]], "__call__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__call__"]], "__init__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__init__"]], "__mul__() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.__mul__"]], "add_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.add_state"]], "clone() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.clone"]], "compute() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.compute"]], "reset_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.reset_state"]], "update_state() (multilabelstatscores method)": [[109, "cyclops.evaluate.metrics.stat_scores.MultilabelStatScores.update_state"]], "statscores (class in cyclops.evaluate.metrics.stat_scores)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores"]], "__add__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__add__"]], "__call__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__call__"]], "__init__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__init__"]], "__mul__() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.__mul__"]], "add_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.add_state"]], "clone() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.clone"]], "compute() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.compute"]], "reset_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.reset_state"]], "update_state() (statscores method)": [[110, "cyclops.evaluate.metrics.stat_scores.StatScores.update_state"]], "cyclops.monitor.clinical_applicator": [[111, "module-cyclops.monitor.clinical_applicator"]], "clinicalshiftapplicator (class in cyclops.monitor.clinical_applicator)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator"]], "age() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.age"]], "apply_shift() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.apply_shift"]], "custom() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.custom"]], "hospital_type() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.hospital_type"]], "month() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.month"]], "sex() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.sex"]], "time() (clinicalshiftapplicator method)": [[112, "cyclops.monitor.clinical_applicator.ClinicalShiftApplicator.time"]], "cyclops.monitor.synthetic_applicator": [[113, "module-cyclops.monitor.synthetic_applicator"]], "syntheticshiftapplicator (class in cyclops.monitor.synthetic_applicator)": [[114, "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator"]], "apply_shift() (syntheticshiftapplicator method)": [[114, "cyclops.monitor.synthetic_applicator.SyntheticShiftApplicator.apply_shift"]], "binary_noise_shift() (in module cyclops.monitor.synthetic_applicator)": [[115, "cyclops.monitor.synthetic_applicator.binary_noise_shift"]], "feature_association_shift() (in module cyclops.monitor.synthetic_applicator)": [[116, "cyclops.monitor.synthetic_applicator.feature_association_shift"]], "feature_swap_shift() (in module cyclops.monitor.synthetic_applicator)": [[117, "cyclops.monitor.synthetic_applicator.feature_swap_shift"]], "gaussian_noise_shift() (in module cyclops.monitor.synthetic_applicator)": [[118, "cyclops.monitor.synthetic_applicator.gaussian_noise_shift"]], "knockout_shift() (in module cyclops.monitor.synthetic_applicator)": [[119, "cyclops.monitor.synthetic_applicator.knockout_shift"]], "cyclops.query.base": [[120, "module-cyclops.query.base"]], "datasetquerier (class in cyclops.query.base)": [[121, "cyclops.query.base.DatasetQuerier"]], "db (datasetquerier attribute)": [[121, "cyclops.query.base.DatasetQuerier.db"]], "get_table() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.get_table"]], "list_columns() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_columns"]], "list_custom_tables() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_custom_tables"]], "list_schemas() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_schemas"]], "list_tables() (datasetquerier method)": [[121, "cyclops.query.base.DatasetQuerier.list_tables"]], "cyclops.query.eicu": [[122, "module-cyclops.query.eicu"]], "eicuquerier (class in cyclops.query.eicu)": [[123, "cyclops.query.eicu.EICUQuerier"]], "__init__() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.__init__"]], "get_table() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.get_table"]], "list_columns() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_columns"]], "list_custom_tables() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_custom_tables"]], "list_schemas() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_schemas"]], "list_tables() (eicuquerier method)": [[123, "cyclops.query.eicu.EICUQuerier.list_tables"]], "cyclops.query.gemini": [[124, "module-cyclops.query.gemini"]], "geminiquerier (class in cyclops.query.gemini)": [[125, "cyclops.query.gemini.GEMINIQuerier"]], "__init__() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.__init__"]], "care_units() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.care_units"]], "diagnoses() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.diagnoses"]], "get_table() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.get_table"]], "imaging() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.imaging"]], "ip_admin() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.ip_admin"]], "list_columns() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_columns"]], "list_custom_tables() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_custom_tables"]], "list_schemas() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_schemas"]], "list_tables() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.list_tables"]], "room_transfer() (geminiquerier method)": [[125, "cyclops.query.gemini.GEMINIQuerier.room_transfer"]], "cyclops.query.interface": [[126, "module-cyclops.query.interface"]], "queryinterface (class in cyclops.query.interface)": [[127, "cyclops.query.interface.QueryInterface"]], "__init__() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.__init__"]], "clear_data() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.clear_data"]], "data (queryinterface property)": [[127, "cyclops.query.interface.QueryInterface.data"]], "join() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.join"]], "ops() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.ops"]], "run() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.run"]], "save() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.save"]], "union() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.union"]], "union_all() (queryinterface method)": [[127, "cyclops.query.interface.QueryInterface.union_all"]], "cyclops.query.mimiciii": [[128, "module-cyclops.query.mimiciii"]], "mimiciiiquerier (class in cyclops.query.mimiciii)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier"]], "__init__() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.__init__"]], "chartevents() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.chartevents"]], "diagnoses() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.diagnoses"]], "get_table() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.get_table"]], "labevents() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.labevents"]], "list_columns() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_columns"]], "list_custom_tables() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_custom_tables"]], "list_schemas() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_schemas"]], "list_tables() (mimiciiiquerier method)": [[129, "cyclops.query.mimiciii.MIMICIIIQuerier.list_tables"]], "cyclops.query.mimiciv": [[130, "module-cyclops.query.mimiciv"]], "mimicivquerier (class in cyclops.query.mimiciv)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier"]], "__init__() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.__init__"]], "chartevents() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.chartevents"]], "diagnoses() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.diagnoses"]], "get_table() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.get_table"]], "labevents() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.labevents"]], "list_columns() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_columns"]], "list_custom_tables() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_custom_tables"]], "list_schemas() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_schemas"]], "list_tables() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.list_tables"]], "patients() (mimicivquerier method)": [[131, "cyclops.query.mimiciv.MIMICIVQuerier.patients"]], "cyclops.query.omop": [[132, "module-cyclops.query.omop"]], "omopquerier (class in cyclops.query.omop)": [[133, "cyclops.query.omop.OMOPQuerier"]], "__init__() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.__init__"]], "get_table() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.get_table"]], "list_columns() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_columns"]], "list_custom_tables() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_custom_tables"]], "list_schemas() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_schemas"]], "list_tables() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.list_tables"]], "map_concept_ids_to_name() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.map_concept_ids_to_name"]], "measurement() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.measurement"]], "observation() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.observation"]], "person() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.person"]], "visit_detail() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.visit_detail"]], "visit_occurrence() (omopquerier method)": [[133, "cyclops.query.omop.OMOPQuerier.visit_occurrence"]], "cyclops.query.ops": [[134, "module-cyclops.query.ops"]], "addcolumn (class in cyclops.query.ops)": [[135, "cyclops.query.ops.AddColumn"]], "__call__() (addcolumn method)": [[135, "cyclops.query.ops.AddColumn.__call__"]], "adddeltacolumn (class in cyclops.query.ops)": [[136, "cyclops.query.ops.AddDeltaColumn"]], "__call__() (adddeltacolumn method)": [[136, "cyclops.query.ops.AddDeltaColumn.__call__"]], "adddeltaconstant (class in cyclops.query.ops)": [[137, "cyclops.query.ops.AddDeltaConstant"]], "__call__() (adddeltaconstant method)": [[137, "cyclops.query.ops.AddDeltaConstant.__call__"]], "addnumeric (class in cyclops.query.ops)": [[138, "cyclops.query.ops.AddNumeric"]], "__call__() (addnumeric method)": [[138, "cyclops.query.ops.AddNumeric.__call__"]], "and (class in cyclops.query.ops)": [[139, "cyclops.query.ops.And"]], "__call__() (and method)": [[139, "cyclops.query.ops.And.__call__"]], "apply (class in cyclops.query.ops)": [[140, "cyclops.query.ops.Apply"]], "__call__() (apply method)": [[140, "cyclops.query.ops.Apply.__call__"]], "cast (class in cyclops.query.ops)": [[141, "cyclops.query.ops.Cast"]], "__call__() (cast method)": [[141, "cyclops.query.ops.Cast.__call__"]], "conditionafterdate (class in cyclops.query.ops)": [[142, "cyclops.query.ops.ConditionAfterDate"]], "__call__() (conditionafterdate method)": [[142, "cyclops.query.ops.ConditionAfterDate.__call__"]], "conditionbeforedate (class in cyclops.query.ops)": [[143, "cyclops.query.ops.ConditionBeforeDate"]], "__call__() (conditionbeforedate method)": [[143, "cyclops.query.ops.ConditionBeforeDate.__call__"]], "conditionendswith (class in cyclops.query.ops)": [[144, "cyclops.query.ops.ConditionEndsWith"]], "__call__() (conditionendswith method)": [[144, "cyclops.query.ops.ConditionEndsWith.__call__"]], "conditionequals (class in cyclops.query.ops)": [[145, "cyclops.query.ops.ConditionEquals"]], "__call__() (conditionequals method)": [[145, "cyclops.query.ops.ConditionEquals.__call__"]], "conditiongreaterthan (class in cyclops.query.ops)": [[146, "cyclops.query.ops.ConditionGreaterThan"]], "__call__() (conditiongreaterthan method)": [[146, "cyclops.query.ops.ConditionGreaterThan.__call__"]], "conditionin (class in cyclops.query.ops)": [[147, "cyclops.query.ops.ConditionIn"]], "__call__() (conditionin method)": [[147, "cyclops.query.ops.ConditionIn.__call__"]], "conditioninmonths (class in cyclops.query.ops)": [[148, "cyclops.query.ops.ConditionInMonths"]], "__call__() (conditioninmonths method)": [[148, "cyclops.query.ops.ConditionInMonths.__call__"]], "conditioninyears (class in cyclops.query.ops)": [[149, "cyclops.query.ops.ConditionInYears"]], "__call__() (conditioninyears method)": [[149, "cyclops.query.ops.ConditionInYears.__call__"]], "conditionlessthan (class in cyclops.query.ops)": [[150, "cyclops.query.ops.ConditionLessThan"]], "__call__() (conditionlessthan method)": [[150, "cyclops.query.ops.ConditionLessThan.__call__"]], "conditionlike (class in cyclops.query.ops)": [[151, "cyclops.query.ops.ConditionLike"]], "__call__() (conditionlike method)": [[151, "cyclops.query.ops.ConditionLike.__call__"]], "conditionregexmatch (class in cyclops.query.ops)": [[152, "cyclops.query.ops.ConditionRegexMatch"]], "__call__() (conditionregexmatch method)": [[152, "cyclops.query.ops.ConditionRegexMatch.__call__"]], "conditionstartswith (class in cyclops.query.ops)": [[153, "cyclops.query.ops.ConditionStartsWith"]], "__call__() (conditionstartswith method)": [[153, "cyclops.query.ops.ConditionStartsWith.__call__"]], "conditionsubstring (class in cyclops.query.ops)": [[154, "cyclops.query.ops.ConditionSubstring"]], "__call__() (conditionsubstring method)": [[154, "cyclops.query.ops.ConditionSubstring.__call__"]], "distinct (class in cyclops.query.ops)": [[155, "cyclops.query.ops.Distinct"]], "__call__() (distinct method)": [[155, "cyclops.query.ops.Distinct.__call__"]], "drop (class in cyclops.query.ops)": [[156, "cyclops.query.ops.Drop"]], "__call__() (drop method)": [[156, "cyclops.query.ops.Drop.__call__"]], "dropnulls (class in cyclops.query.ops)": [[157, "cyclops.query.ops.DropNulls"]], "__call__() (dropnulls method)": [[157, "cyclops.query.ops.DropNulls.__call__"]], "extracttimestampcomponent (class in cyclops.query.ops)": [[158, "cyclops.query.ops.ExtractTimestampComponent"]], "__call__() (extracttimestampcomponent method)": [[158, "cyclops.query.ops.ExtractTimestampComponent.__call__"]], "fillnull (class in cyclops.query.ops)": [[159, "cyclops.query.ops.FillNull"]], "__call__() (fillnull method)": [[159, "cyclops.query.ops.FillNull.__call__"]], "groupbyaggregate (class in cyclops.query.ops)": [[160, "cyclops.query.ops.GroupByAggregate"]], "__call__() (groupbyaggregate method)": [[160, "cyclops.query.ops.GroupByAggregate.__call__"]], "join (class in cyclops.query.ops)": [[161, "cyclops.query.ops.Join"]], "__call__() (join method)": [[161, "cyclops.query.ops.Join.__call__"]], "keep (class in cyclops.query.ops)": [[162, "cyclops.query.ops.Keep"]], "__call__() (keep method)": [[162, "cyclops.query.ops.Keep.__call__"]], "limit (class in cyclops.query.ops)": [[163, "cyclops.query.ops.Limit"]], "__call__() (limit method)": [[163, "cyclops.query.ops.Limit.__call__"]], "literal (class in cyclops.query.ops)": [[164, "cyclops.query.ops.Literal"]], "__call__() (literal method)": [[164, "cyclops.query.ops.Literal.__call__"]], "or (class in cyclops.query.ops)": [[165, "cyclops.query.ops.Or"]], "__call__() (or method)": [[165, "cyclops.query.ops.Or.__call__"]], "orderby (class in cyclops.query.ops)": [[166, "cyclops.query.ops.OrderBy"]], "__call__() (orderby method)": [[166, "cyclops.query.ops.OrderBy.__call__"]], "queryop (class in cyclops.query.ops)": [[167, "cyclops.query.ops.QueryOp"]], "__call__() (queryop method)": [[167, "cyclops.query.ops.QueryOp.__call__"]], "randomizeorder (class in cyclops.query.ops)": [[168, "cyclops.query.ops.RandomizeOrder"]], "__call__() (randomizeorder method)": [[168, "cyclops.query.ops.RandomizeOrder.__call__"]], "rename (class in cyclops.query.ops)": [[169, "cyclops.query.ops.Rename"]], "__call__() (rename method)": [[169, "cyclops.query.ops.Rename.__call__"]], "reorder (class in cyclops.query.ops)": [[170, "cyclops.query.ops.Reorder"]], "__call__() (reorder method)": [[170, "cyclops.query.ops.Reorder.__call__"]], "reorderafter (class in cyclops.query.ops)": [[171, "cyclops.query.ops.ReorderAfter"]], "__call__() (reorderafter method)": [[171, "cyclops.query.ops.ReorderAfter.__call__"]], "sequential (class in cyclops.query.ops)": [[172, "cyclops.query.ops.Sequential"]], "__add__() (sequential method)": [[172, "cyclops.query.ops.Sequential.__add__"]], "__call__() (sequential method)": [[172, "cyclops.query.ops.Sequential.__call__"]], "__init__() (sequential method)": [[172, "cyclops.query.ops.Sequential.__init__"]], "append() (sequential method)": [[172, "cyclops.query.ops.Sequential.append"]], "extend() (sequential method)": [[172, "cyclops.query.ops.Sequential.extend"]], "insert() (sequential method)": [[172, "cyclops.query.ops.Sequential.insert"]], "pop() (sequential method)": [[172, "cyclops.query.ops.Sequential.pop"]], "substring (class in cyclops.query.ops)": [[173, "cyclops.query.ops.Substring"]], "__call__() (substring method)": [[173, "cyclops.query.ops.Substring.__call__"]], "trim (class in cyclops.query.ops)": [[174, "cyclops.query.ops.Trim"]], "__call__() (trim method)": [[174, "cyclops.query.ops.Trim.__call__"]], "union (class in cyclops.query.ops)": [[175, "cyclops.query.ops.Union"]], "__call__() (union method)": [[175, "cyclops.query.ops.Union.__call__"]], "cyclops.report.report": [[176, "module-cyclops.report.report"]], "modelcardreport (class in cyclops.report.report)": [[177, "cyclops.report.report.ModelCardReport"]], "export() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.export"]], "from_json_file() (modelcardreport class method)": [[177, "cyclops.report.report.ModelCardReport.from_json_file"]], "log_citation() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_citation"]], "log_dataset() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_dataset"]], "log_descriptor() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_descriptor"]], "log_fairness_assessment() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_fairness_assessment"]], "log_from_dict() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_from_dict"]], "log_image() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_image"]], "log_license() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_license"]], "log_model_parameters() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_model_parameters"]], "log_owner() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_owner"]], "log_performance_metrics() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_performance_metrics"]], "log_plotly_figure() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_plotly_figure"]], "log_quantitative_analysis() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_quantitative_analysis"]], "log_reference() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_reference"]], "log_regulation() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_regulation"]], "log_risk() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_risk"]], "log_use_case() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_use_case"]], "log_user() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_user"]], "log_version() (modelcardreport method)": [[177, "cyclops.report.report.ModelCardReport.log_version"]], "cyclops.tasks.cxr_classification": [[178, "module-cyclops.tasks.cxr_classification"]], "cxrclassificationtask (class in cyclops.tasks.cxr_classification)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask"]], "__init__() (cxrclassificationtask method)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.__init__"]], "add_model() (cxrclassificationtask method)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.add_model"]], "data_type (cxrclassificationtask property)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.data_type"]], "evaluate() (cxrclassificationtask method)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.evaluate"]], "get_model() (cxrclassificationtask method)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.get_model"]], "list_models() (cxrclassificationtask method)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.list_models"]], "models_count (cxrclassificationtask property)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.models_count"]], "predict() (cxrclassificationtask method)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.predict"]], "task_type (cxrclassificationtask property)": [[179, "cyclops.tasks.cxr_classification.CXRClassificationTask.task_type"]], "cyclops.tasks.mortality_prediction": [[180, "module-cyclops.tasks.mortality_prediction"]], "mortalitypredictiontask (class in cyclops.tasks.mortality_prediction)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask"]], "__init__() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.__init__"]], "add_model() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.add_model"]], "data_type (mortalitypredictiontask property)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.data_type"]], "evaluate() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.evaluate"]], "get_model() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.get_model"]], "list_models() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.list_models"]], "list_models_params() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.list_models_params"]], "load_model() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.load_model"]], "models_count (mortalitypredictiontask property)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.models_count"]], "predict() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.predict"]], "save_model() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.save_model"]], "task_type (mortalitypredictiontask property)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.task_type"]], "train() (mortalitypredictiontask method)": [[181, "cyclops.tasks.mortality_prediction.MortalityPredictionTask.train"]], "cyclops.data": [[182, "module-cyclops.data"]], "cyclops.data.features": [[182, "module-cyclops.data.features"]], "cyclops.evaluate": [[183, "module-cyclops.evaluate"]], "cyclops.evaluate.fairness": [[183, "module-cyclops.evaluate.fairness"]], "cyclops.evaluate.metrics": [[183, "module-cyclops.evaluate.metrics"]], "cyclops.evaluate.metrics.functional": [[183, "module-cyclops.evaluate.metrics.functional"]], "cyclops.monitor": [[184, "module-cyclops.monitor"]], "cyclops.query": [[185, "module-cyclops.query"]], "cyclops.report": [[186, "module-cyclops.report"]], "cyclops.tasks": [[187, "module-cyclops.tasks"]]}})