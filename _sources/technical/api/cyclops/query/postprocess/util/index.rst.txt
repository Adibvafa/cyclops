:py:mod:`cyclops.query.postprocess.util`
========================================

.. py:module:: cyclops.query.postprocess.util

.. autoapi-nested-parse::

   Post-processing functions applied to queried data (Pandas DataFrames).

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   cyclops.query.postprocess.util.to_timestamp
   cyclops.query.postprocess.util.event_time_between
   cyclops.query.postprocess.util.plot_admit_discharge
   cyclops.query.postprocess.util.process_care_unit_changepoints



.. py:function:: to_timestamp(data: Union[pandas.Series, numpy.ndarray]) -> pandas.Series

   
   Convert a Pandas series or NumPy array to a datetime/timestamp type.

   :param data: Data to be converted.
   :type data: pandas.Series or numpy.ndarray

   :returns: The converted data.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:function:: event_time_between(event: pandas.Timestamp, admit: pandas.Series, discharge: pandas.Series, admit_inclusive: bool = True, discharge_inclusive: bool = False) -> pandas.Series

   
   Return whether an event time is between some start and end time.

   May also specify whether the comparison operators are inclusive or not..

   :param event: Event time.
   :type event: pandas.Timestamp
   :param admit: A series of timestamps.
   :type admit: pandas.Series
   :param discharge: A series of timestamps.
   :type discharge: pandas.Series
   :param admit_inclusive: Whether to have an inclusive inequality for the admit condition.
   :type admit_inclusive: bool
   :param discharge_inclusive: Whether to have an inclusive inequality for the discharge condition.
   :type discharge_inclusive: bool

   :returns: A boolean Series representing whether the event is between
             the start and end timestamps.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:function:: plot_admit_discharge(data: pandas.DataFrame, description: str = 'description', figsize: tuple = (10, 4)) -> None

   
   Plot a series of admit discharge times given a description.

   :param data: DataFrame with 'admit', 'discharge', and description columns.
                The admit and discharge columns must be convertable to Timestamps.
   :type data: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: process_care_unit_changepoints(data: pandas.DataFrame, care_unit_hierarchy: list) -> pandas.DataFrame

   
   Process changepoint care unit information in a hierarchical fashion.

   Using the admit, discharge, and care unit information, create a
   changepoint DataFrame usable for aggregation labelling purposes.
   If a patient is in multiple care units at a changepoint, the care
   unit highest in the hierarchy is selected.

   :param data: The admit, discharge, and care unit information for a single encounter.
                Expects columns "admit", "discharge", and CARE_UNIT.
   :type data: pandas.DataFrame
   :param care_unit_hierarchy: Ordered list of care units from most relevant to to least.
   :type care_unit_hierarchy: list

   :returns: Changepoint information with associated care unit. The care unit
             information is relevant up until the next change point
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

