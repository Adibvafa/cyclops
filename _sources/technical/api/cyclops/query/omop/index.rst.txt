:py:mod:`cyclops.query.omop`
============================

.. py:module:: cyclops.query.omop

.. autoapi-nested-parse::

   OMOP query API.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cyclops.query.omop.OMOPQuerier



Functions
~~~~~~~~~

.. autoapisummary::

   cyclops.query.omop._get_table_map



Attributes
~~~~~~~~~~

.. autoapisummary::

   cyclops.query.omop.LOGGER
   cyclops.query.omop.VISIT_OCCURRENCE
   cyclops.query.omop.VISIT_DETAIL
   cyclops.query.omop.PERSON
   cyclops.query.omop.MEASUREMENT
   cyclops.query.omop.CONCEPT
   cyclops.query.omop.OBSERVATION
   cyclops.query.omop.CARE_SITE
   cyclops.query.omop.VISIT_OCCURRENCE_ID
   cyclops.query.omop.PERSON_ID
   cyclops.query.omop.VISIT_START_DATETIME
   cyclops.query.omop.VISIT_END_DATETIME
   cyclops.query.omop.VISIT_DETAIL_START_DATETIME
   cyclops.query.omop.VISIT_DETAIL_END_DATETIME
   cyclops.query.omop.VISIT_CONCEPT_ID
   cyclops.query.omop.VISIT_TYPE_CONCEPT_ID
   cyclops.query.omop.VISIT_DETAIL_CONCEPT_ID
   cyclops.query.omop.VISIT_DETAIL_TYPE_CONCEPT_ID
   cyclops.query.omop.CARE_SITE_ID
   cyclops.query.omop.CONCEPT_NAME
   cyclops.query.omop.CONCEPT_ID
   cyclops.query.omop.CARE_SITE_SOURCE_VALUE
   cyclops.query.omop.OBSERVATION_CONCEPT_ID
   cyclops.query.omop.OBSERVATION_TYPE_CONCEPT_ID
   cyclops.query.omop.OBSERVATION_DATETIME
   cyclops.query.omop.MEASUREMENT_CONCEPT_ID
   cyclops.query.omop.MEASUREMENT_TYPE_CONCEPT_ID
   cyclops.query.omop.MEASUREMENT_DATETIME
   cyclops.query.omop.UNIT_CONCEPT_ID
   cyclops.query.omop.VALUE_AS_CONCEPT_ID
   cyclops.query.omop.VISIT_DETAIL_CONCEPT_NAME
   cyclops.query.omop.CARE_SITE_NAME
   cyclops.query.omop.GENDER_CONCEPT_NAME
   cyclops.query.omop.RACE_CONCEPT_NAME
   cyclops.query.omop.ETHNICITY_CONCEPT_NAME
   cyclops.query.omop.COLUMN_MAP
   cyclops.query.omop.ID
   cyclops.query.omop.NAME


.. py:data:: LOGGER
   

   

.. py:data:: VISIT_OCCURRENCE
   :annotation: = visit_occurrence

   

.. py:data:: VISIT_DETAIL
   :annotation: = visit_detail

   

.. py:data:: PERSON
   :annotation: = person

   

.. py:data:: MEASUREMENT
   :annotation: = measurement

   

.. py:data:: CONCEPT
   :annotation: = concept

   

.. py:data:: OBSERVATION
   :annotation: = observation

   

.. py:data:: CARE_SITE
   :annotation: = care_site

   

.. py:data:: VISIT_OCCURRENCE_ID
   :annotation: = visit_occurrence_id

   

.. py:data:: PERSON_ID
   :annotation: = person_id

   

.. py:data:: VISIT_START_DATETIME
   :annotation: = visit_start_datetime

   

.. py:data:: VISIT_END_DATETIME
   :annotation: = visit_end_datetime

   

.. py:data:: VISIT_DETAIL_START_DATETIME
   :annotation: = visit_detail_start_datetime

   

.. py:data:: VISIT_DETAIL_END_DATETIME
   :annotation: = visit_detail_end_datetime

   

.. py:data:: VISIT_CONCEPT_ID
   :annotation: = visit_concept_id

   

.. py:data:: VISIT_TYPE_CONCEPT_ID
   :annotation: = visit_type_concept_id

   

.. py:data:: VISIT_DETAIL_CONCEPT_ID
   :annotation: = visit_detail_concept_id

   

.. py:data:: VISIT_DETAIL_TYPE_CONCEPT_ID
   :annotation: = visit_detail_type_concept_id

   

.. py:data:: CARE_SITE_ID
   :annotation: = care_site_id

   

.. py:data:: CONCEPT_NAME
   :annotation: = concept_name

   

.. py:data:: CONCEPT_ID
   :annotation: = concept_id

   

.. py:data:: CARE_SITE_SOURCE_VALUE
   :annotation: = care_site_source_value

   

.. py:data:: OBSERVATION_CONCEPT_ID
   :annotation: = observation_concept_id

   

.. py:data:: OBSERVATION_TYPE_CONCEPT_ID
   :annotation: = observation_type_concept_id

   

.. py:data:: OBSERVATION_DATETIME
   :annotation: = observation_datetime

   

.. py:data:: MEASUREMENT_CONCEPT_ID
   :annotation: = measurement_concept_id

   

.. py:data:: MEASUREMENT_TYPE_CONCEPT_ID
   :annotation: = measurement_type_concept_id

   

.. py:data:: MEASUREMENT_DATETIME
   :annotation: = measurement_datetime

   

.. py:data:: UNIT_CONCEPT_ID
   :annotation: = unit_concept_id

   

.. py:data:: VALUE_AS_CONCEPT_ID
   :annotation: = value_as_concept_id

   

.. py:data:: VISIT_DETAIL_CONCEPT_NAME
   :annotation: = visit_detail_concept_name

   

.. py:data:: CARE_SITE_NAME
   :annotation: = care_site_name

   

.. py:data:: GENDER_CONCEPT_NAME
   :annotation: = gender_concept_name

   

.. py:data:: RACE_CONCEPT_NAME
   :annotation: = race_concept_name

   

.. py:data:: ETHNICITY_CONCEPT_NAME
   :annotation: = ethnicity_concept_name

   

.. py:data:: COLUMN_MAP
   :annotation: :dict

   

.. py:data:: ID
   :annotation: = id

   

.. py:data:: NAME
   :annotation: = name

   

.. py:function:: _get_table_map(schema_name: str) -> Dict

   
   Get table map.

   :param schema_name: Name of schema.
   :type schema_name: str

   :returns: A mapping of table names to the ORM table objects.
   :rtype: Dict















   ..
       !! processed by numpydoc !!

.. py:class:: OMOPQuerier(schema_name: str, **config_overrides)

   Bases: :py:obj:`cyclops.query.base.DatasetQuerier`

   
   OMOP querier.
















   ..
       !! processed by numpydoc !!
   .. py:method:: _map_concept_ids_to_name(source_table: sqlalchemy.sql.selectable.Subquery, source_cols: Union[str, List[str]]) -> sqlalchemy.sql.selectable.Subquery

      
      Map concept IDs in a source table to concept names from concept table.

      :param source_table: Source table with concept IDs.
      :type source_table: Subquery
      :param source_cols: List of columns names to consider as concept IDs for mapping.
      :type source_cols: list of str

      :returns: Query with mapped columns from concept table.
      :rtype: Subquery















      ..
          !! processed by numpydoc !!

   .. py:method:: _map_care_site_id(source_table: sqlalchemy.sql.selectable.Subquery) -> sqlalchemy.sql.selectable.Subquery

      
      Map care_site_id in a source table to care_site table.

      :param source_table: Source table with care_site_id.
      :type source_table: Subquery

      :returns: Query with mapped columns from care_site table.
      :rtype: Subquery















      ..
          !! processed by numpydoc !!

   .. py:method:: visit_occurrence(drop_null_person_ids=True, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP visit_occurrence table.

      :param drop_null_person_ids: Flag to say if entries should be dropped if 'person_id' is missing.
      :type drop_null_person_ids: bool, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface

      :param before_date: Get patient visits starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient visits starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param hospitals: Get patient visits by hospital sites.
      :type hospitals: str or list of str, optional
      :param years: Get patient visits by year.
      :type years: int or list of int, optional
      :param months: Get patient visits by month.
      :type months: int or list of int, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: visit_detail(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP visit_detail table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param before_date: Get patient visits starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient visits starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param years: Get patient visits by year.
      :type years: int or list of int, optional
      :param months: Get patient visits by month.
      :type months: int or list of int, optional
      :param care_unit: Filter on care_unit, accepts substring e.g. "Emergency Room".
      :type care_unit: str or list of str
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!

   .. py:method:: person(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP person table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param gender: Filter on gender.
      :type gender: str or list of str
      :param race: Filter on race.
      :type race: str or list of str
      :param ethnicity: Filter on ethnicity.
      :type ethnicity: str or list of str
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!

   .. py:method:: observation(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP observation table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param before_date: Get patient observations starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient observations starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param years: Get patient observations by year.
      :type years: int or list of int, optional
      :param months: Get patient observations by month.
      :type months: int or list of int, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!

   .. py:method:: measurement(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP measurement table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param before_date: Get patient measurements starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient measurements starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param years: Get patient measurements by year.
      :type years: int or list of int, optional
      :param months: Get patient measurements by month.
      :type months: int or list of int, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!


