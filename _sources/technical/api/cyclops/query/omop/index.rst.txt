:py:mod:`cyclops.query.omop`
============================

.. py:module:: cyclops.query.omop

.. autoapi-nested-parse::

   OMOP query API.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: OMOPQuerier(schema_name: str, **config_overrides)



   
   OMOP querier.
















   ..
       !! processed by numpydoc !!
   .. py:method:: visit_occurrence(drop_null_person_ids=True, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP visit_occurrence table.

      :param drop_null_person_ids: Flag to say if entries should be dropped if 'person_id' is missing.
      :type drop_null_person_ids: bool, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface

      :param before_date: Get patient visits starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient visits starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param hospitals: Get patient visits by hospital sites.
      :type hospitals: str or list of str, optional
      :param years: Get patient visits by year.
      :type years: int or list of int, optional
      :param months: Get patient visits by month.
      :type months: int or list of int, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: visit_detail(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP visit_detail table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param before_date: Get patient visits starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient visits starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param years: Get patient visits by year.
      :type years: int or list of int, optional
      :param months: Get patient visits by month.
      :type months: int or list of int, optional
      :param care_unit: Filter on care_unit, accepts substring e.g. "Emergency Room".
      :type care_unit: str or list of str
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!

   .. py:method:: person(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP person table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param gender: Filter on gender.
      :type gender: str or list of str
      :param race: Filter on race.
      :type race: str or list of str
      :param ethnicity: Filter on ethnicity.
      :type ethnicity: str or list of str
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!

   .. py:method:: observation(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP observation table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param before_date: Get patient observations starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient observations starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param years: Get patient observations by year.
      :type years: int or list of int, optional
      :param months: Get patient observations by month.
      :type months: int or list of int, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!

   .. py:method:: measurement(visit_occurrence_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query OMOP measurement table.

      :param visit_occurrence_table: Visit occurrence table to join on.
      :type visit_occurrence_table: Subquery, optional

      :param before_date: Get patient measurements starting before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patient measurements starting after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param years: Get patient measurements by year.
      :type years: int or list of int, optional
      :param months: Get patient measurements by month.
      :type months: int or list of int, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional

      :returns: Constructed query, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface















      ..
          !! processed by numpydoc !!


