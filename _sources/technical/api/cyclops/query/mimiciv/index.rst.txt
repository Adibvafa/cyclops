:py:mod:`cyclops.query.mimiciv`
===============================

.. py:module:: cyclops.query.mimiciv

.. autoapi-nested-parse::

   MIMIC-IV query API.

   Supports querying of MIMICIV-2.0.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: MIMICIVQuerier(**config_overrides)



   
   MIMICIV dataset querier.
















   ..
       !! processed by numpydoc !!
   .. py:method:: patients(**process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query MIMIC patient data.

      :param sex: Specify patient sex (one or multiple).
      :type sex: str or list of string, optional
      :param died: Specify True to get patients who have died, and False for those who haven't.
      :type died: bool, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: diagnoses(**process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query MIMIC diagnoses.

      :returns: Constructed table, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface

      :param diagnosis_versions: Get codes having certain ICD versions.
      :type diagnosis_versions: int or list of int, optional
      :param diagnosis_substring: Substring to match in the ICD code.
      :type diagnosis_substring: str, optional
      :param diagnosis_codes: Get only the specified ICD codes.
      :type diagnosis_codes: str or list of str, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: patient_diagnoses(patients_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query MIMIC patient diagnoses.

      :param patients: Patient encounters query used to join.
      :type patients: cyclops.query.util.TableTypes, optional

      :returns: Constructed table, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface

      :param diagnosis_versions: Get codes having certain ICD versions.
      :type diagnosis_versions: int or list of int, optional
      :param diagnosis_substring: Substring to match in the ICD code.
      :type diagnosis_substring: str, optional
      :param diagnosis_codes: Get only the specified ICD codes.
      :type diagnosis_codes: str or list of str, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: transfers(patients_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Get care unit table within a given set of encounters.

      :param patients_table: Patient encounters used to join.
      :type patients_table: cyclops.query.util.TableTypes, optional

      :returns: Constructed table, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface

      :param encounters: The encounter IDs on which to filter. If None, consider all encounters.
      :type encounters: list, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: care_units(patients_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterfaceProcessed

      
      Get care unit table within a given set of encounters.

      :param patients_table: Patient encounters to join with transfers.
      :type patients_table: cyclops.query.util.TableTypes, optional

      :returns: Constructed table, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterfaceProcessed

      :param encounters: Get the specific encounter IDs.
      :type encounters: int or list of int, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: patient_encounters(patients_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query MIMIC patient encounters.

      :param patients_table: Optionally provide a patient table when getting patient encounters.
      :type patients_table: cyclops.query.util.TableTypes, optional

      :returns: Constructed table, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface

      :param sex: Specify patient sex (one or multiple).
      :type sex: str or list of string, optional
      :param died: Specify True to get patients who have died, and False for those who haven't.
      :type died: bool, optional
      :param died_binarize_col: Binarize the died condition and save as a column with label
                                died_binarize_col.
      :type died_binarize_col: str, optional
      :param before_date: Get patients encounters before some date.
                          If a string, provide in YYYY-MM-DD format.
      :type before_date: datetime.datetime or str
      :param after_date: Get patients encounters after some date.
                         If a string, provide in YYYY-MM-DD format.
      :type after_date: datetime.datetime or str
      :param years: Get patient encounters by year.
      :type years: int or list of int, optional
      :param months: Get patient encounters by month.
      :type months: int or list of int, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: events(patient_encounters_table: Optional[cyclops.query.util.TableTypes] = None, **process_kwargs) -> cyclops.query.interface.QueryInterface

      
      Query MIMIC events.

      :param patient_encounters_table: Optionally provide a patient encounter table to join with events.
      :type patient_encounters_table: cyclops.query.util.TableTypes, optional

      :returns: Constructed table, wrapped in an interface object.
      :rtype: cyclops.query.interface.QueryInterface

      :param categories: Restrict to certain categories.
      :type categories: str or list of str, optional
      :param event_names: Restrict to certain event names.
      :type event_names: str or list of str, optional
      :param event_name_substring: Substring to search event names to filter.
      :type event_name_substring: str, optional
      :param limit: Limit the number of rows returned.
      :type limit: int, optional















      ..
          !! processed by numpydoc !!


