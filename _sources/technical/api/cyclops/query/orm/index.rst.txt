:py:mod:`cyclops.query.orm`
===========================

.. py:module:: cyclops.query.orm

.. autoapi-nested-parse::

   Object Relational Mapper (ORM) using sqlalchemy.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: Database(config: omegaconf.DictConfig)

   
   Database class.

   .. attribute:: config

      Configuration stored in object.

      :type: argparse.Namespace

   .. attribute:: engine

      SQL extraction engine.

      :type: sqlalchemy.engine.base.Engine

   .. attribute:: inspector

      Module for schema inspection.

      :type: sqlalchemy.engine.reflection.Inspector

   .. attribute:: session

      :type: sqlalchemy.orm.session.Session















   ..
       !! processed by numpydoc !!
   .. py:method:: run_query(query: Union[cyclops.query.util.TableTypes, str], limit: Optional[int] = None, backend: Literal[pandas, dask] = 'pandas', index_col: Optional[str] = None, n_partitions: Optional[int] = None) -> Union[pandas.DataFrame, dask.dataframe.DataFrame]

      
      Run query.

      :param query: Query to run.
      :param limit: Limit query result to limit.
      :param backend: Backend computing framework to use, Pandas or Dask.
      :param index_col: Column which becomes the index, and defines the partitioning.
                        Should be a indexed column in the SQL server, and any orderable type.
      :param n_partitions: Number of partitions. Check dask documentation for additional details.

      :returns: Extracted data from query.
      :rtype: pandas.DataFrame or dask.DataFrame















      ..
          !! processed by numpydoc !!

   .. py:method:: save_query_to_csv(query: cyclops.query.util.TableTypes, path: str) -> str

      
      Save query in a .csv format.

      :param query: Query to save.
      :type query: cyclops.query.util.TableTypes
      :param path: Save path.

      :returns: Processed save path for upstream use.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: save_query_to_parquet(query: cyclops.query.util.TableTypes, path: str) -> str

      
      Save query in a .parquet format.

      :param query: Query to save.
      :type query: cyclops.query.util.TableTypes
      :param path: Save path.

      :returns: Processed save path for upstream use.
      :rtype: str















      ..
          !! processed by numpydoc !!


