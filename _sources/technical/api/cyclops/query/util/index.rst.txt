:py:mod:`cyclops.query.util`
============================

.. py:module:: cyclops.query.util

.. autoapi-nested-parse::

   Utility functions for querying.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: DBSchema

   
   Database schema wrapper.

   :param name: Name of schema.
   :type name: str
   :param data: Metadata for schema.
   :type data: sqlalchemy.sql.schema.MetaData















   ..
       !! processed by numpydoc !!

.. py:class:: DBTable

   
   Database table wrapper.

   :param name: Name of table.
   :type name: str
   :param data: Metadata for schema.
   :type data: sqlalchemy.sql.schema.Table















   ..
       !! processed by numpydoc !!

.. py:function:: ckwarg(kwargs: dict, kwarg: str)

   
   Get the value of a conditional keyword argument.

   A keyword argument may or may not be specified in some
   keyword arguments. If specified, return the value,
   otherwise return None.

   :param kwargs: Process keyword arguments.
   :type kwargs: dict
   :param kwarg: The keyword argument of interest.
   :type kwarg: str

   :returns: The value of the keyword argument if it exists, otherwise None.
   :rtype: any, optional















   ..
       !! processed by numpydoc !!

.. py:function:: remove_kwargs(process_kwargs: dict, kwargs: Union[str, List[str]])

   
   Remove some keyword arguments from process_kwargs if they exist.

   :param process_kwargs: Process keyword arguments.
   :type process_kwargs: dict
   :param kwargs: The keyword arguments to remove should they exist.
   :type kwargs: str or list of str















   ..
       !! processed by numpydoc !!

.. py:function:: param_types_to_type(relevant_types: List[Any], to_type_fn: Callable) -> Callable

   
   Convert TableTypes parameters to a specified type.

   A decorator which processes a function's arguments by taking all
   parameters with type in relevant_types and converting them using
   some to_type_fn function. Non-relevant types are left alone.

   :param relevant_types: Types to process.
   :type relevant_types: list
   :param to_type_fn: Function to process the relevant types
   :type to_type_fn: Callable

   :returns: The processed function.
   :rtype: Callable















   ..
       !! processed by numpydoc !!

.. py:function:: table_params_to_type(to_type: TableTypes) -> Callable

   
   Decorate to convert TableTypes params to a specified type.

   :param to_type: The type to which to convert.
   :type to_type: cyclops.query.util.TableTypes

   :returns: The processed function.
   :rtype: Callable















   ..
       !! processed by numpydoc !!

.. py:function:: get_column(table: TableTypes, col: str)

   
   Extract a column object from a table by name.

   :param table: The table with the column.
   :type table: cyclops.query.util.TableTypes
   :param col: Name of column to extract.
   :type col: str

   :returns: The corresponding column in the table.
   :rtype: sqlalchemy.sql.schema.Column















   ..
       !! processed by numpydoc !!

.. py:function:: filter_columns(table: TableTypes, cols: Union[str, List[str]]) -> sqlalchemy.sql.selectable.Subquery

   
   Filter a table, keeping only the specified columns.

   :param table: The table with the column.
   :type table: cyclops.query.util.TableTypes
   :param cols: Name of columns to keep.
   :type cols: str or list of str

   :returns: Table with only the specified columns.
   :rtype: sqlalchemy.sql.selectable.Subquery















   ..
       !! processed by numpydoc !!

.. py:function:: get_columns(table: TableTypes, cols: Union[str, List[str]])

   
   Extract a number of columns from the table.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes
   :param cols: Names of columns to extract.
   :type cols: str or list of str

   :returns: The corresponding columns in the table.
   :rtype: list of sqlalchemy.sql.schema.Column















   ..
       !! processed by numpydoc !!

.. py:function:: get_column_names(table: TableTypes)

   
   Extract column names from a table.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes

   :returns: The table column names.
   :rtype: list of str















   ..
       !! processed by numpydoc !!

.. py:function:: has_columns(table: TableTypes, cols: Union[str, List[str]], raise_error: bool = False)

   
   Check whether a table has all of the specified columns.

   :param table: Table to check.
   :type table: cyclops.query.util.TableTypes
   :param cols: Required columns.
   :type cols: str or list of str
   :param raise_error: Whether to raise an error if the required columns are not found.
   :type raise_error: bool

   :returns: True if all required columns are present, otherwise False.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: assert_table_has_columns(*args, **kwargs) -> Callable

   
   Assert that TableTypes params have the necessary columns.

   assert_table_has_columns(["A", "B"], None) is equivalent to
   assert_table_has_columns(["A", "B"]) but may be necessary when
   wanting to check, assert_table_has_columns(["A"], None, ["C"])

   Can also check keyword arguments, e.g., optional queries,
   assert_table_has_columns(["A"], kwarg_table=["D"])

   :param \*args: Ordered arguments corresponding to the function's table-type args.
   :param \*\*kwargs: Keyword arguments corresponding to the function's table-type kwargs.

   :returns: Decorator function.
   :rtype: Callable















   ..
       !! processed by numpydoc !!

.. py:function:: drop_columns(table: TableTypes, drop_cols: Union[str, List[str]]) -> sqlalchemy.sql.selectable.Subquery

   
   Drop, or remove, some columns from a table.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes
   :param col: Names of columns to drop.
   :type col: str or list of str

   :returns: The corresponding table with columns dropped.
   :rtype: sqlalchemy.sql.selectable.Subquery















   ..
       !! processed by numpydoc !!

.. py:function:: rename_columns(table: TableTypes, rename_map: dict) -> sqlalchemy.sql.selectable.Subquery

   
   Rename a table's columns.

   Rename the table's columns according to a dictionary of strings,
   where the key is the current name, and the value is the replacement.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes
   :param d: Dictionary mapping current column names (key) to new ones (value).
   :type d: dict

   :returns: The corresponding table with columns renamed.
   :rtype: sqlalchemy.sql.selectable.Subquery















   ..
       !! processed by numpydoc !!

.. py:function:: reorder_columns(table: TableTypes, cols: List[str]) -> sqlalchemy.sql.selectable.Subquery

   
   Reorder a table's columns.

   :param table: The table to reorder.
   :type table: cyclops.query.util.TableTypes
   :param cols: New order of columns, which must include all existing columns.
   :type cols: list of str

   :returns: The reordered table.
   :rtype: sqlalchemy.sql.selectable.Subquery















   ..
       !! processed by numpydoc !!

.. py:function:: apply_to_columns(table: TableTypes, col_names: Union[str, List[str]], func_: Callable, new_col_labels: Optional[Union[str, List[str]]] = None) -> sqlalchemy.sql.selectable.Subquery

   
   Apply a function to some columns.

   This function can change existing columns or create new
   columns depending on whether new_col_labels is specified.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes
   :param col_names: Columns to which to apply the function.
   :type col_names: str or list of str
   :param func_: Function to apply to the columns, where it takes an column
                 as its only parameter and returns another column object.
   :type func_: Callable
   :param new_col_labels: If specified, create new columns with these labels. Otherwise,
                          apply the function to the existing columns.
   :type new_col_labels: str or list of str, optional

   :returns: The table with function applied.
   :rtype: sqlalchemy.sql.selectable.Subquery















   ..
       !! processed by numpydoc !!

.. py:function:: trim_columns(table: TableTypes, cols: Union[str, List[str]], new_col_labels: Optional[Union[str, List[str]]] = None) -> sqlalchemy.sql.selectable.Subquery

   
   Trim, or strip, specified columns.

   Trimming refers to the removal of leading/trailing whitespace.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes
   :param cols: Names of columns to trim.
   :type cols: str or list of str
   :param new_col_labels: If specified, create new columns with these labels. Otherwise,
                          apply the function to the existing columns.
   :type new_col_labels: str or list of str, optional

   :returns: The table with the specified columns trimmed.
   :rtype: sqlalchemy.sql.selectable.Subquery















   ..
       !! processed by numpydoc !!

.. py:function:: process_elem(elem: Any, **kwargs: bool) -> Any

   
   Preprocess some basic object such as an integer, float, or string.

   :param elem: An element such as an integer, float, or string.
   :type elem: any
   :param \*\*kwargs: Preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: The preprocessed element.
   :rtype: Any















   ..
       !! processed by numpydoc !!

.. py:function:: process_list(lst: Union[Any, List[Any]], **kwargs: bool) -> List[Any]

   
   Preprocess a list of elements.

   :param lst: A list of elements such as integers, floats, or strings.
   :type lst: any or list of any
   :param \*\*kwargs: Preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: The preprocessed element.
   :rtype: Any















   ..
       !! processed by numpydoc !!

.. py:function:: process_column(col: sqlalchemy.sql.schema.Column, **kwargs: bool) -> sqlalchemy.sql.schema.Column

   
   Preprocess a Column object.

   :param col: A column to preprocess.
   :type col: sqlalchemy.sql.schema.Column
   :param \*\*kwargs: Preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: The processed column.
   :rtype: sqlalchemy.sql.schema.Column















   ..
       !! processed by numpydoc !!

.. py:function:: equals(col: sqlalchemy.sql.schema.Column, value: Any, lower: bool = True, trim: bool = True, **kwargs: bool) -> sqlalchemy.sql.elements.BinaryExpression

   
   Condition that a column has some value.

   Assumes that if searching for a string, both the value and column values
   should be converted to lowercase and trimmed of leading/trailing whitespace.

   :param col: The column to condition.
   :type col: sqlalchemy.sql.schema.Column
   :param val: The value to match in the column.
   :type val: Any
   :param lower: Whether to convert the value and column to lowercase.
                 This is only relevant when the column/value are strings.
   :type lower: bool, default=True
   :param trim: Whether to trim (strip) whitespace on the value and column.
                This is only relevant when the column/value are strings.
   :type trim: bool, default=True
   :param \*\*kwargs: Remaining preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: An expression representing where the condition was satisfied.
   :rtype: sqlalchemy.sql.elements.BinaryExpression















   ..
       !! processed by numpydoc !!

.. py:function:: not_equals(col: sqlalchemy.sql.schema.Column, value: Any, lower: bool = True, trim: bool = True, **kwargs: bool) -> sqlalchemy.sql.elements.BinaryExpression

   
   Condition that a column is not equal to some value.

   Assumes that if searching for a string, both the value and column values
   should be converted to lowercase and trimmed of leading/trailing whitespace.

   :param col: The column to condition.
   :type col: sqlalchemy.sql.schema.Column
   :param val: The value to match in the column.
   :type val: Any
   :param lower: Whether to convert the value and column to lowercase.
                 This is only relevant when the column/value are strings.
   :type lower: bool, default=True
   :param trim: Whether to trim (strip) whitespace on the value and column.
                This is only relevant when the column/value are strings.
   :type trim: bool, default=True
   :param \*\*kwargs: Remaining preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: An expression representing where the condition was satisfied.
   :rtype: sqlalchemy.sql.elements.BinaryExpression















   ..
       !! processed by numpydoc !!

.. py:function:: has_string_format(col: sqlalchemy.sql.schema.Column, value: Any, fmt: str, to_str: bool = True, **kwargs: bool) -> sqlalchemy.sql.elements.BinaryExpression

   
   Condition that a column has some string formatting.

   Assumes that we're searching for a string, performing
   the relevant conversion.

   :param col: The column to condition.
   :type col: sqlalchemy.sql.schema.Column
   :param value: A value to be implanted in the string formatting.
   :type value: Any
   :param fmt: The string format to match in the column.
   :type fmt: str
   :param to_str: Whether to convert the value/column to string type.
   :type to_str: bool, default=True
   :param \*\*kwargs: Remaining preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: An expression representing where the condition was satisfied.
   :rtype: sqlalchemy.sql.elements.BinaryExpression















   ..
       !! processed by numpydoc !!

.. py:function:: has_substring(col: sqlalchemy.sql.schema.Column, substring: Any, lower: bool = True, **kwargs: bool) -> sqlalchemy.sql.elements.BinaryExpression

   
   Condition that a column has some substring.

   Assumes that we're searching for a string, where both the value and
   column values should be converted to strings and made lowercase.

   :param col: The column to condition.
   :type col: sqlalchemy.sql.schema.Column
   :param substring: The substring to match in the column.
   :type substring: Any
   :param lower: Whether to convert the value and column to lowercase.
                 This is only relevant when the column/value are strings.
   :type lower: bool, default=True
   :param \*\*kwargs: Remaining preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: An expression representing where the condition was satisfied.
   :rtype: sqlalchemy.sql.elements.BinaryExpression















   ..
       !! processed by numpydoc !!

.. py:function:: starts_with(col: sqlalchemy.sql.schema.Column, value: Any, lower: bool = True, trim: bool = True, **kwargs: bool) -> sqlalchemy.sql.elements.BinaryExpression

   
   Condition that a column starts with some value/string.

   Assumes that we're searching for a string, where both the value and
   column values should be converted to strings, made lowercase, and
   trimmed of leading/trailing whitespace.

   :param col: The column to condition.
   :type col: sqlalchemy.sql.schema.Column
   :param value: The value to match at the start.
   :type value: Any
   :param lower: Whether to convert the value and column to lowercase.
                 This is only relevant when the column/value are strings.
   :type lower: bool, default=True
   :param trim: Whether to trim (strip) whitespace on the value and column.
                This is only relevant when the column/value are strings.
   :type trim: bool, default=True
   :param \*\*kwargs: Remaining preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: An expression representing where the condition was satisfied.
   :rtype: sqlalchemy.sql.elements.BinaryExpression















   ..
       !! processed by numpydoc !!

.. py:function:: ends_with(col: sqlalchemy.sql.schema.Column, value: Any, lower: bool = True, trim: bool = True, **kwargs: bool) -> sqlalchemy.sql.elements.BinaryExpression

   
   Condition that a column ends with some value/string.

   Assumes that we're searching for a string, where both the value and
   column values should be converted to strings, made lowercase, and
   trimmed of leading/trailing whitespace.

   :param col: The column to condition.
   :type col: sqlalchemy.sql.schema.Column
   :param value: The value to match at the end.
   :type value: Any
   :param lower: Whether to convert the value and column to lowercase.
                 This is only relevant when the column/value are strings.
   :type lower: bool, default=True
   :param trim: Whether to trim (strip) whitespace on the value and column.
                This is only relevant when the column/value are strings.
   :type trim: bool, default=True
   :param \*\*kwargs: Remaining preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: An expression representing where the condition was satisfied.
   :rtype: sqlalchemy.sql.elements.BinaryExpression















   ..
       !! processed by numpydoc !!

.. py:function:: in_(col: sqlalchemy.sql.schema.Column, lst: List[Any], lower: bool = True, trim: bool = True, **kwargs: bool) -> sqlalchemy.sql.elements.BinaryExpression

   
   Condition that a column value is in a list of values.

   Assumes that if searching for a string, both the value and column values
   should be converted to lowercase and trimmed of leading/trailing whitespace.

   :param col: The column to condition.
   :type col: sqlalchemy.sql.schema.Column
   :param lst: The value to match at the start.
   :type lst: list of any
   :param lower: Whether to convert the value and column to lowercase.
                 This is only relevant when the column/value are strings.
   :type lower: bool, default=True
   :param trim: Whether to trim (strip) whitespace on the value and column.
                This is only relevant when the column/value are strings.
   :type trim: bool, default=True
   :param \*\*kwargs: Remaining preprocessing keyword arguments.
   :type \*\*kwargs: dict, optional

   :returns: An expression representing where the condition was satisfied.
   :rtype: sqlalchemy.sql.elements.BinaryExpression















   ..
       !! processed by numpydoc !!

.. py:function:: check_timestamp_columns(table: TableTypes, cols: Union[str, List[str]], raise_error=False)

   
   Check whether some columns are Date or DateTime columns.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes
   :param cols: Column names to check.
   :type cols: str or list of str
   :param raise_error: Whether to raise an error if one of the columns are none of the types.
   :type raise_error: bool

   :returns: Whether all of the columns are one of the types.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: get_delta_column(table: TableTypes, years: Optional[str] = None, months: Optional[str] = None, days: Optional[str] = None, hours: Optional[str] = None) -> sqlalchemy.sql.schema.Column

   
   Create a time delta column.

   Create a time delta (interval) column from a number of
   numeric timestamp columns.

   Warning: Null values in each specified numeric time column are coalesced to 0.

   :param table: The table.
   :type table: cyclops.query.util.TableTypes
   :param years: Years column.
   :type years: None or str
   :param months: Months column.
   :type months: None or str
   :param days: Days column.
   :type days: None or str
   :param hours: Hours column.
   :type hours: None or str

   :returns: Combined delta/interval column.
   :rtype: sqlalchemy.sql.schema.Column















   ..
       !! processed by numpydoc !!

