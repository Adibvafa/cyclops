:py:mod:`cyclops.query.interface`
=================================

.. py:module:: cyclops.query.interface

.. autoapi-nested-parse::

   A query interface class to wrap database objects and queries.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: QueryInterface

   
   An interface dataclass to wrap queries, and run them.

   :param database: Database object to create ORM, and query data.
   :type database: cyclops.orm.Database
   :param query: The query.
   :type query: cyclops.query.util.TableTypes
   :param data: Data returned from executing the query, as Pandas DataFrame.
   :type data: pandas.DataFrame
   :param _run_args: Private dictionary attribute to keep track of arguments
                     passed to run() method.
   :type _run_args: dict















   ..
       !! processed by numpydoc !!
   .. py:method:: run(limit: Optional[int] = None, backend: Literal[pandas, dask] = 'pandas', index_col: Optional[str] = None, n_partitions: Optional[int] = None) -> Union[pandas.DataFrame, dask.dataframe.DataFrame]

      
      Run the query, and fetch data.

      :param limit: No. of rows to limit the query return.
      :param backend: Backend computing framework to use, Pandas or Dask.
      :param index_col: Column which becomes the index, and defines the partitioning.
                        Should be a indexed column in the SQL server, and any orderable type.
      :param n_partitions: Number of partitions. Check dask documentation for additional details.

      :returns: Query result dataframe.
      :rtype: pandas.DataFrame or dask.DataFrame















      ..
          !! processed by numpydoc !!

   .. py:method:: save(path: str, file_format: str = 'parquet') -> str

      
      Save the query.

      :param save_path: Path where the file will be saved.
      :type save_path: str
      :param file_format: File format of the file to save.
      :type file_format: str

      :returns: Processed save path for upstream use.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: clear_data() -> None

      
      Clear data container.

      Sets the data attribute to None, thus clearing the dataframe contained.















      ..
          !! processed by numpydoc !!


.. py:class:: QueryInterfaceProcessed

   
   An interface dataclass to wrap queries, and run them with post-processing.

   A similar dataclass to QueryInterface, where custom post-processing
   functions on the pandas dataframe returned from the query can be run. However,
   this prevents the query from being further used, and hence is declared as
   private attribute.

   :param database: Database object to create ORM, and query data.
   :type database: cyclops.orm.Database
   :param _query: The query.
   :type _query: cyclops.query.util.TableTypes
   :param process_fn: Process function to apply on the pandas dataframe returned from the query.
   :type process_fn: Callable
   :param _run_args: Private dictionary attribute to keep track of arguments
                     passed to run() method.
   :type _run_args: dict
   :param data: Data returned from executing the query, as Pandas DataFrame.
   :type data: pandas.DataFrame















   ..
       !! processed by numpydoc !!
   .. py:method:: run(limit: Optional[int] = None, backend: Optional[str] = 'pandas', index_col: Optional[str] = None, n_partitions: Optional[int] = None) -> Union[pandas.DataFrame, dask.dataframe.DataFrame]

      
      Run the query, and fetch data.

      :param limit: No. of rows to limit the query return.
      :type limit: int, optional
      :param backend: Backend computing framework to use, Pandas or Dask.
      :type backend: str, optional
      :param index_col: Column which becomes the index, and defines the partitioning.
                        Should be a indexed column in the SQL server, and any orderable type.
      :type index_col: str, optional
      :param n_partitions: Number of partitions. Check dask documentation for additional details.
      :type n_partitions: int, optional

      :returns: Query result dataframe.
      :rtype: pandas.DataFrame or dask.DataFrame















      ..
          !! processed by numpydoc !!

   .. py:method:: save(path: str, file_format: str = 'parquet') -> str

      
      Save the processed query.

      :param save_path: Path where the file will be saved.
      :type save_path: str
      :param file_format: File format of the file to save.
      :type file_format: str

      :returns: Processed save path for upstream use.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: clear_data() -> None

      
      Clear data container.

      Sets the data attribute to None, thus clearing the dataframe contained.















      ..
          !! processed by numpydoc !!


