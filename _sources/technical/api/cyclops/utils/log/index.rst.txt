:py:mod:`cyclops.utils.log`
===========================

.. py:module:: cyclops.utils.log

.. autoapi-nested-parse::

   Python logging function.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: formatter_message(message: str, use_color: Optional[bool] = True) -> str

   
   Format message.

   :param message: Message format.
   :type message: str
   :param use_color:
   :type use_color: bool, optional

   :returns: Formatted message.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:class:: Formatter(msg: Optional[str] = formatter_message(LOG_FORMAT, True), use_color=True)



   
   Formatter.

   .. attribute:: use_color

      Flag to toggle use of color.

      :type: bool















   ..
       !! processed by numpydoc !!
   .. py:method:: format(record: logging.LogRecord) -> str

      
      Apply formatting.

      :param record: Record object for logging.
      :type record: logging.LogRecord

      :returns: Formatted string for log.
      :rtype: str















      ..
          !! processed by numpydoc !!


.. py:function:: setup_logging(log_path: Optional[str] = None, log_level: Union[int, str] = 'DEBUG', print_level: Union[int, str] = 'INFO', logger: Optional[logging.Logger] = None, use_color: Optional[bool] = True)

   
   Create logger, and set it up.

   :param log_path: Path to output log file.
   :type log_path: str, optional
   :param log_level: Log level for logging, defaults to DEBUG.
   :type log_level: str, optional
   :param print_level: Print level for logging, defaults to INFO.
   :type print_level: str, optional
   :param logger: Pass logger if already exists, else a new logger object is created.
   :type logger: logging.Logger, optional
   :param use_color: Use colored logging.
   :type use_color: bool, optional















   ..
       !! processed by numpydoc !!

