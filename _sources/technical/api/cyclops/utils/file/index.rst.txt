:py:mod:`cyclops.utils.file`
============================

.. py:module:: cyclops.utils.file

.. autoapi-nested-parse::

   Utility functions for saving/loading files.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   cyclops.utils.file.join
   cyclops.utils.file.exchange_extension
   cyclops.utils.file.process_file_save_path
   cyclops.utils.file.process_dir_save_path
   cyclops.utils.file.save_dataframe
   cyclops.utils.file.load_dataframe
   cyclops.utils.file.save_array
   cyclops.utils.file.load_array
   cyclops.utils.file.save_pickle
   cyclops.utils.file.load_pickle
   cyclops.utils.file.listdir_nonhidden
   cyclops.utils.file.yield_dataframes
   cyclops.utils.file.concat_consequtive_dataframes
   cyclops.utils.file.save_consequtive_dataframes
   cyclops.utils.file.yield_pickled_files



Attributes
~~~~~~~~~~

.. autoapisummary::

   cyclops.utils.file.LOGGER


.. py:data:: LOGGER
   

   

.. py:function:: join(*paths: str) -> str

   
   Robustly join paths.

   os.path.join only may cause problems with some filepaths (especially on Windows).

   :param paths: file paths
   :type paths: str

   :returns: The joined path of all input paths.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: exchange_extension(file_path: str, new_ext: str) -> str

   
   Exchange one file extension for another.

   :param file_path: File path in which to exchange the extension.
   :type file_path: str
   :param new_ext: New extension to replace the existing extension.
   :type new_ext: str

   :returns: File path with the new extension.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: process_file_save_path(save_path: str, file_format: str, create_dir: bool = True) -> str

   
   Process file save path, perform checks, and possibly create a parent directory.

   :param save_path: Path where the file will be saved.
   :type save_path: str
   :param file_format: File format of the file to save.
   :type file_format: str
   :param create_dir: If True, create the parent directory path if needed.
   :type create_dir: bool

   :returns: The processed save path.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: process_dir_save_path(save_path: str, create_dir: bool = True) -> str

   
   Process directory save path, perform checks, and possibly create the directory.

   :param save_path: Path where the file will be saved.
   :type save_path: str
   :param create_dir: If True, create the directory if needed.
   :type create_dir: bool

   :returns: The processed save path.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: save_dataframe(data: pandas.DataFrame, save_path: str, file_format: str = 'parquet', log: bool = True) -> str

   
   Save a pandas.DataFrame object to file.

   :param data: Dataframe to save.
   :type data: pandas.DataFrame
   :param save_path: Path where the file will be saved.
   :type save_path: str
   :param file_format: File format of the file to save.
   :type file_format: str
   :param log: Whether to log the occurence.
   :type log: bool

   :returns: Processed save path for upstream use.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: load_dataframe(load_path: str, file_format: str = 'parquet', log: bool = True) -> pandas.DataFrame

   
   Load file to a pandas.DataFrame object.

   :param load_path: Path where the file to load.
   :type load_path: str
   :param file_format: File format of the file to load.
   :type file_format: str
   :param log: Whether to log the occurence.
   :type log: bool

   :returns: Loaded data.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: save_array(data: numpy.ndarray, save_path: str, file_format: str = 'npy', log: bool = True) -> str

   
   Save a numpy.ndarray object to file.

   :param data: Array to save.
   :type data: numpy.ndarray
   :param save_path: Path where the file will be saved.
   :type save_path: str
   :param file_format: File format of the file to save.
   :type file_format: str
   :param log: Whether to log the occurence.
   :type log: bool

   :returns: Processed save path for upstream use.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: load_array(load_path: str, file_format: str = 'npy', log: bool = True) -> numpy.ndarray

   
   Load file to a numpy.ndarray object.

   :param load_path: Path where the file to load.
   :type load_path: str
   :param file_format: File format of the file to load.
   :type file_format: str
   :param log: Whether to log the occurence.
   :type log: bool

   :returns: Loaded data.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: save_pickle(data: Any, save_path: str, log: bool = True) -> str

   
   Save a object to pickle file.

   :param data: Data to save.
   :type data: any
   :param save_path: Path where the file will be saved.
   :type save_path: str
   :param log: Whether to log the occurence.
   :type log: bool

   :returns: Processed save path for upstream use.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: load_pickle(load_path: str, log: bool = True) -> Any

   
   Load an object from a pickle file.

   :param load_path: Path where the file to load.
   :type load_path: str
   :param log: Whether to log the occurence.
   :type log: bool

   :returns: Loaded data.
   :rtype: any















   ..
       !! processed by numpydoc !!

.. py:function:: listdir_nonhidden(path: str) -> List[str]

   
   List the non-hidden files of a directory.

   :param path: Directory path.
   :type path: str

   :returns: List of non-hidden files.
   :rtype: list















   ..
       !! processed by numpydoc !!

.. py:function:: yield_dataframes(dir_path: str, sort: bool = True, skip_n: Optional[int] = None, log: bool = True) -> Generator[pandas.DataFrame, None, None]

   
   Yield DataFrames loaded from a directory.

   Any non-hidden files in the directory must be loadable as a DataFrame.

   :param dir_path: Directory path of files.
   :type dir_path: str
   :param sort: Whether to sort the files and yield them in an ordered manner.
   :type sort: bool, default = True
   :param skip_n: If specified, skip the first n files when yielding the files.
                  This is especially useful in lieu of the execution being interrupted.
   :type skip_n: int, optional
   :param log: Whether to log the occurence.
   :type log: bool

   :Yields: *pandas.DataFrame* -- A DataFrame.















   ..
       !! processed by numpydoc !!

.. py:function:: concat_consequtive_dataframes(dir_path: str, every_n: int, log: bool = True) -> Generator[pandas.DataFrame, None, None]

   
   Yield DataFrames concatenated from consequtive files in a directory.

   Any non-hidden files in the directory must be loadable as a DataFrame.

   :param dir_path: Directory path of files. Any non-hidden file must be loadable as a DataFrame.
   :type dir_path: str
   :param every_n: Concatenate and yield every N consequtive files.
   :type every_n: int
   :param log: Whether to log the occurence.
   :type log: bool

   :Yields: *pandas.DataFrame* -- Concatenated DataFrame.















   ..
       !! processed by numpydoc !!

.. py:function:: save_consequtive_dataframes(prev_dir: str, new_dir: str, every_n: int, log: bool = True) -> None

   
   Save DataFrames concatenated from consequtive files in a directory.

   :param prev_dir: Directory path of files. Any non-hidden file must be loadable as a DataFrame.
   :type prev_dir: str
   :param new_dir: Directory in which to save the newly concatenated DataFrames.
   :type new_dir: str
   :param every_n: Concatenate and yield every N consequtive files.
   :type every_n: int
   :param log: Whether to log the occurence.
   :type log: bool















   ..
       !! processed by numpydoc !!

.. py:function:: yield_pickled_files(dir_path: str, sort: bool = True, skip_n: Optional[int] = None, log: bool = True) -> Generator[pandas.DataFrame, None, None]

   
   Yield pickled files loaded from a directory.

   Any non-hidden files in the directory must be loadable with pickle.

   :param dir_path: Directory path of files.
   :type dir_path: str
   :param sort: Whether to sort the files and yield them in an ordered manner.
   :type sort: bool, default = True
   :param skip_n: If specified, skip the first n files when yielding the files.
                  This is especially useful in lieu of the execution being interrupted.
   :type skip_n: int, optional
   :param log: Whether to log the occurence.
   :type log: bool

   :Yields: *any* -- Previously pickled data.















   ..
       !! processed by numpydoc !!

