:py:mod:`cyclops.process.diagnoses`
===================================

.. py:module:: cyclops.process.diagnoses

.. autoapi-nested-parse::

   Diagnosis codes processor module.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: insert_decimal(input_: str, index: int = 2) -> str

   
   Insert decimal at index.

   .. rubric:: Examples

   insert_decimal("232", 1) -> "2.32"

   :param input_: Input string.
   :type input_: str
   :param index: Index at which to insert decimal.
   :type index: int, optional

   :returns: String after inserting decimal.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: get_alphabet(code: str) -> str

   
   Get alphabet occurring at the beginning of alphanumeric diagnosis code.

   .. rubric:: Examples

   get_alphabet("M55") -> "M"

   :param code: Input diagnosis code.
   :type code: str

   :returns: Extracted alphabet.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: get_numeric(code: str) -> str

   
   Get the numeric values from alphanumeric string which occur after an alphabet.

   .. rubric:: Examples

   get_numeric("M55") -> "55"

   :param code: Input diagnosis code.
   :type code: str

   :returns: Extracted numeric.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: get_icd_category(code: str, trajectories: dict, raise_err: bool = False) -> str

   
   Get ICD10 category.

   :param code: Input diagnosis code.
   :type code: str
   :param trajectories: Dictionary mapping of ICD10 trajectories.
   :type trajectories: dict
   :param raise_err:
   :type raise_err: Flag to raise error if code cannot be converted (for debugging.)

   :returns: Mapped ICD10 category code.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: process_diagnoses(series: pandas.Series, trajectories: Optional[Dict] = None) -> pandas.Series

   
   Process diagnoses data (codes) into trajectories.

   :param series: Diagnosis code data.
   :type series: pd.Series
   :param trajectories: Mapping from code to trajectory.
   :type trajectories: dict, optional

   :returns: Diagnoses trajectories.
   :rtype: pd.Series















   ..
       !! processed by numpydoc !!

