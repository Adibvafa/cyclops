:py:mod:`cyclops.process.feature.handle_types`
==============================================

.. py:module:: cyclops.process.feature.handle_types

.. autoapi-nested-parse::

   Handling feature types.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: get_unique(values: Union[numpy.ndarray, pandas.Series], unique: Optional[numpy.ndarray] = None) -> numpy.ndarray

   
   Get the unique values of pandas series.

   The utility of this function comes from checking whether the
   unique values have already been calculated. This function
   assumes that if the unique values are passed, they are correct.

   :param values: Values for which to get the unique values.
   :type values: pandas.Series
   :param unique: Unique values which can be optionally specified.
   :type unique: numpy.ndarray, optional

   :returns: The unique values.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: valid_feature_type(type_: str, raise_error: bool = True) -> bool

   
   Check whether a feature type name is valid.

   :param type_: Feature type name.
   :type type_: str
   :param raise_error: Whether to raise an error is the type is invalid.
   :type raise_error: bool, default = True

   :returns: Whether the type is valid.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: to_dtype(series: pandas.Series, type_: str) -> pandas.Series

   
   Set the series datatype according to the feature type.

   :param type_: Feature type name.
   :type type_: str
   :param series: Feature data.
   :type series: pandas.Series, default = None

   :returns: The feature with the corresponding datatype.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:function:: convertible_to_type(series: pandas.Series, type_: str, unique: numpy.ndarray = None, raise_error: bool = False) -> bool

   
   Check whether a feature can be converted to some type.

   :param series: Feature data.
   :type series: pandas.Series
   :param type_: Feature type name to check for conversion.
   :type type_: str
   :param unique: Unique values which can be optionally specified.
   :type unique: numpy.ndarray, optional

   :returns: Whether the feature can be converted.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: is_valid(series: pandas.Series, type_: str, unique: Optional[numpy.ndarray] = None) -> bool

   
   Check whether a feature is valid as a given type.

   :param series: Feature.
   :type series: pandas.Series
   :param type_: Feature type name.
   :type type_: str
   :param unique: Unique values which can be optionally specified.
   :type unique: numpy.ndarray, optional

   :returns: Whether the feature is valid.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: normalize_data(data: pandas.DataFrame, features: List[str]) -> pandas.DataFrame

   
   Normalize feature data to more easily deal with types.

   :param data: Features data.
   :type data: pandas.DataFrame
   :param features: Features to normalize.
   :type features: list of str

   :returns: Updated features data.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: to_types(data: pandas.DataFrame, new_types: dict) -> Tuple[pandas.DataFrame, Dict[str, Any]]

   
   Convert features to given types.

   :param data: Features data.
   :type data: pandas.DataFrame
   :param new_types: Map from the feature column name to its new type.
   :type new_types: str

   :returns: Tuple (pandas.DataFrame, dict) with the updated features data
             and metadata respectively.
   :rtype: tuple















   ..
       !! processed by numpydoc !!

.. py:function:: infer_types(data: pandas.DataFrame, features: List[str]) -> Dict[str, str]

   
   Infer intended feature types and perform the relevant conversions.

   :param data: Feature data.
   :type data: pandas.DataFrame
   :param features: Features to consider.
   :type features: list of str

   :returns: A tuple (pandas.DataFrame, dict) with the updated features data
             and metadata respectively.
   :rtype: tuple















   ..
       !! processed by numpydoc !!

.. py:function:: collect_indicators(data: pandas.DataFrame, categorical: Union[str, List[str]]) -> pandas.DataFrame

   
   Infer and collect indicator features into ordinal categorical features.

   :param data: Features data.
   :type data: pandas.DataFrame
   :param categorical: Names of categorical features. E.g., "hospital" for indicators
                       "hospital_A", "hospital_B"
   :type categorical: str or list of str















   ..
       !! processed by numpydoc !!

