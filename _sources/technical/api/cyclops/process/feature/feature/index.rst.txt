:py:mod:`cyclops.process.feature.feature`
=========================================

.. py:module:: cyclops.process.feature.feature

.. autoapi-nested-parse::

   Feature processing.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: FeatureMeta(**kwargs)

   
   Feature metadata class.

   .. attribute:: feature_type

      Feature type.

      :type: str

   .. attribute:: target

      Whether the feature a target variable.

      :type: bool

   .. attribute:: indicator_of

      If not None, the feature from which this indicator was generated.

      :type: str, optional















   ..
       !! processed by numpydoc !!
   .. py:method:: get_type() -> str

      
      Get the feature type.

      :returns: Feature type.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: is_target() -> bool

      
      Get whether the feature is a target.

      :returns: Whether the feature is a target.
      :rtype: bool















      ..
          !! processed by numpydoc !!

   .. py:method:: indicator_of() -> Optional[str]

      
      Get the name of an indicator's original categorical feature.

      :returns: The categorical column from which an indicator was generated, or None if
                not a categorical indicator.
      :rtype: str, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: get_mapping() -> Optional[dict]

      
      Get the category value map for binary and ordinal categories.

      :returns: A mapping from the integer categories to the original values, or None if
                there is no mapping.
      :rtype: dict, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: update(meta: List[tuple]) -> None

      
      Update meta attributes.

      :param meta: List of tuples in the format (attribute name, attribute value).
      :type meta: list of tuple















      ..
          !! processed by numpydoc !!


.. py:class:: Features(data: pandas.DataFrame, features: Union[str, List[str]], by: Optional[Union[str, List[str]]], targets: Union[str, List[str], None] = None, force_types: Optional[dict] = None, normalizers: Optional[Dict[str, cyclops.process.feature.normalize.GroupbyNormalizer]] = None)

   
   Features.

   .. attribute:: data

      Features data.

      :type: pandas.DataFrame

   .. attribute:: features

      List of feature columns. The remaining columns are treated as metadata.

      :type: list of str

   .. attribute:: by

      Columns to groupby during processing, affecting how the features are treated.

      :type: list of str

   .. attribute:: targets

      Column names to specify as target features.

      :type: list of str

   .. attribute:: meta

      Feature metadata.

      :type: dict

   .. attribute:: normalizers

      Organize normalization objects with different keys, e.g.,
      having separate normalizers for keys "features" and "targets".

      :type: dict

   .. attribute:: normalized

      Track for each normalizer whether normalization has been performed.

      :type: dict















   ..
       !! processed by numpydoc !!
   .. py:property:: columns
      :type: List[str]

      
      Access as attribute, data columns.

      :returns: List of all column names.
      :rtype: list of str















      ..
          !! processed by numpydoc !!

   .. py:property:: types
      :type: dict

      
      Access as attribute, feature type names.

      Note: These are framework-specific feature names.

      :returns: Feature type mapped for each feature.
      :rtype: dict















      ..
          !! processed by numpydoc !!

   .. py:property:: targets
      :type: List[str]

      
      Access as attribute, names of target features.

      :returns: Names of target features.
      :rtype: list of str















      ..
          !! processed by numpydoc !!

   .. py:method:: get_data(features_only: bool = True, to_binary_indicators: Optional[Union[str, List[str]]] = None) -> pandas.DataFrame

      
      Get the features data.

      :param features_only: Whether to return only the by and feature columns.
      :type features_only: bool, default = True
      :param to_indicators: Ordinal features to convert to categorical indicators.
      :type to_indicators: str or list of str, optional

      :returns: Features data.
      :rtype: pandas.DataFrame















      ..
          !! processed by numpydoc !!

   .. py:method:: feature_names(feature_type: Optional[str] = None, target: Optional[bool] = None) -> List[str]

      
      Access as attribute, feature names.

      :param feature_type: Filter by feature type.
      :type feature_type: str, optional
      :param target: Filter by whether the feature is a target.
      :type target: bool, optional

      :returns: List of the desired feature names.
      :rtype: list of str















      ..
          !! processed by numpydoc !!

   .. py:method:: features_by_type(type_: str) -> List[str]

      
      Get feature names of a given type.

      :param type_: Feature type.
      :type type_: str

      :returns: Names of all features with the given type.
      :rtype: list of str















      ..
          !! processed by numpydoc !!

   .. py:method:: split_by_values(value_splits: List[numpy.ndarray]) -> Tuple

      
      Split the data into multiple datasets by values.

      :param value_splits: A list with an element for each split, where the elements are numpy.ndarray
                           with values determined how the splits are segmented.
      :type value_splits: list of numpy.ndarray

      :returns: A tuple of Features objects with the split data.
      :rtype: tuple















      ..
          !! processed by numpydoc !!

   .. py:method:: split(fractions: Union[float, List[float]] = 1.0, randomize: bool = True, seed: int = None)

      
      Split the data into multiple datasets by fractions.

      :param fractions: Fraction(s) of samples between 0 and 1 to use for each split.
      :type fractions: list of float or float, optional
      :param randomize: Whether to randomize the data in the splits.
      :type randomize: bool, default = True
      :param seed: Seed for random number generator.
      :type seed: int, optional

      :returns: A tuple of Features objects with the split data.
      :rtype: tuple















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_value_splits(fractions: Union[float, List[float]] = 1.0, randomize: bool = True, seed: int = None) -> List[numpy.ndarray]

      
      Compute the value splits given fractions.

      :param fractions: Fraction(s) of samples between 0 and 1 to use for each split.
      :type fractions: list of float or float, optional
      :param randomize: Whether to randomize the data in the splits.
      :type randomize: bool, default = True
      :param seed: Seed for random number generator.
      :type seed: int, optional

      :returns: A list with an element for each split, where the elements are numpy.ndarray
                with values determined how the splits are segmented.
      :rtype: list of numpy.ndarray















      ..
          !! processed by numpydoc !!

   .. py:method:: add_normalizer(key: str, normalizer: cyclops.process.feature.normalize.GroupbyNormalizer) -> None

      
      Add a normalization object.

      :param key: Unique name of the normalizer.
      :type key: str
      :param normalizer: Normalization object.
      :type normalizer: GroupbyNormalizer















      ..
          !! processed by numpydoc !!

   .. py:method:: remove_normalizer(key: str) -> None

      
      Remove a normalization object.

      :param key: Unique name of the normalizer.
      :type key: str















      ..
          !! processed by numpydoc !!

   .. py:method:: normalize(key: str, inplace: bool = True) -> pandas.DataFrame

      
      Normalize.

      :param key: Unique name of the normalizer.
      :type key: str
      :param inplace: Whether to perform in-place, or to simply return the DataFrame.
      :type inplace: bool

      :returns: The normalized features data.
      :rtype: pandas.DataFrame















      ..
          !! processed by numpydoc !!

   .. py:method:: inverse_normalize(key: str, inplace: bool = True) -> pandas.DataFrame

      
      Inverse normalize.

      :param key: Unique name of the normalizer.
      :type key: str
      :param inplace: Whether to perform in-place, or to simply return the DataFrame.
      :type inplace: bool

      :returns: The inversely normalized data.
      :rtype: pandas.DataFrame















      ..
          !! processed by numpydoc !!

   .. py:method:: save(save_path: str, file_format: str = 'parquet') -> str

      
      Save data to file.

      :param save_path: Path where the file will be saved.
      :type save_path: str
      :param file_format: File format of the file to save.
      :type file_format: str

      :returns: Processed save path for upstream use.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: slice(slice_map: Dict[str, Union[Any, List[Any]]] = None, slice_query: Optional[str] = None, replace: bool = False) -> numpy.ndarray

      
      Slice the data across column(s), given values.

      :param slice_map: Dictionary with column name(s) as keys, and value or list of values
                        to filter on as values.
      :type slice_map: Dict, optional
      :param slice_query: A string to specify conditions that uses the Pandas DataFrame query API.
                          If specified along with slice_map, the slice_map is applied first.
      :type slice_query: str, optional
      :param replace: If set to True, the data is replaced with the sliced data, and the
                      the values (by column) of the sliced dataset are returned.
      :type replace: bool, optional

      :returns: Array of the values of the by column, in the sliced dataset.
      :rtype: np.ndarray















      ..
          !! processed by numpydoc !!


.. py:class:: TabularFeatures(data: pandas.DataFrame, features: Union[str, List[str]], by: str, targets: Optional[Union[str, List[str]]] = None, force_types: Optional[dict] = None)



   
   Tabular features.
















   ..
       !! processed by numpydoc !!
   .. py:method:: vectorize(**get_data_kwargs) -> cyclops.process.feature.vectorized.Vectorized

      
      Vectorize the tabular data.

      :param \*\*get_data_kwargs: Keyword arguments to be fed to get_data.

      :returns: (data, by_map, feat_map), (pandas.DataFrame, dict, dict)
                feat_map is the feature order and by_map is the order of
                the by column, or None if no by was provided.
      :rtype: tuple















      ..
          !! processed by numpydoc !!

   .. py:method:: plot_features(features: Optional[Union[str, list]] = None) -> None

      
      Plot features.

      High-level plotting function for features.

      :param features: Names of features to plot.
      :type features: str or list of str, optional















      ..
          !! processed by numpydoc !!


.. py:class:: TemporalFeatures(data: pandas.DataFrame, features: Union[str, List[str]], by: Union[str, List[str]], timestamp_col: str, targets: Optional[Union[str, List[str]]] = None, force_types: Optional[dict] = None, aggregator: Optional[cyclops.process.aggregate.Aggregator] = None)



   
   Temporal features.
















   ..
       !! processed by numpydoc !!
   .. py:method:: plot_features(features: Optional[Union[str, list]] = None) -> None

      
      Plot features.

      High-level plotting function for features.

      :param features: Names of features to plot.
      :type features: list or str, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: aggregate(**aggregate_kwargs) -> pandas.DataFrame

      
      Aggregate the data.

      :param \*\*aggregate_kwargs: Keywords to pass to the aggregation function.

      :returns: Aggregated data.
      :rtype: pandas.DataFrame















      ..
          !! processed by numpydoc !!


.. py:function:: split_features(features: List[Union[Features, TabularFeatures, TemporalFeatures]], fractions: Optional[Union[float, List[float]]] = None, randomize: bool = True, seed: int = None) -> Tuple

   
   Split a set of features using the same uniquely identifying values.

   :param features: List of feature objects.
   :type features: list of Features or TabularFeatures or TemporalFeatures
   :param fractions: Fraction(s) of samples between 0 and 1 to use for each split.
   :type fractions: list, optional
   :param randomize: Whether to randomize the data in the splits.
   :type randomize: bool, default = True
   :param seed: Seed for random number generator.
   :type seed: int, optional

   :returns: A tuple of the dataset splits, where each contains a tuple of splits.
             e.g., split1, split2 = split_features([features1, features2], 0.5)
             train1, test1 = split1
             train2, test2 = split2
   :rtype: tuple















   ..
       !! processed by numpydoc !!

