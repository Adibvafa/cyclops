:py:mod:`cyclops.process.feature.vectorized`
============================================

.. py:module:: cyclops.process.feature.vectorized

.. autoapi-nested-parse::

   Vectorized data processing.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: process_axes(vecs: List[Vectorized], axes: Union[str, int, List[str], List[int]]) -> List[int]

   
   Process a common axis (int/str) or list of axes (list of int/str).

   :param vecs: Vectorized datasets.
   :type vecs: list of Vectorized
   :param axes: The axis, or axes if different in the different datasets, over which to
                intersect. Can provide axis indices (int) or names (str).
   :type axes: str or int or list or str or list of int, optional

   :returns: The processed axes.
   :rtype: list of int















   ..
       !! processed by numpydoc !!

.. py:function:: intersect_vectorized(vecs: List[Vectorized], axes: Union[str, int, List[str], List[int]] = 0) -> Tuple

   
   Perform an intersection over the indexes of vectorized datasets.

   This is especially useful to align the samples of separate datasets.

   :param vecs: Vectorized datasets.
   :type vecs: list of Vectorized
   :param axes: The axis, or axes if different in the datasets, over which to
                intersect. Can provide axis indices (int) or names (str).
   :type axes: str or int or list or str or list of int, optional

   :returns: A tuple of the Vectorized objects in the same order as provided.
   :rtype: tuple















   ..
       !! processed by numpydoc !!

.. py:function:: split_vectorized(vecs: List[Vectorized], fractions: Union[float, List[float]], axes: Union[str, int, List[str], List[int]] = 0, randomize: bool = True, seed: int = None) -> Tuple

   
   Split vectorized datasets matching the index.

   :param vecs: Vectorized datasets.
   :type vecs: list of Vectorized
   :param fractions: Fraction(s) of samples between 0 and 1 to use for each split.
   :type fractions: float or list of float
   :param axes: The axis, or axes if different in the datasets, over which to
                intersect. Can provide axis indices (int) or names (str).
   :type axes: str or int or list or str or list of int, optional
   :param randomize: Whether to randomize the samples in the splits. Otherwise it splits
                     the samples in the current order.
   :type randomize: bool, default = True
   :param seed: A seed for the randomization.
   :type seed: int, optional

   :returns: A tuple of datasets of splits. All splits are Vectorized objects.
   :rtype: tuple of tuple of Vectorized















   ..
       !! processed by numpydoc !!

.. py:class:: Vectorized(data: numpy.ndarray, indexes: List[Union[List, numpy.ndarray]], axis_names: List[str], is_normalized: bool = False)

   
   Vectorized data.

   .. attribute:: data

      Data.

      :type: numpy.ndarray

   .. attribute:: indexes

      Names of each index in each dimension. E.g., for an array with shape
      (2, 10, 5), len(indexes) == 3, and len(indexes[0]) = 2.

      :type: list of numpy.ndarray

   .. attribute:: index_maps

      A name to index map in each dimension.

      :type: list of dict

   .. attribute:: axis_names

      Axis names.

      :type: list of str

   .. attribute:: is_normalized

      Whether the Vectorized object has been normalized.

      :type: bool















   ..
       !! processed by numpydoc !!
   .. py:property:: shape
      :type: Tuple

      
      Get data shape, as an attribute.

      :returns: Shape.
      :rtype: tuple















      ..
          !! processed by numpydoc !!

   .. py:method:: get_data() -> numpy.ndarray

      
      Get the vectorized data.

      :returns: The data.
      :rtype: numpy.ndarray















      ..
          !! processed by numpydoc !!

   .. py:method:: add_normalizer(axis: Union[str, int], normalization_method: Optional[str] = None, normalizer_map: Optional[dict] = None) -> None

      
      Add a normalizer.

      :param axis: Axis over which to normalize.
      :type axis: int
      :param normalization_method: Normalization method used for all over an axis.
      :type normalization_method: str, optional
      :param normalizer_map: Mapping from an index to normalization type, e.g., {"eventA": "standard"}.
      :type normalizer_map: dict
      :param normalizers: Mapping from an index to a normalizer object.
      :type normalizers: dict















      ..
          !! processed by numpydoc !!

   .. py:method:: add_normalizer_direct(normalizer: cyclops.process.feature.normalize.VectorizedNormalizer) -> None

      
      Directly add a normalizer by supplying the VectorizedNormalizer.

      :param normalizer: Normalizer to add.
      :type normalizer: VectorizedNormalizer















      ..
          !! processed by numpydoc !!

   .. py:method:: fit_normalizer() -> None

      
      Fit the normalizer.
















      ..
          !! processed by numpydoc !!

   .. py:method:: normalize() -> None

      
      Normalize.

      Requires a normalizer to be added and that the data is not already normalized.















      ..
          !! processed by numpydoc !!

   .. py:method:: inverse_normalize() -> None

      
      Inverse normalize.

      Requires a normalizer to be added and that the data is already normalized.















      ..
          !! processed by numpydoc !!

   .. py:method:: save(save_path: str, file_format: str = 'npy') -> str

      
      Save data to file.

      :param save_path: Path where the file will be saved.
      :type save_path: str
      :param file_format: File format of the file to save.
      :type file_format: str

      :returns: Processed save path for upstream use.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: take_with_indices(axis: Union[str, int], indices: Union[List[int], numpy.ndarray]) -> Vectorized

      
      Get data by indexing an axis.

      :param axis: Axis index or name.
      :type axis: int or str
      :param indices: Array/list of indices to take along the axis.

      :returns: Indexed data.
      :rtype: numpy.ndarray















      ..
          !! processed by numpydoc !!

   .. py:method:: take_with_index(axis: Union[str, int], index: Union[List[Any], numpy.ndarray]) -> Vectorized

      
      Get data by indexing an axis using its index.

      :param axis: Axis index or name.
      :type axis: int or str
      :param index: Array/list of index values to take along the axis.
      :type index: numpy.ndarray or list of any

      :returns: Indexed data.
      :rtype: numpy.ndarray















      ..
          !! processed by numpydoc !!

   .. py:method:: get_axis(axis: Union[int, str]) -> int

      
      Get an array axis by index or by name.

      :param axis: Axis index or name.
      :type axis: int or str

      :returns: Axis index.
      :rtype: int















      ..
          !! processed by numpydoc !!

   .. py:method:: get_index(axis: Union[int, str]) -> numpy.ndarray

      
      Get an axis index by index or by name.

      :param axis: Axis index or name.
      :type axis: int or str

      :returns: Index for the given axis.
      :rtype: numpy.ndarray















      ..
          !! processed by numpydoc !!

   .. py:method:: get_index_map(axis: Union[int, str]) -> numpy.ndarray

      
      Get an axis index by index or by name.

      :param axis: Axis index or name.
      :type axis: int or str

      :returns: Index map for the given axis.
      :rtype: dict















      ..
          !! processed by numpydoc !!

   .. py:method:: split_by_indices(axis: Union[str, int], indices: Union[Sequence[int], numpy.ndarray], allow_drops: bool = False)

      
      Split the data over an axis using indices.

      :param axis: Axis index or name.
      :type axis: int or str
      :param indices: A list of the indices in each split.
      :type indices: list of numpy.ndarray
      :param allow_drops: If True and certain indices or index names do not appear in any of the
                          splits, then drop any which do not appear. Otherwise, raises an error.

      :returns: Data splits.
      :rtype: tuple of Vectorized















      ..
          !! processed by numpydoc !!

   .. py:method:: split_by_index(axis: Union[str, int], index_names: List[Union[List[Any], numpy.ndarray]], allow_drops: bool = False)

      
      Split the data over an axis using index names.

      :param axis: Axis index or name.
      :type axis: int or str
      :param index_names: A list of the index names in each split.
      :type index_names: list of numpy.ndarray or list of any
      :param allow_drops: If True and certain indices or index names do not appear in any of the
                          splits, then drop any which do not appear. Otherwise, raises an error.

      :returns: Data splits.
      :rtype: tuple of Vectorized















      ..
          !! processed by numpydoc !!

   .. py:method:: split_by_fraction(axis: Union[str, int], fractions: Union[float, List[float]], randomize: bool = True, seed: int = None)

      
      Split the data over an axis using split fractions.

      :param axis: Axis index or name.
      :type axis: int or str
      :param fractions: Fraction(s) of samples between 0 and 1 to use for each split.
      :type fractions: float or list of float
      :param randomize: Whether to randomize the samples in the splits. Otherwise it splits
                        the samples in the current order.
      :type randomize: bool, default = True
      :param seed: A seed for the randomization.
      :type seed: int, optional

      :returns: Data splits.
      :rtype: tuple of Vectorized















      ..
          !! processed by numpydoc !!

   .. py:method:: split_out(axis: Union[str, int], index_names: Union[List[Any], numpy.ndarray])

      
      Split out some indexes by name.

      :param axis: Axis index or name.
      :type axis: int or str
      :param index_names: A list of the index names in each split.
      :type index_names: list of numpy.ndarray or list of any

      :returns: Two Vectorized objects. The first has the remaining over the relevant
                axis, and the second has those selected index names.
      :rtype: tuple of Vectorized















      ..
          !! processed by numpydoc !!

   .. py:method:: remove_with_index(axis: Union[str, int], index_names: Union[List[Any], numpy.ndarray])

      
      Split out some indexes by name.

      :param axis: Axis index or name.
      :type axis: int or str
      :param index_names: A list of index name to remove.
      :type index_names: numpy.ndarray or list of any

      :returns: A new Vectorized object with the selected indexes removed.
      :rtype: Vectorized















      ..
          !! processed by numpydoc !!

   .. py:method:: rename_axis(axis: Union[str, int], name: str) -> None

      
      Rename an axis.

      :param axis: Old axis index or name.
      :type axis: int or str
      :param name: New axis name.
      :type name: str















      ..
          !! processed by numpydoc !!

   .. py:method:: swap_axes(axis1: Union[str, int], axis2: Union[str, int]) -> None

      
      Swap the position of one axis for another position.

      Other axes remain in their original order.

      :param axis1: First axis to swap.
      :type axis1: int or str
      :param axis2: Second axis to swap.
      :type axis2: int or str















      ..
          !! processed by numpydoc !!

   .. py:method:: value_counts(axis: Union[str, int], index: Any) -> Tuple[numpy.ndarray, numpy.ndarray]

      
      Return the value counts for a given axis and index.

      :param axis: Axis index or name
      :type axis: int or str
      :param index: Index name in the axis for which to get the value counts.
      :type index: any















      ..
          !! processed by numpydoc !!

   .. py:method:: impute_over_axis(axis: Union[str, int], impute_fn: Callable, index_exp: Optional[Tuple] = None)

      
      Imputes values over an axis, treating the other axes as grouping.

      For example, imputing over the timesteps of an event for some encounter.

      :param axis: Axis index or name over which to impute.
      :type axis: int or str
      :param impute_fn: An imputation function, which takes in and outputs a same-size 1D array.
      :type impute_fn: callable
      :param index_exp: A tuple of slice objects enabling imputation of only a subset of the data.
      :type index_exp: tuple, optional















      ..
          !! processed by numpydoc !!

   .. py:method:: impute(impute_axis: Union[str, int], data_axis: Union[str, int], impute_fn: Callable)

      
      Impute values with forward fill and/or backward fill and fill null values         with feature mean.

      :param impute_axis: Axis index or name over which to impute.
      :type impute_axis: Union[str, int]
      :param data_axis: Axis index or name over which to iterate.
      :type data_axis: Union[str, int]
      :param impute_fn: An imputation function, which takes in and outputs a same-size 1D array.
      :type impute_fn: Callable















      ..
          !! processed by numpydoc !!

   .. py:method:: concat_over_axis(axis: Union[str, int], arr: numpy.ndarray, concat_index: Union[List, numpy.ndarray]) -> Vectorized

      
      Concatenate an array over an axis to create a new Vectorized object.

      In other words, the indexes of the array are assumed to be identical
      to this object's, except along a single axis, which is the axis over
      which the data is concatenated.

      :param axis: Axis index or name over which to concatenate.
      :type axis: int or str
      :param arr: Array of data to concatenate. Required to have the same shape except in the
                  axis over which the concatenation occurs. Indexes are assumed to be aligned.
      :type arr: numpy.ndarray
      :param concat_index: Index names being concatenated over the axis.
      :type concat_index: numpy.ndarray or list

      :returns: Vectorized object with the concatenated data and indexes.
      :rtype: Vectorized















      ..
          !! processed by numpydoc !!


.. py:class:: VectorizedIndexExpression

   
   Functions similar to the NumPy IndexExpression for simplified slicing.

   Different from the NumPy IndexExpression, it treats singular indices as ranges such
   that no axes are dropped, e.g., [1, 3:4, 2] is equivalent to [1:2, 3:4, 2:3]. This
   is necessary to keep the same axes in the same order for Vectorized objects.















   ..
       !! processed by numpydoc !!
   .. py:method:: __getitem__(item: Tuple) -> Tuple

      
      Create index expression using slice notation.

      :param item:
      :type item: tuple















      ..
          !! processed by numpydoc !!


