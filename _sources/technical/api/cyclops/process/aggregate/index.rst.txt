:py:mod:`cyclops.process.aggregate`
===================================

.. py:module:: cyclops.process.aggregate

.. autoapi-nested-parse::

   Aggregation functions.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: Aggregator(aggfuncs: Dict[str, Union[str, Callable]], timestamp_col: str, time_by: Union[str, List[str]], agg_by: Union[str, List[str]], timestep_size: int, window_duration: Optional[int] = None, imputer: Optional[cyclops.process.impute.AggregatedImputer] = None, agg_meta_for: Optional[List[str]] = None)

   
   Equal-spaced aggregation, or binning, of temporal data.

   Computing aggregation metadata is expensive and should be done sparingly.

   .. attribute:: aggfuncs

      Aggregation functions mapped from column to aggregation type.
      Each value is either function or string, e.g., {col_name: MEAN}.
      If a function, it should accept a series and return a single value.

      :type: dict

   .. attribute:: timestamp_col

      Name of the timestamp column in the data provided.

      :type: str

   .. attribute:: time_by

      Name of columns by which to group to determine the bucket times.

      :type: list of str

   .. attribute:: agg_by

      Name of columns by which to group to perform aggregation.

      :type: list of str

   .. attribute:: timestep_size

      Time in hours for a single timestep, or bin.

      :type: float

   .. attribute:: window_duration

      Time duration to consider after the start of a timestep.

      :type: float or None

   .. attribute:: agg_meta_for

      Columns for which to compute aggregation metadata.

      :type: list of str or None

   .. attribute:: window_times

      The start/stop time windows used to aggregate the data.

      :type: pd.DataFrame or None

   .. attribute:: imputer

      An imputer to perform aggregation.

      :type: AggregatedImputer or None















   ..
       !! processed by numpydoc !!
   .. py:method:: get_timestamp_col() -> str

      
      Get timestamp column.

      :returns: Name of timestamp column.
      :rtype: str















      ..
          !! processed by numpydoc !!

   .. py:method:: get_aggfuncs() -> Dict[str, Callable]

      
      Get aggregation functions.

      :returns: Aggregation functions.
      :rtype: dict















      ..
          !! processed by numpydoc !!

   .. py:method:: __call__(data: pandas.DataFrame, window_start_time: Optional[pandas.DataFrame] = None, window_stop_time: Optional[pandas.DataFrame] = None, include_timestep_start: bool = True) -> Tuple[pandas.DataFrame, pandas.DataFrame]

      
      Aggregate.

      The window start and stop times can be used to cut short the timeseries.

      By default, the start time of a time_by group will be the earliest
      recorded timestamp in said group. Otherwise, a window_start_time
      can be provided by the user to override this default.

      The end time of a time_by group work similarly, but with the additional
      option of specifying a window_duration.

      :param data: Input data.
      :type data: pandas.DataFrame
      :param window_start_time: An optionally provided window start time.
      :type window_start_time: pd.DataFrame, optional
      :param window_stop_time: An optionally provided window stop time. This cannot be provided if
                               window_duration was set.
      :type window_stop_time: pd.DataFrame, optional
      :param include_timestep_start: Whether to include the window start timestamps for each timestep.
      :type include_timestep_start: bool, default = True

      :returns: The aggregated data.
      :rtype: pandas.DataFrame















      ..
          !! processed by numpydoc !!

   .. py:method:: vectorize(aggregated: pandas.DataFrame) -> numpy.ndarray

      
      Vectorize aggregated data.

      :param aggregated: Aggregated data.
      :type aggregated: pandas.DataFrame

      :returns: Vectorized aggregated data of shape:
                (# of aggfuncs, *# of unique in each agg_by, window_duration/timestep_size)
      :rtype: numpy.ndarray















      ..
          !! processed by numpydoc !!


.. py:function:: tabular_as_aggregated(tab: pandas.DataFrame, index: str, var_name: str = EVENT_NAME, value_name: str = EVENT_VALUE, strategy: str = ALL, num_timesteps: Optional[int] = None, sort: bool = True) -> pandas.DataFrame

   
   Pose tabular (static, non-timeseries) data as timeseries data.

   :param tab: Tabular data.
   :type tab: pd.DataFrame
   :param index: Index column name.
   :type index: str
   :param var_name: The name of the resultant column containing the original tabular column names.
   :type var_name: str, optional
   :param value_name: The name of the resultant column containing the tabular values.
   :type value_name: str, optional
   :param strategy: Strategy to fake aggregation. E.g., FIRST sets a first timestep to the value,
                    LAST sets the last timestep to the value, and ALL sets all timesteps to
                    the value.
   :type strategy: str
   :param num_timesteps: The max number of timesteps in the aggregation. This is required by strategies
                         such as LAST and ALL.
   :type num_timesteps: int, optional

   :returns: Tabular data processed as if it is aggregated temporal data.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: timestamp_ffill_agg(timesteps: pandas.Series, num_timesteps: int, val: float = 1, fill_nan: float = None)

   
   Perform single-value aggregation with fill forward functionality given timesteps.

   If a timestep is negative, it is treated as occuring before the regular window and
   is "filled forward" through all the timesteps.

   If a timestep is between 0 and num_timesteps, it is bucketed accordingly and then
   forward filled.

   The timesteps can be nan.

   :param timesteps: A series of integer timesteps
   :type timesteps: pandas.Series
   :param num_timesteps: The total number of timesteps to consider in the aggregation window.
   :type num_timesteps: int
   :param val: The value with which to fill.
   :type val: float, default = 1
   :param fill_nan: Optionally fill any remaining nan with a value.
   :type fill_nan: float, optional

   :returns: The filled forward aggregated data in the form of a 2-dimensional array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

