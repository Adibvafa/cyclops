:py:mod:`cyclops.process.clean`
===============================

.. py:module:: cyclops.process.clean

.. autoapi-nested-parse::

   Events processor module, applies cleaning step to event data before aggregation.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: combine_events(event_data: Union[pandas.DataFrame, List[pandas.DataFrame]]) -> pandas.DataFrame

   
   Gather event data from multiple dataframes into a single one.

   Events can be in multiple raw dataframes like labs, vitals, etc. This
   function takes in multiple dataframes and gathers all events into a single
   dataframe. If just a single dataframe is passed, it returns it back.

   :param event_data: Raw event data.
   :type event_data: pandas.DataFrame or list of pandas.DataFrame

   :returns: Combined event data.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: convert_to_events(data: pandas.DataFrame, event_name: str, event_category: str, timestamp_col: str, value_col: Optional[str] = None) -> pandas.DataFrame

   
   Convert dataframe with just timestamps into events.

   Any event like admission, discharge, transfer, etc. can be converted to the
   common events dataframe format with 'encounter_id', 'event_name', 'event_timestamp',
   and 'event_value' columns. The input data in this case does not have an explicit
   event name and hence we assign it. Like for e.g. admission.

   :param data: Raw data with some timestamps denoting an event.
   :type data: pandas.DataFrame
   :param event_name: Event name to give, added as a new column.
   :type event_name: str
   :param event_category: Event name to give, added as a new column.
   :type event_category: str
   :param timestamp_col: Name of the column in the incoming dataframe that has the timestamp.
   :type timestamp_col: str
   :param value_col: Name of the column in the incoming dataframe that has potential event values.
   :type value_col: str, optional

   :returns: Events in the converted format.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: is_supported(event_name: str) -> bool

   
   Check if event name is supported.

   Processing events involves data cleaning, and hence some event names
   are currently removed until they are supported.

   :param event_name: Name of event.
   :type event_name: str

   :returns: If supported return True, else False.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: drop_unsupported(data: pandas.DataFrame) -> pandas.DataFrame

   
   Drop events currently not supported for processing.

   :param data: Input data.
   :type data: pandas.DataFrame

   :returns: Output data with dropped events (rows) which had unsupported events.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: normalize_names(names: pandas.Series) -> pandas.Series

   
   Normalize event names.

   Perform basic cleaning/house-keeping of event names.
   e.g. remove parantheses from the measurement-name,
   convert to lower-case.

   :param names: Event names.
   :type names: pandas.Series

   :returns: Normalized event names.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: normalize_categories(categories: pandas.Series) -> pandas.Series

   
   Normalize event category names.

   Perform basic cleaning/house-keeping of event category names.
   e.g. convert to lower-case.

   :param categories: Categories.
   :type categories: pandas.Series

   :returns: Normalized event categories.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:function:: normalize_values(values: pandas.Series) -> pandas.Series

   
   Normalize event values.

   Perform basic cleaning/house-keeping of event values.
   e.g. fill empty strings with NaNs, convert some strings to
   equivalent boolean or numeric, so they can be used as features.

   :param values: Event values.
   :type values: pandas.Series

   :returns: Normalized event values.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:function:: normalize_units(units: pandas.Series) -> pandas.Series

   
   Normalize event value units.

   Perform basic cleaning/house-keeping of event value units.
   e.g. converting units to SI.

   :param data: Units.
   :type data: pandas.Series

   :returns: Normalized units.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:function:: normalize_events(data) -> pandas.DataFrame

   
   Pre-process and normalize (clean) raw event data.

   :param data: Raw event data.
   :type data: pandas.DataFrame

   :returns: Cleaned event data.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: dropna_rows(data: pandas.DataFrame, cols: Union[str, List[str]]) -> pandas.DataFrame

   
   Drop null values in some specific columns.

   Part of the utility of this function lies in its logging.

   :param data: Data.
   :type data: pandas.DataFrame
   :param cols: Columns over which to drop null values.
   :type cols: str or list of str

   :returns: Data with corresponding null rows dropped.
   :rtype: pandas.DataFrame















   ..
       !! processed by numpydoc !!

