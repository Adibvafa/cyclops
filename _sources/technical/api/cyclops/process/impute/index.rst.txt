:py:mod:`cyclops.process.impute`
================================

.. py:module:: cyclops.process.impute

.. autoapi-nested-parse::

   Imputation functions.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: compute_inter_range(null: pandas.Series) -> Optional[Tuple[int, int]]

   
   Compute the range of values to be interpolated.

   Computed using the first and last non-null values in the series.

   :param null: A boolean mask array indicated the positions of nulls. True is a null.
   :type null: pandas.Series

   :returns: A tuple of (int, int) with (inter start, inter stop).
   :rtype: tuple















   ..
       !! processed by numpydoc !!

.. py:function:: np_ffill(arr: numpy.ndarray) -> numpy.ndarray

   
   Forward fill a 1D array.

   :param arr: Array to impute.
   :type arr: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: np_bfill(arr: numpy.ndarray) -> numpy.ndarray

   
   Backward fill a 1D array.

   :param arr: Array to impute.
   :type arr: numpy.ndarray

   :returns: Imputed array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: np_ffill_bfill(arr: numpy.ndarray) -> numpy.ndarray

   
   Equivalent to forward filling and then backward filling a 1D array.

   :param arr: Array to impute.
   :type arr: numpy.ndarray

   :returns: Imputed array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: np_fill_null_num(arr: numpy.ndarray, num: float) -> numpy.ndarray

   
   Fill null values with a number.

   :param arr: Array to impute.
   :type arr: numpy.ndarray

   :returns: Imputed array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: np_fill_null_zero(arr: numpy.ndarray) -> numpy.ndarray

   
   Fill null values with zero.

   :param arr: Array to impute.
   :type arr: numpy.ndarray

   :returns: Imputed array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: np_fill_null_mean(arr: numpy.ndarray) -> numpy.ndarray

   
   Fill null values with the array mean.

   :param arr: Array to impute.
   :type arr: numpy.ndarray

   :returns: Imputed array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

.. py:function:: fill_null_with(series: pandas.Series, null: pandas.Series, value: Any) -> pandas.Series

   
   Fill null values with a specified value when the nulls were already located.

   :param series: Series for which to fill the nulls.
   :type series: pandas.Series
   :param null: A boolean mask array indicated the positions of nulls. True is a null.
   :type null: pandas.Series
   :param value: The value to replace the nulls.

   :returns: Imputed series.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:function:: efficient_ffill_bfill(series: pandas.Series, null: pandas.Series) -> pandas.Series

   
   Forward and backward fill nulls in an efficient manner.

   An efficient implementation equivalent to forward filling a series and subsequently
   backwards filling to remove any nulls at the very beginning of the series. This
   ensures no nulls are returned.

   :param series: Series for which to fill the nulls.
   :type series: pandas.Series
   :param null: A boolean mask array indicated the positions of nulls. True is a null.
   :type null: pandas.Series

   :returns: Imputed series.
   :rtype: pandas.Series















   ..
       !! processed by numpydoc !!

.. py:class:: SeriesImputer(imputefunc: Union[str, Callable] = MEAN, allow_nulls_returned=True, limit_area=None)

   
   Imputation of a Pandas Series.

   It may seem counter-intuitive to allow the return of nulls, but many imputation
   functions such as filling with mean/median will return nulls if the series is all
   null, i.e., where no fill value can be computed.

   .. attribute:: imputefunc

      Imputation function. Either function or string, e.g., MEAN.
      If a function, it should accept a series and return a series of same length
      unless the DROP function is used.

      :type: str or callable

   .. attribute:: using_drop

      Whether the DROP imputation was used. This is necessary to track to ensure
      no values are otherwise dropped.

      :type: bool

   .. attribute:: allow_nulls_returned

      Whether to allow the returning of nulls from an imputation function.

      :type: bool, default = True

   .. attribute:: limit_area

      Can specify 'inter' or 'extra'.
      'inter': Only fill NaNs surrounded by valid values (interpolate).
      'extra': Only fill NaNs outside valid values (extrapolate).

      :type: str, optional















   ..
       !! processed by numpydoc !!
   .. py:method:: is_using_drop() -> bool

      
      Return whether the imputer is using the DROP strategy.

      :returns: Whether the imputer is using the DROP strategy.
      :rtype: bool















      ..
          !! processed by numpydoc !!

   .. py:method:: __call__(series: pandas.Series) -> Tuple[pandas.Series, float]

      
      Impute a series.

      :param series: The series to impute.
      :type series: pandas.Series

      :returns: A tuple containing, respectively, a pandas.Series (the imputed Series) and
                a float (the percentage of nulls in the original series).
      :rtype: tuple















      ..
          !! processed by numpydoc !!


.. py:class:: TabularImputer(imputers: Dict[str, SeriesImputer])

   
   Imputation of tabular data.

   .. attribute:: imputers

      Aggregation functions mapped from column to imputer.

      :type: dict















   ..
       !! processed by numpydoc !!
   .. py:method:: __call__(data: pandas.DataFrame) -> Tuple[pandas.DataFrame, Dict[str, float]]

      
      Impute.

      :param data: Tabular data.
      :type data: pandas.DataFrame















      ..
          !! processed by numpydoc !!


.. py:class:: AggregatedImputer(intra_imputer: Optional[TabularImputer] = None, inter_imputer: Optional[TabularImputer] = None, extra_imputer: Optional[TabularImputer] = None)

   
   Imputation of data being aggregated.

   .. attribute:: intra_imputer

      Intra imputer for imputation within a timestep, or bucket.

      :type: cyclops.processors.impute.Imputer, optional

   .. attribute:: inter_imputer

      Inter imputer for imputation between timesteps, or buckets.

      :type: cyclops.processors.impute.Imputer, optional

   .. attribute:: extra_imputer

      Extra imputer for imputation beyond existing timesteps, or buckets.

      :type: cyclops.processors.impute.Imputer, optional















   ..
       !! processed by numpydoc !!
   .. py:method:: intra(group: pandas.DataFrame) -> pandas.DataFrame

      
      Perform intra-imputation.

      Intra imputation describes the imputation occurring within a single timestep,
      or bucket, before the aggregation of values takes place.

      :param group: The group of non-aggregated data being imputed, which will subsequently
                    be aggregated.
      :type group: pandas.Series

      :returns: The imputed group.
      :rtype: pandas.Series















      ..
          !! processed by numpydoc !!

   .. py:method:: inter(group: pandas.DataFrame) -> pandas.DataFrame

      
      Perform interpolation imputation.

      Inter imputation describes the imputation occurring between timesteps, or
      buckets, where for "missing" timesteps, it fills in information. A "missing"
      timestep is one with no occurences, or where all the occurences were null.

      :param group: The group of aggregated timesteps being imputed which may have missing
                    timesteps.
      :type group: pandas.Series

      :returns: The imputed group.
      :rtype: pandas.Series















      ..
          !! processed by numpydoc !!

   .. py:method:: extra(group: pandas.DataFrame) -> pandas.DataFrame

      
      Perform extrapolation imputation.

      Extra imputation describes the imputation occurring after the last observed
      timestep. This is typically desired after padding to fill the resultant missing
      values.

      :param group: The group of aggregated timesteps being imputed which may have missing
                    timesteps extending beyond the last observation.
      :type group: pandas.Series

      :returns: The imputed group.
      :rtype: pandas.Series















      ..
          !! processed by numpydoc !!


.. py:function:: numpy_2d_ffill(arr: numpy.ndarray) -> numpy.ndarray

   
   Foward fill a 2D array in a row-wise fashion, i.e., filling each row separately.

   :param arr: A 2-dimensional array.
   :type arr: numpy.ndarray

   :returns: The row-wise forward filled array.
   :rtype: numpy.ndarray















   ..
       !! processed by numpydoc !!

