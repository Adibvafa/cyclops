:py:mod:`cyclops.process.string_ops`
====================================

.. py:module:: cyclops.process.string_ops

.. autoapi-nested-parse::

   String operations used in data extraction.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   cyclops.process.string_ops.fill_missing_with_nan
   cyclops.process.string_ops.replace_if_string_match
   cyclops.process.string_ops.remove_text_in_parentheses
   cyclops.process.string_ops.fix_inequalities
   cyclops.process.string_ops.to_lower
   cyclops.process.string_ops.none_to_empty_string
   cyclops.process.string_ops.strip_whitespace
   cyclops.process.string_ops.is_non_empty_string
   cyclops.process.string_ops.normalize_special_characters
   cyclops.process.string_ops.count_occurrences
   cyclops.process.string_ops.convert_to_numeric
   cyclops.process.string_ops.is_range
   cyclops.process.string_ops.compute_range_avg



.. py:function:: fill_missing_with_nan(string: str) -> Union[float, str]

   
   Return NaN if input string is empty.

   :param string: Input string.
   :type string: str

   :returns: NaN if input was empty, else input.
   :rtype: str or float















   ..
       !! processed by numpydoc !!

.. py:function:: replace_if_string_match(search_string: str, search_terms: str, replace_value: str) -> str

   
   Replace string with value, if string has matched terms.

   If any of the 'search_terms' are found in the string, then
   it is replaced with the 'replace_value' string.

   :param string: The string to search for possible matches.
   :type string: str
   :param search_terms: String terms to search x1|x2...|xn.
   :type search_terms: str
   :param replace_value: String which will replace if search found any matches.
   :type replace_value: str

   :returns: The string to replace, 'replace_value' if matches found, else same as input.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: remove_text_in_parentheses(string: str) -> str

   
   Remove text within parentheses.

   e.g. test (T) -> test

   :param string: Input string.
   :type string: str

   :returns: Output string with text inside including parentheses removed.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: fix_inequalities(string: str) -> str

   
   Match result value, remove inequality symbols (<, >, =).

   For e.g.
   10.2, >= 10, < 10, 11 -> 10.2, 10, 10, 11

   :param string: The string to search for possible matches.
   :type string: str

   :returns: Result value string is matched to regex, symbols removed.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: to_lower(string: str) -> str

   
   Convert string to lowercase letters.

   :param string: Input string.
   :type string: str

   :returns: Output string in lowercase.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: none_to_empty_string(value: Union[None, str]) -> str

   
   Convert None to empty string.

   :param value: Input value.
   :type value: None or str

   :returns: Empty string.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: strip_whitespace(string: str) -> str

   
   Remove all whitespaces from string.

   :param string: Input string.
   :type string: str

   :returns: Output string with whitespace removed.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: is_non_empty_string(string: str) -> bool

   
   Return True if value == "", else False.

   :param string: Input string.
   :type string: str

   :returns: True if non-empty string, else False.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: normalize_special_characters(item: str) -> str

   
   Replace special characters with string equivalents.

   :param item: Input string.
   :type item: str

   :returns: Output string after normalizing.
   :rtype: str















   ..
       !! processed by numpydoc !!

.. py:function:: count_occurrences(items: Iterable) -> List

   
   Count number of occurrences of the items.

   :param items: Iterable of items to count the number of repeated values.
   :type items: Iterable

   :returns: (item, count) ordered by count, descending order.
   :rtype: List















   ..
       !! processed by numpydoc !!

.. py:function:: convert_to_numeric(input_: Union[str, float, None]) -> Union[int, str, float]

   
   Convert input to numeric values.

   :param input_: Input value to try and convert to numeric.
   :type input_: str

   :returns: Converted numeric output.
   :rtype: str or int or float















   ..
       !! processed by numpydoc !!

.. py:function:: is_range(input_: str) -> bool

   
   Test if x matches range pattern.

   e.g. "2 to 5" or "2 - 5"

   :param input_: Input string to test if its a range.
   :type input_: str

   :returns: True if categorical, False otherwise.
   :rtype: bool















   ..
       !! processed by numpydoc !!

.. py:function:: compute_range_avg(item: str) -> Union[int, float]

   
   Compute the average of a range.

   For instance, 5 - 7 -> 6, and 1 - 4 -> 2.5

   :param item: Input string which mentions a range.
   :type item: str

   :returns: Computed average of range.
   :rtype: int or float















   ..
       !! processed by numpydoc !!

