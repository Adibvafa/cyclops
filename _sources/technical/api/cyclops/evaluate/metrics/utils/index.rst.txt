:py:mod:`cyclops.evaluate.metrics.utils`
========================================

.. py:module:: cyclops.evaluate.metrics.utils

.. autoapi-nested-parse::

   Utility functions for metrics.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: is_numeric(*arrays: numpy.typing.ArrayLike) -> bool

   
   Check if given arrays have numeric datatype.

   Determine whether the argument(s) have a numeric datatype, when converted to a
   NumPy array. Booleans, unsigned integers, signed integers, floats and complex
   numbers are the kinds of numeric datatype.

   :param arrays: The arrays to check.
   :type arrays: array-likes

   :returns: **is_numeric** -- True if all of the arrays have a numeric datatype, False if not.
   :rtype: ``bool``















   ..
       !! processed by numpydoc !!

.. py:function:: common_input_checks_and_format(target: numpy.typing.ArrayLike, preds: numpy.typing.ArrayLike) -> Tuple[numpy.ndarray, numpy.ndarray, str, str]

   
   Check the input and convert it to the correct format.

   This function also checks if the input is valid.

   :param target: The target.
   :type target: ArrayLike
   :param preds: The predictions.
   :type preds: ArrayLike

   :returns: * **target** (*np.ndarray*) -- The target as a numpy array.
             * **preds** (*np.ndarray*) -- The predictions as a numpy array.
             * **type_target** (*str*) -- The type of the target. One of:
             * **\* 'continuous'** (``target`` is an array-like of floats that are not all) -- integers, and is 1d or a column vector.
             * **\* 'continuous-multioutput'** (``target`` is a 2d array of floats that are) -- not all integers, and both dimensions are of size > 1.
             * **\* 'binary'** (``target`` contains <= 2 discrete values and is 1d or a column) -- vector.
             * **\* 'multiclass'** (``target`` contains more than two discrete values, is not a) -- sequence of sequences, and is 1d or a column vector.
             * **\* 'multiclass-multioutput'** (``target`` is a 2d array that contains more) -- than two discrete values, is not a sequence of sequences, and both
               dimensions are of size > 1.
             * **\* 'multilabel-indicator'** (``target`` is a label indicator matrix, an array) -- of two dimensions with at least two columns, and at most 2 unique
               values.
             * **\* 'unknown'** (``target`` is array-like but none of the above, such as a 3d) -- array, sequence of sequences, or an array of non-sequence objects.
             * **type_preds** (*str*) -- The type of the predictions.

   :raises ValueError: If the input has more than two dimensions.















   ..
       !! processed by numpydoc !!

.. py:function:: sigmoid(arr: numpy.typing.ArrayLike) -> numpy.ndarray

   
   Sigmoid function.
















   ..
       !! processed by numpydoc !!

.. py:function:: check_topk(top_k: int, type_preds: str, type_target: str, n_classes: int) -> None

   
   Check if top_k is valid.

   :param top_k: The number of classes to select.
   :type top_k: int
   :param type_preds: The type of the predictions.
   :type type_preds: str
   :param type_target: The type of the target.
   :type type_target: str
   :param n_classes: The number of classes.
   :type n_classes: int

   :raises ValueError: If top_k is not valid.















   ..
       !! processed by numpydoc !!

.. py:function:: select_topk(prob_scores: numpy.ndarray, top_k: Optional[int] = 1) -> numpy.ndarray

   
   Convert a probability scores to binary by selecting top-k highest entries.

   :param prob_scores: The probability scores. Must be a 2D array.
   :type prob_scores: np.ndarray
   :param top_k: The number of top predictions to select.
   :type top_k: int, default=1

   :returns: A binary ndarray of the same shape as the input array.
   :rtype: np.ndarray















   ..
       !! processed by numpydoc !!

