:py:mod:`cyclops.evaluate.metrics.functional.stat_scores`
=========================================================

.. py:module:: cyclops.evaluate.metrics.functional.stat_scores

.. autoapi-nested-parse::

   Functions for computing stat scores for different types of inputs.

   The stat scores are the number of true positives, false positives, true negatives, and
   false negatives. Binary, multiclass and multilabel data are supported, including logits
   and probabilities.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:function:: binary_stat_scores(target: numpy.typing.ArrayLike, preds: numpy.typing.ArrayLike, pos_label: int = 1, threshold: float = 0.5) -> numpy.ndarray

   
   Compute the stat scores for binary inputs.

   :param target: Ground truth.
   :type target: ArrayLike
   :param preds: Predictions.
   :type preds: ArrayLike
   :param pos_label: The label to use for the positive class.
   :type pos_label: int, default=1
   :param threshold: The threshold to use for converting the predictions to binary
                     values. Logits will be converted to probabilities using the sigmoid
                     function.
   :type threshold: float, default=0.5

   :returns: The true positives, false positives, true negatives and false negatives
             and support in that order.
   :rtype: numpy.ndarray

   :raises ValueError: If the threshold is not in [0, 1] or if the pos_label is not 0 or 1.

   .. rubric:: Examples

   >>> from cyclops.evaluation.metrics.functional import binary_stat_scores
   >>> target = [0, 1, 1, 0]
   >>> preds = [0, 1, 0, 0]
   >>> binary_stat_scores(target, preds)
   array([1, 0, 2, 1, 2])















   ..
       !! processed by numpydoc !!

.. py:function:: multiclass_stat_scores(target: numpy.typing.ArrayLike, preds: numpy.typing.ArrayLike, num_classes: int, top_k: Optional[int] = None, classwise: Optional[bool] = True) -> numpy.ndarray

   
   Compute stat scores for multiclass targets.

   :param target: The ground truth values.
   :type target: ArrayLike
   :param preds: The predictions. If determined to be in continuous format, will be
                 converted to multiclass using the ``top_k`` parameter.
   :type preds: ArrayLike
   :param num_classes: The total number of classes for the problem.
   :type num_classes: int
   :param top_k: The number of top predictions to consider when computing the
                 stat scores. If ``None``, it is assumed to be 1.
   :type top_k: Optional[int], default=None
   :param classwise: Whether to return the stat scores for each class or sum over all
                     classes.
   :type classwise: bool, default=True

   :returns: The number of true positives, false positives, true negatives, false
             negatives and support. If ``classwise`` is ``True``, the shape is
             ``(num_classes, 5)``. Otherwise, the shape is ``(5,)``
   :rtype: numpy.nadarray

   .. rubric:: Examples

   >>> from cyclops.evaluation.metrics.functional import multiclass_stat_scores
   >>> target = [0, 1, 2, 2, 2]
   >>> preds = [0, 2, 1, 2, 0]
   >>> multiclass_stat_scores(target, preds, num_classes=3)
   array([[1, 1, 3, 0, 1],
           [0, 1, 3, 1, 1],
           [1, 1, 1, 2, 3]])















   ..
       !! processed by numpydoc !!

.. py:function:: multilabel_stat_scores(target: numpy.typing.ArrayLike, preds: numpy.typing.ArrayLike, num_labels: int, threshold: float = 0.5, top_k: Optional[int] = None, labelwise: Optional[bool] = False) -> numpy.ndarray

   
   Compute the stat scores for multilabel inputs.

   :param target: Ground truth.
   :type target: ArrayLike
   :param preds: Predictions.
   :type preds: ArrayLike
   :param num_labels: The total number of labels for the problem.
   :type num_labels: int
   :param threshold: Threshold value for binarizing predictions that are probabilities or
                     logits. A sigmoid function is applied if the predictions are logits.
   :type threshold: float, default=0.5
   :param top_k: The number of top predictions to consider when computing the statistics.
   :type top_k: int, default=None
   :param labelwise: Whether to return the stat scores for each label or sum over all labels.
   :type labelwise: bool, default=False

   :returns: The number of true positives, false positives, true negatives and false
             negatives and the support. The shape of the array is ``(5, num_labels)``
             if ``labelwise=True`` and ``(5,)`` otherwise.
   :rtype: numpy.ndarray

   :raises ValueError: If ``threshold`` is not between ``0`` and ``1``.

   .. rubric:: Examples

   >>> from cyclops.evaluation.metrics.functional import multilabel_stat_scores
   >>> target = [[0, 1, 1], [1, 0, 1]]
   >>> preds = [[0.1, 0.9, 0.8], [0.8, 0.2, 0.7]]
   >>> multilabel_stat_scores(target, preds, num_labels=3)
   array([[1, 0, 1, 0, 1],
           [1, 0, 1, 0, 1],
           [2, 0, 0, 0, 2]])















   ..
       !! processed by numpydoc !!

.. py:function:: stat_scores(target: numpy.typing.ArrayLike, preds: numpy.typing.ArrayLike, task: Literal[binary, multiclass, multilabel], pos_label: int = 1, threshold: float = 0.5, num_classes: Optional[int] = None, classwise: Optional[bool] = True, top_k: Optional[int] = None, num_labels: Optional[int] = None, labelwise: Optional[bool] = False) -> numpy.ndarray

   
   Compute stat scores for binary, multiclass or multilabel problems.

   This function acts as an entry point to the specialized functions for each
   task.

   :param target: Ground truth.
   :type target: ArrayLike
   :param preds: Predictions.
   :type preds: ArrayLike
   :param task: The task type. Can be either ``binary``, ``multiclass`` or
                ``multilabel``.
   :type task: Literal["binary", "multiclass", "multilabel"]
   :param pos_label: The positive label to report. Only used for binary tasks.
   :type pos_label: int, default=1
   :param threshold: The threshold to use for binarizing the predictions if logits or
                     probabilities are provided. If logits are provided, a sigmoid function
                     is applied prior to binarization. Used for binary and multilabel tasks.
   :type threshold: float, default=0.5
   :param num_classes: The number of classes for the problem. Required for multiclass tasks.
   :type num_classes: int
   :param classwise: Whether to return the stat scores for each class or sum over all
                     classes. Only used for multiclass tasks.
   :type classwise: bool, default=True
   :param top_k: The number of top predictions to consider when computing the statistics.
                 If ``None``, ``top_k`` is set to 1. Used for multiclass and multilabel
                 tasks.
   :type top_k: int, default=None
   :param num_labels: The number of labels. Only used for multilabel tasks.
   :type num_labels: int
   :param labelwise: Whether to compute the stat scores labelwise. Only used for multilabel
                     tasks.
   :type labelwise: bool, default=False

   :returns: **scores** -- The stat scores - true positives, false positives, true negatives,
             false negatives and support. For binary tasks, the shape is (5,).
             For multiclass tasks, the shape is (n_classes, 5) if ``classwise`` is
             True, otherwise (5,). For multilabel tasks, the shape is (n_labels, 5)
             if ``labelwise`` is True, otherwise (n_classes, 5).
   :rtype: numpy.ndarray

   .. rubric:: Examples

   >>> # (binary)
   >>> from cyclops.evaluation.metrics.functional import tat_scores
   >>> target = [0, 1, 1, 0]
   >>> preds = [0, 1, 0, 0]
   >>> stat_scores(target, preds, task="binary")
   array([1, 0, 2, 1, 2])

   >>> # (multiclass)
   >>> from cyclops.evaluation.metrics.functional import multiclass_stat_scores
   >>> target = [0, 1, 2, 2, 2]
   >>> preds = [0, 2, 1, 2, 0]
   >>> stat_scores(target, preds, task="multiclass", num_classes=3)
   array([[1, 1, 3, 0, 1],
           [0, 1, 3, 1, 1],
           [1, 1, 1, 2, 3]])

   >>> # (multilabel)
   >>> from cyclops.evaluation.metrics.functional import stat_scores
   >>> target = [[0, 1, 1], [1, 0, 1]]
   >>> preds = [[0.1, 0.9, 0.8], [0.8, 0.2, 0.7]]
   >>> stat_scores(target, preds, task="multilabel", num_labels=3)
   array([[1, 0, 1, 0, 1],
           [1, 0, 1, 0, 1],
           [2, 0, 0, 0, 2]])















   ..
       !! processed by numpydoc !!

