:py:mod:`cyclops.evaluate.metrics.metric`
=========================================

.. py:module:: cyclops.evaluate.metrics.metric

.. autoapi-nested-parse::

   Base abstract class for all metrics.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

.. py:class:: Metric



   
   Abstract base class for metrics classes.
















   ..
       !! processed by numpydoc !!
   .. py:method:: __init_subclass__(registry_key: str = None, force_register: bool = False, **kwargs)
      :classmethod:

      
      Register the subclass in the registry.
















      ..
          !! processed by numpydoc !!

   .. py:method:: add_state(name: str, default: Union[List, numpy.ndarray]) -> None

      
      Add a state variable to the metric.

      :param name: The name of the state variable.
      :type name: str
      :param default: The default value of the state variable.
      :type default: Union[List, numpy.ndarray]

      :rtype: None

      :raises AttributeError: If the state variable already exists.
      :raises ValueError: If the state variable is not a numpy.ndarray or an empty list.















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_state() -> None

      
      Reset the metric to its initial state.

      :rtype: None















      ..
          !! processed by numpydoc !!

   .. py:method:: update_state(*args: Any, **kwargs: Any) -> None
      :abstractmethod:

      
      Update the state of the metric.
















      ..
          !! processed by numpydoc !!

   .. py:method:: compute() -> Any
      :abstractmethod:

      
      Compute the final value of the metric from the state variables.
















      ..
          !! processed by numpydoc !!

   .. py:method:: __call__(*args, **kwargs)

      
      Update the global metric state and compute the metric for a batch.
















      ..
          !! processed by numpydoc !!


.. py:function:: create_metric(metric_name: str, **kwargs: Optional[Dict[str, Any]]) -> Metric

   
   Create a metric instance from a name.

   :param metric_name: The name of the metric.
   :type metric_name: str
   :param \*\*kwargs: The keyword arguments to pass to the metric constructor.
   :type \*\*kwargs: Optional[Dict[str, Any]]

   :returns: **metric** -- The metric instance.
   :rtype: Metric















   ..
       !! processed by numpydoc !!

.. py:class:: MetricCollection(metrics: Union[Metric, Sequence[Metric], Dict[str, Metric]])



   
   A collection of metrics.

   Provides a convenient way to compute multiple metrics at once. It groups
   metrics that have similar state variables and only updates the state variables
   once per group, reducing the amount of computation required.

   :param metrics: The list of metrics to collect.
   :type metrics: List[Metric]















   ..
       !! processed by numpydoc !!
   .. py:method:: add_state(*args: Any, **kwargs: Any) -> None
      :abstractmethod:

      
      Add state variables to the metric.

      Not implemented for ``MetricCollection``.















      ..
          !! processed by numpydoc !!

   .. py:method:: update_state(*args: Any, **kwargs: Any) -> None

      
      Update the state of all metrics in the collection.

      Uses the metric groups to only update the state variables once per group.

      :param \*args: The positional arguments to pass to the update_state method of each metric.
      :type \*args: Any
      :param \*\*kwargs: The keyword arguments to pass to the update_state method of each metric.
      :type \*\*kwargs: Any















      ..
          !! processed by numpydoc !!

   .. py:method:: compute() -> Dict[str, Any]

      
      Compute the metrics in the collection.
















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_state() -> None

      
      Reset the state of all metrics in the collection.
















      ..
          !! processed by numpydoc !!

   .. py:method:: __call__(*args, **kwargs)

      
      Update the global metric state and compute the metric for a batch.
















      ..
          !! processed by numpydoc !!


